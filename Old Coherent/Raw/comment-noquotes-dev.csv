File,Comment,Code,Coherent
Weightings.java,/** * @param func * @return Strategy that sets the weight to the difference between the max *  value of all clients and the client value. */,"public static <C> WeightingStrategy<C> inverseMax(Func1<C, Integer> func) {
        return new InverseMaxWeightingStrategy<C>(func);
    }",1
HomeIndexFragment.java,/** * ListView */,"private void initListView() {
    topicAdapter = new TopicAdapter(this.getActivity(), data);
    listView.setAdapter(topicAdapter);
    listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
            Log.e(TAG, view.getTag().toString());
            Intent intent = new Intent();
            intent.setClass(HomeIndexFragment.this.getActivity(), DetailActivity.class);
            intent.putExtra(""BUNDLE_KEY_DISPLAY_TYPE"", 0);
            intent.putExtra(""detailId"", data.get(position).getThemeId());
            intent.putExtra(""circleId"", """");
            startActivity(intent);
        }
    });
}",0
ZMQ.java,/** * Set the size of the 0MQ thread pool to handle I/O operations. */,"public boolean setIOThreads(int ioThreads)
        {
            return ctx.set(zmq.ZMQ.ZMQ_IO_THREADS, ioThreads);
        }",1
ZabbixReporter.java,/** * Convert rates to the given time unit. * * @param rateUnit *            a unit of time * @return {@code this} */,"public Builder convertRatesTo(TimeUnit rateUnit) {
			this.rateUnit = rateUnit;
			return this;
		}",1
WrapperPlayServerSpawnEntityLiving.java,/** * Set entity ID. * @param value - new value. */,"public void setEntityID(int value) {
        handle.getIntegers().write(0, value);
    }",1
VpnStateService.java,/** * Add the given remediation instruction to the internal list.  Listeners * are not notified. * * Instructions are cleared if the IMC state is set to UNKNOWN. * * May be called from threads other than the main thread. * * @param instruction remediation instruction */,"public void addRemediationInstruction(final RemediationInstruction instruction)
	{
		mHandler.post(new Runnable() {
			@Override
			public void run()
			{
				VpnStateService.this.mRemediationInstructions.add(instruction);
			}
		});
	}",1
XfsCommand.java,/** * @return the xfsDevice */,"public XfsService getXFSService() {
		return xfsService;
	}",1
VMInstanceRequest.java,/** * @param ami */,"public void setInstanceDescription(InstanceDescription description) {
        this.items.put(TankConstants.KEY_DESCRIPTION, description);
    }",1
WorkpoolClientTestNG.java,/** * Test-case to delete the Workpool created from an ISO on the vCenter datastore.  * @param wpUrl * @param isoWorkPoolCreatedName */,"@Test(dependsOnMethods = {""createLinkedWP_FromISO"", ""createLinkedWP_deleteWP_ExistingVMImage""})
   @Parameters({ ""wpUrl"",  ""isoWorkPoolCreatedName"" })
   public void deleteLinkedWP_FromISO(String wpUrl, String isoWorkPoolCreatedName) {
      String workPoolUrl =  wpUrl + ""/workpools"";
      WorkpoolClient wpClient = new WorkpoolClient(workPoolUrl);

      System.out.println(""Do a list() on the Workpool after deleting the pool"");
      List<Workpool> wpList = wpClient.list();
      assertNotNull(wpList);
      assertFalse(wpList.size() <= 0);
      assertEquals(isoWorkPoolCreatedName,wpList.get(0).getName());

      int numPoolsBeforeDelete = wpList.size();
      System.out.println(""Current Pool size Before pool deletion: "" + numPoolsBeforeDelete);

      System.out.println(""Deleting the WP obtained using Get"");
      wpClient.delete(wpList.get(0));

      System.out.println(""Do a list() on the Workpool after deleting the pool"");
      wpList = wpClient.list();
      System.out.println(wpList.size());
      int numPoolsAfterDelete = wpList.size();
      System.out.println(""Current Pool size After pool deletion: "" + numPoolsAfterDelete);
      assertTrue((numPoolsBeforeDelete -1 ) == numPoolsAfterDelete,""Pool Sizes do not match after deletion"");

   }",1
WrapperPlayServerExperience.java,/** * Retrieve the new amount of experience in the experience bar as a value between 0 and 1. * @return The current Experience bar */,"public float getExperienceBar() {
        return handle.getFloat().read(0);
    }",1
XOrGateFigure.java,"/** * @see org.eclipse.draw2d.Figure#getPreferredSize(int, int) */","public Dimension getPreferredSize(int wHint, int hHint) {
	return SIZE;
}",1
ExactMatcher.java,/** just copy code from wiki */,"private static int editDistance(String str1, String str2) {
    int[][] distance = new int[str1.length() + 1][str2.length() + 1];        
     
    for (int i = 0; i <= str1.length(); i++)                                 
        distance[i][0] = i;                                                  
    for (int j = 1; j <= str2.length(); j++)                                 
        distance[0][j] = j;                                                  

    for (int i = 1; i <= str1.length(); i++)                                 
        for (int j = 1; j <= str2.length(); j++)                             
            distance[i][j] = minimum(                                        
                    distance[i - 1][j] + 1,                                  
                    distance[i][j - 1] + 1,                                  
                    distance[i - 1][j - 1] + ((str1.charAt(i - 1) == str2.charAt(j - 1)) ? 0 : 1));

    return distance[str1.length()][str2.length()];
}",0
Whitelist.java,"/** Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to URLs with the defined protocol. <p/> E.g.: <code>addProtocols(""a"", ""href"", ""ftp"", ""http"", ""https"")</code>  @param tag       Tag the URL protocol is for @param key       Attribute key @param protocols List of valid protocols @return this, for chaining */","public Whitelist addProtocols(String tag, String key, String... protocols) {
        Validate.notEmpty(tag);
        Validate.notEmpty(key);
        Validate.notNull(protocols);

        TagName tagName = TagName.valueOf(tag);
        AttributeKey attrKey = AttributeKey.valueOf(key);
        Map<AttributeKey, Set<Protocol>> attrMap;
        Set<Protocol> protSet;

        if (this.protocols.containsKey(tagName)) {
            attrMap = this.protocols.get(tagName);
        } else {
            attrMap = new HashMap<AttributeKey, Set<Protocol>>();
            this.protocols.put(tagName, attrMap);
        }
        if (attrMap.containsKey(attrKey)) {
            protSet = attrMap.get(attrKey);
        } else {
            protSet = new HashSet<Protocol>();
            attrMap.put(attrKey, protSet);
        }
        for (String protocol : protocols) {
            Validate.notEmpty(protocol);
            Protocol prot = Protocol.valueOf(protocol);
            protSet.add(prot);
        }
        return this;
    }",1
WBSType.java,/** * Sets the value of the summaryActualThisPeriodNonLaborUnits property. * * @param value *     allowed object is *     {@link Double } * */,"public void setSummaryActualThisPeriodNonLaborUnits(Double value)
   {
      this.summaryActualThisPeriodNonLaborUnits = value;
   }",1
VMWareExecutorConfiguration.java,/** * @param rootDir * @param propNames */,"public VMWareExecutorConfiguration(File rootDir, String[] propNames) {
		super(rootDir, propNames);
	}",1
XMLNoteStyles.java,/** * Returns the default style for paragraphs * @return * @throws BadStyleException */,"public XMLNoteParStyle getDefaultStyle() throws BadStyleException {
		int i=getDefaultStyleIndex();
		if (i==-1) {
			throw new BadStyleException(""No default style in XMLNoteStyles"");
		}
		return getStyle(i);
	}",1
WFSPINCAPS.java,/** * {@link #hsmVendor} */,"public String getHSMVendor() {
		return hsmVendor.toString();
	}",1
WalkieService.java,/* Channel has 2 possible operations to stop: *    - service registration *    - service resolve */,"final CountDownLatch stopLatch = new CountDownLatch( 2 );
        m_channel.stop( stopLatch );

        try
        {
            stopLatch.await();
        }",1
WpadProxySearchStrategy.java,/************************************************************************* * Gets the printable name of the search strategy. * * @return the printable name of the search strategy ************************************************************************/,"@Override
  public String getName() {
    return ""wpad"";
  }",1
WBSType.java,/** * Gets the value of the originalBudget property. * * @return *     possible object is *     {@link Double } * */,"public Double getOriginalBudget()
   {
      return originalBudget;
   }",1
YeloBoardFragment.java,/** * gets the instance for the fragment to call in a pager * * @return */,"public static YeloBoardFragment newInstance() {
        YeloBoardFragment f = new YeloBoardFragment();
        return f;
    }",1
XContentMapValues.java,"/** * Extracts raw values (string, int, and so on) based on the path provided returning all of them * as a single list. */","public static List<Object> extractRawValues(String path, Map<String, Object> map) {
        List<Object> values = Lists.newArrayList();
        String[] pathElements = Strings.splitStringToArray(path, '.');
        if (pathElements.length == 0) {
            return values;
        }
        extractRawValues(values, map, pathElements, 0);
        return values;
    }",1
WiffProperties.java,"/** * Determines if the given property has a value * * @param key *          the name of the property * @return true if the property has been set. Otherwise, false. */","public boolean contains(String key) {
    return properties.containsKey(key);
  }",1
FilterMediatorTest.java,/** * Using OR operation with Xpaths * /filters/filter/syanpse3.xml is used * * @throws Exception */,"@Test(groups = {""wso2.esb""})
public void filterMediatorXpathWithORTest() throws Exception {

    loadESBConfigurationFromClasspath(File.separator + ""artifacts"" + File.separator + ""ESB"" + File.separator
                                      + ""synapseconfig"" + File.separator + ""filters"" + File.separator + ""filter"" + File.separator + ""synapse3.xml"");
    OMElement response11 = axis2Client.sendSimpleStockQuoteSoap11(getMainSequenceURL(), null, ""IBM"");
    OMElement response12 = axis2Client.sendSimpleStockQuoteSoap12(getMainSequenceURL(), null, ""IBM"");

    Assert.assertTrue(response11.toString().contains(""GetQuoteResponse""));
    Assert.assertTrue(response11.toString().contains(""IBM Company""));

    Assert.assertTrue(response12.toString().contains(""GetQuoteResponse""));
    Assert.assertTrue(response12.toString().contains(""IBM Company""));

}",0
WrapperPlayServerNamedEntitySpawn.java,"/** * Retrieve the player name. * <p> * Max length of 16. * @return The current player Name, or NULL if not set. */","public String getPlayerName() {
    	WrappedGameProfile profile = getProfile();
        return profile != null ? profile.getName() : null;
    }",1
XmlEntityConsumerTest.java,/** * Reads an inline Room at an Employee with specially formatted XML (see issue ODATAFORSAP-92). */,"@Test
  public void readWithInlineContentEmployeeRoomEntrySpecialXml() throws Exception {

    EdmEntitySet entitySet = MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""Employees"");
    InputStream reqContent = createContentAsStream(EMPLOYEE_1_ROOM_XML, true);

    // execute
    XmlEntityConsumer xec = new XmlEntityConsumer();
    ODataEntry entry =
        xec.readEntry(entitySet, reqContent, EntityProviderReadProperties.init().mergeSemantic(true).build());

    // validate
    assertNotNull(entry);
    Map<String, Object> properties = entry.getProperties();
    assertEquals(""1"", properties.get(""EmployeeId""));
    assertEquals(""Walter Winter"", properties.get(""EmployeeName""));
    ODataEntry room = (ODataEntry) properties.get(""ne_Room"");
    Map<String, Object> roomProperties = room.getProperties();
    assertEquals(4, roomProperties.size());
    assertEquals(""1"", roomProperties.get(""Id""));
    assertEquals(""Room 1"", roomProperties.get(""Name""));
    assertEquals(Short.valueOf(""1""), roomProperties.get(""Seats""));
    assertEquals(Short.valueOf(""1""), roomProperties.get(""Version""));
  }",1
WBSType.java,/** * Sets the value of the summaryExpenseCostVariance property. * * @param value *     allowed object is *     {@link Double } * */,"public void setSummaryExpenseCostVariance(Double value)
   {
      this.summaryExpenseCostVariance = value;
   }",1
XMLList.java,/** * * @return */,"Object[] inScopeNamespaces()
    {
        if(length() == 1)
        {
            return getXmlFromAnnotation(0).inScopeNamespaces();
        }
        else
        {
            throw ScriptRuntime.typeError(""The inScopeNamespaces method works only on lists containing one item"");
        }
    }",1
WsImportTest.java,/** * Create a generated test WSDL in a new temporary directory. * @return * @throws IOException */,"private static File generateTempWsdl() throws IOException {
        File dir = createTempDirectory();
        File tmpWsdl = new File(dir, ""test.wsdl"");
        String doc = XmlSchemaEnhancerTest.readWsdl(PersonService.class);
        FileUtils.write(tmpWsdl, doc);
        return tmpWsdl;
    }",1
XMLList.java,/** * * @param index * @param start * @return */,"public Object get(int index, Scriptable start)
    {
        //Log(""get index: "" + index);

        if (index >= 0 && index < length())
        {
            return getXmlFromAnnotation(index);
        }
        else
        {
            return Scriptable.NOT_FOUND;
        }
    }",1
YAxisRendererHorizontalBarChart.java,/** * Computes the axis values. * * @param yMin - the minimum y-value in the data object for this axis * @param yMax - the maximum y-value in the data object for this axis */,"@Override
    public void computeAxis(float yMin, float yMax, boolean inverted) {

        // calculate the starting and entry point of the y-labels (depending on
        // zoom / contentrect bounds)
        if (mViewPortHandler.contentHeight() > 10 && !mViewPortHandler.isFullyZoomedOutX()) {

            MPPointD p1 = mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),
                    mViewPortHandler.contentTop());
            MPPointD p2 = mTrans.getValuesByTouchPoint(mViewPortHandler.contentRight(),
                    mViewPortHandler.contentTop());

            if (!inverted) {
                yMin = (float) p1.x;
                yMax = (float) p2.x;
            } else {
                yMin = (float) p2.x;
                yMax = (float) p1.x;
            }

            MPPointD.recycleInstance(p1);
            MPPointD.recycleInstance(p2);
        }

        computeAxisValues(yMin, yMax);
    }",1
WeekView.java,/** * Get the scrolling speed factor in horizontal direction. * @return The speed factor in horizontal direction. */,"public float getXScrollingSpeed() {
        return mXScrollingSpeed;
    }",1
ZookeeperConfigProvider.java,/** * @param client curator instance for connecting to the config ensemble * @param baseZPath the base path for config nodes * @param defaults default properties * @param hostname this JVM's hostname * @throws Exception errors */,"public ZookeeperConfigProvider(CuratorFramework client, String baseZPath, Properties defaults, String hostname) throws Exception
    {
        this.client = client;
        this.defaults = defaults;
        this.hostname = hostname;
        configPath = ZKPaths.makePath(baseZPath, CONFIG_PATH);
        lockPath = ZKPaths.makePath(baseZPath, LOCK_PATH);
        cache = new PathChildrenCache(client, configPath, true);
    }",1
PullToRefreshScrollView.java,/** * Taken from the AOSP ScrollView source */,"private int getScrollRange() {
        int scrollRange = 0;
        if (getChildCount() > 0) {
            View child = getChildAt(0);
            scrollRange = Math.max(0, child.getHeight() - (getHeight() - getPaddingBottom() - getPaddingTop()));
        }
        return scrollRange;
    }",0
WrapperPlayServerRemoveEntityEffect.java,/** * Retrieve entity ID of a player. * @return The current Entity ID */,"public int getEntityId() {
        return handle.getIntegers().read(0);
    }",1
WrapperPlayServerEntityStatus.java,/** * Set the entity ID. * @param value - new value. */,"public void setEntityId(int value) {
        handle.getIntegers().write(0, value);
    }",1
DebugLight.java,/** * Used in environments where full debug may not be available * @param e */,"public static void
printStackTrace(
    Throwable e )
{
    try{
        Debug.printStackTrace( e );
        
    }catch( Throwable f ){
        
        e.printStackTrace();
    }
}",0
WallsViewActivity.java,/** * Loads the {@link red.yelo.fragments.WallPostFragment} into the fragment container */,"public void loadWalls(Bundle args) {


        loadFragment(R.id.frame_content, (AbstractYeloFragment) Fragment
                        .instantiate(this, YeloBoardFragment.class
                                .getName(), args), AppConstants.FragmentTags.WALLS, false,
                null
        );

    }",1
WorkSurfaceShapedRecipes.java,/** * Returns an Item that is the result of this recipe */,"public ItemStack getCraftingResult(InventoryCrafting par1InventoryCrafting)
    {
        ItemStack itemstack = this.getRecipeOutput().copy();

        if (this.field_92101_f)
        {
            for (int i = 0; i < par1InventoryCrafting.getSizeInventory(); ++i)
            {
                ItemStack itemstack1 = par1InventoryCrafting.getStackInSlot(i);

                if (itemstack1 != null && itemstack1.hasTagCompound())
                {
                    itemstack.setTagCompound((NBTTagCompound)itemstack1.stackTagCompound.copy());
                }
            }
        }

        return itemstack;
    }",1
WiffProperties.java,"/** * Bulk loads the properties object from a map of key, value pairs * * @param map *          a map of keys and values */","public void setProperities(Map<String, String> map) {
    for (String key : map.keySet()) {
      setProperty(key, map.get(key));
    }
  }",1
WrapperPlayServerEntityLook.java,/** * Retrieve the yaw of the current entity. * @return The current Yaw */,"public float getYaw() {
        return (handle.getBytes().read(3) * 360.F) / 256.0F;
    }",1
ZStreamingQuoteControl.java,/** * getQuoteListByTimeRange - public method to get complete Streamed Data between a time range * @param instrumentToken * @param fromTime * @param toTime * @return StreamingQuote List */,"public List<StreamingQuote> getQuoteListByTimeRange(String instrumentToken, String fromTime, String toTime){
		if (ZStreamingConfig.isStreamingQuoteStoringRequired() && (streamingQuoteStorage != null)) {
			//Get Complete Streamed Data
			return streamingQuoteStorage.getQuoteListByTimeRange(instrumentToken, fromTime, toTime);
		} else{
			return null;
		}
	}",1
WrappedLongObjectIdEntity.java,/** * @return the id */,"public WrappedLongObjectId getId() {
		return id;
	}",1
WriterPool.java,/** * @return State of the pool string */,"protected String getPoolState() {
        StringBuffer buffer = new StringBuffer(""Active "");
        buffer.append(getNumActive());
        buffer.append("" of max "");
        buffer.append(maxActive);
        buffer.append("", idle "");
        buffer.append(getNumIdle());
        return buffer.toString();
    }",1
WBSCategoryType.java,/** * Sets the value of the createDate property. * * @param value *     allowed object is *     {@link String } * */,"public void setCreateDate(Date value)
   {
      this.createDate = value;
   }",1
UPnPPlugin.java,/** * Provided for use by other plugins. */,"public void refreshMappings(boolean force) {
    if (force) {
        closeDown(true);
        startUp();
    }
    else {
        this.upnp.reset();
    }
}",0
XliffReader.java,"/** * Get the statement value,the text in `' * @return * @throws MifParseException * @throws EOFException */","private String getValue() throws MifParseException, EOFException {
		// char n = r.getCharAfterIgnore();
		if (ch != '`') {
			throw new MifParseException(Messages.getString(""mif.Mif2Xliff.statementError"") + formatLineNumber());
		}
		StringBuffer bf = new StringBuffer();
		char a = r.getChar();
		while (a != '\'') {
			bf.append(a);
			a = r.getChar();
		}
		sos--;
		return bf.toString();
	}",1
FirefoxProfile.java,/** * Internal method This is liable to change at a moment's notice. */,"@Beta
protected Reader onlyOverrideThisIfYouKnowWhatYouAreDoing() {
URL resource = Resources.getResource(FirefoxProfile.class, defaultPrefs);
try {
  return new InputStreamReader(resource.openStream());
} catch (IOException e) {
  throw new WebDriverException(e);
}
}",0
YardCalculator.java,/** * Gets the diagonal of the yard * @return the diagonal */,"public double diagonal()
   {
	   return Math.sqrt(Math.pow(l, 2) + Math.pow(w, 2)) * METERS_PER_FOOT;
   }",1
VocabularyService.java,/** * Perform a search using the default vocabulary source. * @param search * @return */,"@Path(""search"")
  @POST
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  public Collection<Concept> executeSearch(ConceptSearch search) {
    String defaultSourceKey = getDefaultVocabularySourceKey();
    
    if (defaultSourceKey == null)
      throw new WebApplicationException(new Exception(""No vocabulary or cdm daimon was found in configured sources.  Search failed.""), Response.Status.SERVICE_UNAVAILABLE); // http 503      

    return executeSearch(defaultSourceKey, search);    
  }",1
PersistentResults.java,/** * Constructor helper for the common case.  */,"public PersistentResults(ExportType type, IForm form, SubmissionFilterGroup filterGroup, Map<String, String> parameters,
  CallingContext cc) throws ODKDatastoreException {
Datastore ds = cc.getDatastore();
User user = cc.getCurrentUser();
PersistentResultsTable relation = PersistentResultsTable.assertRelation(cc);
row = ds.createEntityUsingRelation(relation, user);
setRequestingUser(user.getUriUser());
Date now = new Date();
setRequestDate(now);
setRequestParameters(parameters);
setLastRetryDate(now);
setAttemptCount(1L);
setStatus(ExportStatus.GENERATION_IN_PROGRESS);
setResultType(type);
setFormId(form.getFormId());
if(filterGroup != null) {
  setFilterGroupUri(filterGroup.getUri());
}
this.bcm = PersistentResultsTable.assertManipulator(row.getUri(), cc);

// NOTE: the entity is not yet persisted!
}",0
WidgetHistogramXaxisType.java,/** * Checks if the axis maximum should be automatic. This should only be called if isAxisCentered() returns false. * * @return    True if the maximum should be automatic. */,"public boolean isMaximumAutomatic() {
		
		return maxCheckbox.isSelected();
		
	}",1
ZrtpConfigure.java,/** * Check if ZrtpConfigure contains a cipher algorithm. * * @return True if ZrtpConfigure contains the algorithm. */,"@SuppressWarnings(""unused"")
    public boolean containsCipherAlgo(ZrtpConstants.SupportedSymCiphers cipher) {
            return symCiphers.containsAlgo(cipher);
    }",1
WookiModule.java,/** * Store the last view page in session. */,"public static void contributePageRenderRequestHandler(
            OrderedConfiguration<PageRenderRequestFilter> filters, WookiViewRefererFilter vrFilter)
    {
        filters.add(""ViewRefererFilter"", vrFilter);
        filters.addInstance(""IESupport"", BrowserSelection.class);
    }",1
XlsSerializer.java,"/** * @see Serializer#serialize(InputStream, DataSetMetadata, long) */","@Override
    public InputStream serialize(InputStream givenInputStream, DataSetMetadata metadata, long limit) {
        try {

            PipedInputStream pipe = new PipedInputStream();
            PipedOutputStream jsonOutput = new PipedOutputStream(pipe);

            // override the parameter in case it needs to be wrapped in a buffered inputstream
            InputStream inputStream = givenInputStream;
            if (!inputStream.markSupported()) {
                inputStream = new BufferedInputStream(inputStream);
            }

            inputStream.mark(Integer.MAX_VALUE);

            boolean newExcelFormat = XlsUtils.isNewExcelFormat(inputStream);

            inputStream.reset();

            Runnable runnable = newExcelFormat ? //
                    serializeNew(inputStream, metadata, limit, jsonOutput) : serializeOld(inputStream, metadata, limit, jsonOutput);

            // Serialize asynchronously for better performance (especially if caller doesn't consume all, see sampling).
            executor.execute(runnable);

            return pipe;
        } catch (IOException e) {
            throw new TDPException(CommonErrorCodes.UNABLE_TO_SERIALIZE_TO_JSON, e);
        }
    }",1
WaitForShell.java,/** * Condiion that waits for a shell with the specified text to appear. * * @see Conditions * @author Ketan Padegaonkar &lt;KetanPadegaonkar [at] gmail [dot] com&gt; * @version $Id$ * @since 2.0 */,"class WaitForShell extends WaitForObjectCondition<Shell> {

	WaitForShell(Matcher<Shell> matcher) {
		super(matcher);
	}

	public String getFailureMessage() {
		return ""Could not find shell matching: "" + matcher; //$NON-NLS-1$
	}

	protected List<Shell> findMatches() {
		Shell[] shells = findShells();
		ArrayList<Shell> matchingShells = new ArrayList<Shell>();
		for (Shell shell : shells) {
			if (matcher.matches(shell)) {
				matchingShells.add(shell);
			}
		}
		return matchingShells;
	}

	/**
	 * Subclasses may override to find other shells.
	 */
	Shell[] findShells() {
		return bot.getFinder().getShells();
	}

}",1
WrapperPlayClientPositionLook.java,/** * Set absolute rotation on the X Axis. * @param value - new value. */,"public void setYaw(float value) {
        handle.getFloat().write(0, value);
    }",1
WebsocketThread.java,/** * getInstrumentString - private method to create instrument string from instrument list * @param instrumentList * @return instrumentString */,"private String getInstrumentString(List<String> instrumentList){
		StringBuilder stringBuilder = new StringBuilder();
		for(int i = 0; i < instrumentList.size(); i++){
			stringBuilder.append(instrumentList.get(i));
			if(i < (instrumentList.size() - 1)){
				stringBuilder.append("","");
			}
		}
		
		String instrumentString = stringBuilder.toString();
		System.out.println(""WebsocketThread.getInstrumentString(): instrumentString: ["" + instrumentString + ""]"");
		return instrumentString;
	}",1
AbstractCalendarView.java,"/** * No matter how we transform the query, we still have to throw SUBQUERY_CARDINALITY_VIOLATION if the subquery returns more than one row. */","@Test
public void subqueryCardinalityViolation() throws Exception {
    // insert duplicate value in table B;
    methodWatcher.executeUpdate(""insert into B values(16,'xxx', 16, 'xxx')"");
    try {
        doUpdate(true, 0, ""update A set A.name = (select B.name from B where A.id = B.id) where A.name IS NULL"");
        fail();
    } catch (SQLException e) {
        Throwable cause = Throwables.getRootCause(e);
        String errMsg = cause.getMessage();
        assertTrue(errMsg.contains(""Scalar subquery is only allowed to return a single row""));
    }
}",0
WebDriverUtils.java,/** * Print internal Logger status */,"public static void returnLoggerState() {
		LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
		StatusPrinter.print(lc);
	}",1
WatchDataSourceImplTest.java,/* * Asserts that a given object is a actually a proxy to a given * implementation object. */,"private void assertValidProxy(WatchDataSource proxy,
                                  LoggingWatchDataSourceImpl impl)
            throws RemoteException {
        impl.log().delete(0, impl.log().length());
        proxy.clear();
        proxy.getCalculable();
        proxy.getCurrentSize();
        proxy.getID();
        proxy.getLastCalculable();
        proxy.getMaxSize();
        proxy.getThresholdValues();
        proxy.getView();
        //proxy.setMaxSize(1);
        proxy.setView(""aaa"");
        checkLog(impl.log, ""clear()""
                           + ""getCalculable()""
                           //+ ""getCalculable(0,1)""
                           //+ ""getCalculable(watch,0,1)""
                           + ""getCurrentSize()""
                           + ""getID()""
                           + ""getLastCalculable()""
                           + ""getMaxSize()""
                           + ""getThresholdValues()""
                           + ""getView()""
                           //+ ""setMaxSize(1)""
                           + ""setView(aaa)"");
    }",1
WrapperPlayServerMapChunk.java,/** * Retrieve chunk X Coordinate (multiply by 16 to get the true X). * @return The current X */,"public int getChunkX() {
        return handle.getIntegers().read(0);
    }",1
EntityTypesTest.java,"/** * TODO, the unmarshalling fails. */","public void _testJAXBListRepresentationFastInfoset() {
    initiateWebApplication(JAXBListResourceFastInfoset.class);
    WebResource r = resource(""/"");

    Collection<JAXBBean> a = r.get(
            new GenericType<Collection<JAXBBean>>(){});
    Collection<JAXBBean> b = r.post(new GenericType<Collection<JAXBBean>>(){}, 
            new GenericEntity<Collection<JAXBBean>>(a){});
    
    assertEquals(a, b);
    
    b = r.path(""type"").post(new GenericType<Collection<JAXBBean>>(){},
            new GenericEntity<Collection<JAXBBean>>(a){});
    assertEquals(a, b);
}",0
WriteHttpJsonMetricsEndpoint.java,"/** * Generates a metric name from json format: { ""values"": [197141504, 175136768], ""dstypes"": [""counter"", ""counter""], ""dsnames"": [""read"", ""write""], ""time"": 1251533299, ""interval"": 10, ""host"": ""leeloo.lan.home.verplant.org"", ""plugin"": ""disk"", ""plugin_instance"": ""sda"", ""type"": ""disk_octets"", ""type_instance"": """" }  host ""/"" plugin [""-"" plugin instance] ""/"" type [""-"" type instance] => {plugin}[.{plugin_instance}].{type}[.{type_instance}] */","private String getMetricName(final JsonNode metric, int index) {
    JsonNode plugin = metric.get(""plugin"");
    JsonNode plugin_instance = metric.get(""plugin_instance"");
    JsonNode type = metric.get(""type"");
    JsonNode type_instance = metric.get(""type_instance"");

    if (plugin == null || type == null) {
      throw new IllegalArgumentException(""plugin or type is missing"");
    }

    StringBuilder sb = new StringBuilder();
    sb.append(plugin.textValue());
    sb.append('.');
    if (plugin_instance != null) {
      String value = plugin_instance.textValue();
      if (value != null && !value.isEmpty()) {
        sb.append(value);
        sb.append('.');
      }
    }
    sb.append(type.textValue());
    sb.append('.');
    if (type_instance != null) {
      String value = type_instance.textValue();
      if (value != null && !value.isEmpty()) {
        sb.append(value);
        sb.append('.');
      }
    }

    JsonNode dsnames = metric.get(""dsnames"");
    if (dsnames == null || !dsnames.isArray() || dsnames.size() <= index) {
      throw new IllegalArgumentException(""dsnames is not set"");
    }
    sb.append(dsnames.get(index).textValue());
    return sb.toString();
  }",1
VpnStateService.java,/** * Unregister a listener from this Service. * * @param listener listener to unregister */,"public void unregisterListener(VpnStateListener listener)
	{
		mListeners.remove(listener);
	}",1
XliffReader.java,"/** * After parse file, this method read skeleton file from the parse info * @param sklOs *            The skeleton file out put stream * @param monitor *            the progress monitor * @throws IOException *             ; */","public void readSkeletonFile(BufferedWriter sklOs, IProgressMonitor monitor) throws IOException {
		if (monitor == null) {
			monitor = new NullProgressMonitor();
		}
		List<Object[]> cbfs = mrbf.getBuffer(new Comparator<Object[]>() {

			public int compare(Object[] o1, Object[] o2) {
				Integer v1 = (Integer) o1[1];
				int v2 = (Integer) o2[1];
				return v1.compareTo(v2);
			}
		});
		int off = 0;
		int len = doc.length;
		monitor.setTaskName(Messages.getString(""mif.Mif2Xliff.task4""));
		if (cbfs.size() == 0) {
			monitor.beginTask(Messages.getString(""mif.Mif2Xliff.task4""), 1);
			sklOs.write(doc, off, len);
		} else {
			monitor.beginTask(Messages.getString(""mif.Mif2Xliff.task4""), cbfs.size() + 1);
			for (Object[] obj : cbfs) {
				int index = (Integer) obj[0];
				int start = (Integer) obj[1];
				int end = (Integer) obj[2];
				int segNum = (Integer) obj[3];
				sklOs.write(doc, off, start - off);
				off = end;
				sklOs.write(""%%%"" + index + ""%%%"");
				while (segNum > 1) {
					sklOs.write(""\n%%%"" + ++index + ""%%%"");
					segNum--;
				}
				monitor.worked(1);
			}
			sklOs.write(new String(doc, off, len - off).trim());
			monitor.worked(1);
		}
		monitor.done();
	}",1
WorldChunkManagerCaves.java,"/** * Returns a list of temperatures to use for the specified blocks.  Args: listToReuse, x, y, width, length */","public float[] getTemperatures(float[] par1ArrayOfFloat, int par2, int par3, int par4, int par5)
    {
        if (par1ArrayOfFloat == null || par1ArrayOfFloat.length < par4 * par5)
        {
            par1ArrayOfFloat = new float[par4 * par5];
        }

        Arrays.fill(par1ArrayOfFloat, 0, par4 * par5, this.hellTemperature);
        return par1ArrayOfFloat;
    }",1
WrapperPlayServerMapChunk.java,/** * Retrieve chunk Z Coordinate (multiply by 16 to get the true Z). * @return The current Z */,"public int getChunkZ() {
        return handle.getIntegers().read(1);
    }",1
XfsInfoCommand.java,/** * @return the queryDetails */,"public Type getQueryDetails() {
		return queryDetails;
	}",1
WodenFormGenerator.java,/** * Returns a list of fields corresponding to the operation and the message direction * @param operation The operation for which to get the I/O fields * @param direction The message direction * @return A string list of fields */,"private List<WSField> getFields(BindingOperation operation, Direction direction){
		ArrayList<WSField> outputFields = new ArrayList<WSField>();
		InterfaceMessageReference[] messages = operation.getInterfaceOperation().getInterfaceMessageReferences();		
		logger.debug(""messages : "" + messages.length);
		for(int i = 0; i <messages.length; i++){
			if(direction.equals(messages[i].getDirection())){
				XmlSchemaElement schemaElement =  (XmlSchemaElement) (messages[i].getElementDeclaration().getContent());				
				XmlSchemaElement elem = (XmlSchemaElement) (wsdlDescription.getElementDeclaration(schemaElement.getSchemaType().getQName()).getContent());
				XmlSchemaComplexType elemComplexType = (XmlSchemaComplexType)elem.getSchemaType();
				XmlSchemaSequence sequence = (XmlSchemaSequence)(elemComplexType.getParticle());			 	
				Iterator<XmlSchemaSequenceMember> iter = sequence.getItems().iterator();
				// Only compatible with XML Schema version 2.x
				//Iterator<Object> iter = sequence.getItems().getIterator();
				while(iter.hasNext()){
					Object obj = iter.next();
					if(obj instanceof XmlSchemaElement){
						XmlSchemaElement field = (XmlSchemaElement) obj;
						logger.debug(""Field found = "" + field.getName());
						outputFields.add(new WSField(field.getName(), ""String""));
					}
				}
			}
		}
		return outputFields;		
	}",1
WintInnerHackBase64.java,"/** * Tests a given byte array to see if it contains * only valid characters within the WintInnerHackBase64 alphabet. * * @param arrayOctect byte array to test * @return true if all bytes are valid characters in the WintInnerHackBase64 *         alphabet or if the byte array is empty; false, otherwise */","public static boolean isArrayByteBase64(byte[] arrayOctect) {

        arrayOctect = discardWhitespace(arrayOctect);

        int length = arrayOctect.length;
        if (length == 0) {
            // shouldn't a 0 length array be valid base64 data?
            // return false;
            return true;
        }
        for (int i = 0; i < length; i++) {
            if (!isBase64(arrayOctect[i])) {
                return false;
            }
        }
        return true;
    }",1
WsimportTool.java,"/** * User-specified error listener. * This field can be null, in which case errors need to be discarded. */","private WsimportListener wsimportListener;

		@Override
		public void error(SAXParseException exception) {
			if (wsimportListener != null) {
				wsimportListener.error(exception);
			}
		}",1
WXFileUtils.java,/** * Load file in asset directory. * @param path FilePath * @param context Weex Context * @return the Content of the file */,"public static String loadAsset(String path, Context context) {
    if(path == null || context == null){
      return null;
    }
    StringBuilder builder ;
    try {
      InputStream in = context.getAssets().open(path);

      builder = new StringBuilder(in.available()+10);

      BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(in));
      char[] data = new char[2048];
      int len = -1;
      while ((len = localBufferedReader.read(data)) > 0) {
        builder.append(data, 0, len);
      }
      localBufferedReader.close();
      if (in != null) {
        try {
          in.close();
        } catch (IOException e) {
          WXLogUtils.e(""WXFileUtils loadAsset: "", e);
        }
      }
      return builder.toString();

    } catch (IOException e) {
      e.printStackTrace();
      WXLogUtils.e("""", e);
    }

    return """";
  }",1
AbstractCalendarView.java,/** * Defaults to LOGGED if not set. */,"public BatchExecutionBuilder withBatchType(BatchType batchType) {
        this.batchType = batchType;
        return this;
    }",0
ZMQ.java,"/** * Create a new Context. * * @param ioThreads *            Number of threads to use, usually 1 is sufficient for most use cases. * @return the Context */","public static Context context(int ioThreads)
    {
        return new Context(ioThreads);
    }",1
YangFormattingPreferences.java,/** * @param indentSize the indentSize to set */,"public void setIndentSize(int indentSize) {
        this.indentSize = indentSize;
    }",1
ZipDirectory.java,/** * Zip it */,"private static void zipDirectory(String zipFile){

    byte[] buffer = new byte[1024];

    try{

        FileOutputStream fos = new FileOutputStream(zipFile);
        ZipOutputStream zos = new ZipOutputStream(fos);

        System.out.println(""Output to Zip : "" + zipFile);

        for(String file : fileList){

            System.out.println(""File Added : "" + file);
            ZipEntry ze= new ZipEntry(file);
            zos.putNextEntry(ze);

            FileInputStream in = 
                    new FileInputStream(SOURCE_FOLDER + File.separator + file);

            int len;
            while ((len = in.read(buffer)) > 0) {
                zos.write(buffer, 0, len);
            }

            in.close();
        }

        zos.closeEntry();
        //remember close it
        zos.close();

        System.out.println(""Done"");
    }catch(IOException ex){
        ex.printStackTrace();   
    }
}",0
_MainActivity.java,/** * Inform the view about back events. */,"@Override
  public void onBackPressed() {
    // Give the view a chance to handle going back. If it declines the honor, let super do its thing.
    if (!mainFlow.goBack()) {
      super.onBackPressed();
    }
  }",1
WSManUtils.java,/** * Validates a UUID value and throws a specific exception if UUID is invalid. * * @param uuid        The UUID value to validate. * @param uuidValueOf The property associated to the given UUID value. * @throws RuntimeException */,"public static void validateUUID(String uuid, String uuidValueOf) throws RuntimeException {
        if (!WSManUtils.isUUID(uuid)) {
            throw new RuntimeException(""The returned "" + uuidValueOf + "" is not a valid UUID value! "" + uuidValueOf + "": "" + uuid);
        }
    }",1
WrappedFileReferenceProvider.java,"/** * @return Relative path to $file according to $relativeTo. ""/"" at the end is included if necessary */","private String relativePathTo(VirtualFile file, VirtualFile relativeTo) {
        final VirtualFile commonAncestor = VfsUtil.getCommonAncestor(file, relativeTo);

        if(commonAncestor == null) return null;

        int level = 0;
        for(VirtualFile parent=relativeTo; !parent.equals(commonAncestor); parent=parent.getParent()) {
            level++;
        }

        final String[] parts = new String[level];

        for(int i=0; i<level; i++) {
            parts[i] = "".."";
        }

        if (parts.length == 0) {
            final String path = StringUtil.trimStart(file.getPath().replace(commonAncestor.getPath(), """"), ""/"");

            return path.length() > 0 ? path + ""/"" : """";
        }

        return StringUtil.trimEnd(StringUtil.join(parts, ""/"") + ""/"" + StringUtil.trimStart(file.getPath().replace(commonAncestor.getPath(), """"), ""/""), '/')+""/"";
    }",1
WrappingUtils.java,"/** * Updates the overlay-color rounding of the parent's child drawable. * * <ul> * <li>If rounding mode is OVERLAY_COLOR and the child is not a RoundedCornersDrawable, * a new RoundedCornersDrawable is created and the child gets wrapped with it. * <li>If rounding mode is OVERLAY_COLOR and the child is already wrapped with a * RoundedCornersDrawable, its rounding parameters are updated. * <li>If rounding mode is not OVERLAY_COLOR and the child is wrapped with a * RoundedCornersDrawable, the rounded drawable gets removed and its child gets * attached directly to the parent. * </ul> */","static void updateOverlayColorRounding(
            DrawableParent parent,
            @Nullable RoundingParams roundingParams) {
        Drawable child = parent.getDrawable();
        if (roundingParams != null &&
                roundingParams.getRoundingMethod() == RoundingParams.RoundingMethod.OVERLAY_COLOR) {
            // Overlay rounding requested - either update the overlay params or add a new
            // drawable that will do the requested rounding.
            if (child instanceof RoundedCornersDrawable) {
                RoundedCornersDrawable roundedCornersDrawable = (RoundedCornersDrawable) child;
                applyRoundingParams(roundedCornersDrawable, roundingParams);
                roundedCornersDrawable.setOverlayColor(roundingParams.getOverlayColor());
            } else {
                // Important: remove the child before wrapping it with a new parent!
                child = parent.setDrawable(sEmptyDrawable);
                child = maybeWrapWithRoundedOverlayColor(child, roundingParams);
                parent.setDrawable(child);
            }
        } else if (child instanceof RoundedCornersDrawable) {
            // Overlay rounding no longer required so remove drawable that was doing the rounding.
            RoundedCornersDrawable roundedCornersDrawable = (RoundedCornersDrawable) child;
            // Important: remove the child before wrapping it with a new parent!
            child = roundedCornersDrawable.setCurrent(sEmptyDrawable);
            parent.setDrawable(child);
            // roundedCornersDrawable is removed and will get garbage collected, clear the child callback
            sEmptyDrawable.setCallback(null);
        }",1
WorkerMessages.java,/** * @return */,"public static String getDifferentConsumerChangeStatusToAllocatedForBroker() {
		return ""Allocation with a different consumer. The status change was ignored."";
	}",1
VMUpdateStateRequest.java,/** * Constructor * * @param provider *            The virtual machine environment * @param region *            The region for the virtual machine * @param size *            The size of the virtual machine */,"public VMUpdateStateRequest(VMProvider provider, String instanceId) {
        super(provider);
        String[] instances = new String[] { instanceId };
        this.setInstances(instances);
    }",1
WebScenarioObject.java,/** * Gets templateid. * * @return Value of templateid. */,"public Integer getTemplateid() {
        return templateid;
    }",1
WorkflowStateTagTest.java,/** * @param patientProgram * @param state * @param activeDate * @return */,"private PatientState getPatientState(PatientProgram patientProgram, ProgramWorkflowState state, Date activeDate) {
		for (PatientState patientState : patientProgram.getStates()) {
			if (patientState.getState().equals(state)) {
				if (activeDate != null) {
					if (patientState.getActive(activeDate)) {
						return patientState;
					}
				} else {
					return patientState;
				}
			}
		}
		return null;
	}",1
CDIExtension.java,"/* * Called after the WebApplication and ResourceConfig have been set,  */","void lateInitialize() {
    try {
        for (InitializedLater object : toBeInitializedLater) {
            object.later();
        }
    }
    finally {
        // clear the JNDI reference as soon as possible
        if (!lookupExtensionInBeanManager) {
            try {
                InitialContext ic = InitialContextHelper.getInitialContext();
                if (ic != null) {
                    lookupJerseyConfigJNDIContext(ic).unbind(JNDI_CDIEXTENSION_NAME);
                }
            } catch (NamingException ex) {
                throw new RuntimeException(ex);
            }
        }
    }
}",0
WrapperPlayServerEntityStatus.java,/** * Set the entity status. See {@link Status}. * @param value - new value. */,"public void setEntityStatus(int value) {
        handle.getBytes().write(0, (byte) value);
    }",1
ItemLinker.java,"/** If this function returns true (or the item is damageable), the * ItemStack's NBT tag will be sent to the client. */","public boolean getShareTag()
{
    return true;
}",0
WeaponTest.java,"/** * When taking the quotient of two stats that are zero we're faced with interpreting 0/0. Although not strictly * mathematically correct, we will interpret x/y as 'x' per 'y' and if 'x' is zero we will output zero if 'y' is * also finite.a */","@Test
    public void testGetStatZeroOverZero() {
        // AMS has no heat.
        assertEquals(0.0, ItemDB.AMS.getHeat(null), 0.0);
        assertEquals(0.0, ItemDB.AMS.getStat(""h/h"", null), 0.0);
    }",1
WindowInstances.java,/** * <p>haveSameSubject.</p> * * @param t1 a {@link lupos.datastructures.items.Triple} object. * @param t2 a {@link lupos.datastructures.items.Triple} object. * @return a boolean. */,"protected boolean haveSameSubject(Triple t1, Triple t2) {
		if(t1==null || t2==null){
			return false;
		}
		return 0==t1.getSubject().compareToNotNecessarilySPARQLSpecificationConform(t2.getSubject());
	}",1
VpnProfileDetailActivity.java,/** * Update the CA certificate selection UI depending on whether the * certificate should be automatically selected or not. */,"private void updateCertificateSelector()
	{
		if (!mCheckAuto.isChecked())
		{
			mSelectCert.setEnabled(true);
			mSelectCert.setVisibility(View.VISIBLE);

			if (mCertEntry != null)
			{
				((TextView)mSelectCert.findViewById(android.R.id.text1)).setText(mCertEntry.getSubjectPrimary());
				((TextView)mSelectCert.findViewById(android.R.id.text2)).setText(mCertEntry.getSubjectSecondary());
			}
			else
			{
				((TextView)mSelectCert.findViewById(android.R.id.text1)).setText(R.string.profile_ca_select_certificate_label);
				((TextView)mSelectCert.findViewById(android.R.id.text2)).setText(R.string.profile_ca_select_certificate);
			}
		}
		else
		{
			mSelectCert.setEnabled(false);
			mSelectCert.setVisibility(View.GONE);
		}
	}",1
VoldPeers.java,/** * Remove a peer from the {@link Vold}. * * @param peer * @throws JMException * @return The {@link UUID} of the task handling the operation as a String */,"final String removePeerNoWait(final String uuid, final DtxTaskApi dtxTaskApi) throws JMException {
        // 1) check parameters
        Objects.requireNonNull(uuid, ""Uuid parameter not provided !"");
        final UUID node = UUID.fromString(uuid);
        final VoldLocation localPeer = vold.getVoldLocation();
        if (UUID.fromString(uuid) == localPeer.getNode()) {
            LOGGER.debug(""Will remove local peer='"" + uuid + ""' !"");
        }

        // 2) Submit transaction
        if (dtxTaskApi == null) {
            throw new IllegalArgumentException(""Can't start transaction without DTX manager !"");
        }
        return submitRemovePeerTaskNoWait(node, dtxTaskApi).toString();
    }",1
Zerokit.java,/** * Report an error to the host application. These errors are unrecoverable * (i.e. the main resource is unavailable). The errorCode parameter * corresponds to one of the ERROR_* constants. * @param view The WebView that is initiating the callback. * @param errorCode The error code corresponding to an ERROR_* value. * @param description A String describing the error. * @param failingUrl The url that failed to load. */,"@Override
        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
            super.onReceivedError(view, errorCode, description, failingUrl);
            for (PageFinishListener pageFinishListener : new LinkedList<>(pageFinishListeners)) {
                pageFinishListener.onReceivedError(errorCode);
            }
        }",1
ZrtpCodes.java,/** * Sub-codes for Severe */,"enum SevereCodes {
        SevereHelloHMACFailed,          //!< Hash HMAC check of Hello failed!
        SevereCommitHMACFailed,         //!< Hash HMAC check of Commit failed!
        SevereDH1HMACFailed,            //!< Hash HMAC check of DHPart1 failed!
        SevereDH2HMACFailed,            //!< Hash HMAC check of DHPart2 failed!
        SevereCannotSend,               //!< Cannot send data - connection or peer down?
        SevereProtocolError,            //!< Internal protocol error occurred!
        SevereNoTimer,                  //!< Cannot start a timer - internal resources exhausted?
        SevereTooMuchRetries,           //!< Too much retries during ZRTP negotiation - connection or peer down?
        SevereSecurityException         //!< Java throwed a security exception
    }",1
WFSIDCCAPS.java,/** * @see #memoryChipProtocols */,"public Set<IDCMemoryChipProtocol> getMemoryChipProtocols() {
		// FIXME:
		return null;
	}",1
XintroFragmentBuilder.java,/** * Sets image elevation. * * @param imageElevation the image elevation * @return the xintro fragment builder */,"@TargetApi(android.os.Build.VERSION_CODES.LOLLIPOP)
    public XintroFragmentBuilder setImageElevation(int imageElevation) {
        this.imageElevation = imageElevation;
        return this;
    }",1
WrapperPlayClientBlockPlace.java,/** * Retrieve the x block position. * @return The current X */,"public int getX() {
        return handle.getIntegers().read(0);
    }",1
ZipArchiveEntry.java,/** * Get the hashCode of the entry. * This uses the name as the hashcode. * @return a hashcode. */,"public int hashCode() {
        // this method has severe consequences on performance. We cannot rely
        // on the super.hashCode() method since super.getName() always return
        // the empty string in the current implemention (there's no setter)
        // so it is basically draining the performance of a hashmap lookup
        return getName().hashCode();
    }",1
XmlUtilities.java,"/** * Filter some headers which constantly change, so can not be matched * * @param responseNode xml response node * @return only the significant header nodes */","public Node[] getSignificantResponseHeaders( Node responseNode ) {

        List<Node> significantHeaders = new ArrayList<Node>();

        Node[] allHeaders = getChildrenNodes( responseNode, TOKEN_HTTP_HEADER );
        for( Node header : allHeaders ) {
            String headerName = getNodeAttribute( header, TOKEN_HEADER_NAME_ATTRIBUTE );
            if( HttpClient.log.isTraceEnabled() ) {
                HttpClient.log.trace( ""header found: '"" + headerName + ""', value: '""
                                      + getNodeAttribute( header, TOKEN_HEADER_VALUE_ATTRIBUTE ) + ""'"" );
            }

            // Set-Cookie must always be a significant header
            if( headerName.equalsIgnoreCase( HeaderMatcher.SET_COOKIE_HEADER_NAME ) ) {
                significantHeaders.add( header );
                continue;
            }

            boolean isSignificantHeader = true;
            for( String nonSignificantHeader : TemplateActionsXmlDefinitions.NON_SIGNIFICANT_HEADERS ) {
                if( headerName.equalsIgnoreCase( nonSignificantHeader ) ) {
                    isSignificantHeader = false;
                    if( HttpClient.log.isTraceEnabled() ) {
                        HttpClient.log.trace( ""header '"" + headerName
                                              + ""' not loaded from XML file as it is a not important one"" );
                    }
                    break;
                }
            }
            if( isSignificantHeader ) {
                significantHeaders.add( header );
            }
        }
        return significantHeaders.toArray( new Node[significantHeaders.size()] );
    }",1
WrapperPlayServerSpawnEntityExperienceOrb.java,/** * Retrieve the y position of the object. * <p> * Note that the coordinate is rounded off to the nearest 1/32 of a meter. * @return The current y */,"public double getY() {
        return handle.getIntegers().read(2) / 32.0D;
    }",1
ZipExampleActivity.java,"/* * Here we are getting two user list * One, the list of cricket fans * Another one, the list of football fans * Then we are finding the list of users who loves both */","private void doSomeWork() {
        Observable.zip(getCricketFansObservable(), getFootballFansObservable(),
                new BiFunction<List<User>, List<User>, List<User>>() {
                    @Override
                    public List<User> apply(List<User> cricketFans, List<User> footballFans) throws Exception {
                        return Utils.filterUserWhoLovesBoth(cricketFans, footballFans);
                    }
                })
                // Run on a background thread
                .subscribeOn(Schedulers.io())
                // Be notified on the main thread
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(getObserver());
    }",1
WiffProperties.java,/** * Retrieves the value of the given key as an int * * @param key *          the property to retrieve * @return the key's value as an int */,"public int getInt(String key) {
    return getInt(key, 0);
  }",1
WiffReporter.java,"/** * Determines if this reporter is still active. * * @return true, if this reporter is still active. */","public boolean isRunning() {
    return running;
  }",1
YoutubeProvider.java,/** * YoutubeProvider constructor - uses supplied YoutubeConfiguration. * @param config YoutubeConfiguration */,"public YoutubeProvider(YoutubeConfiguration config) {
    this.config = config;

    Objects.requireNonNull(this.config.getApiKey());
  }",1
WebsocketThread.java,/** * startWS - public method to initiate the websocket * @return websocket creation status */,"public boolean startWS(){
		boolean status = false;
		
		//Establish the websocket
		try {
			System.out.println(""WebsocketThread.startWS(): creating WebsocketClientEndpoint with URI: <"" + 
																									URIstring + "">...."");
			//save the state of web socket before initiating
			//open is an async call, notification may come before setting state
			currWSstateLock.lock();
	        currWSstate = WSstate.WS_INITIATED;
	        currWSstateLock.unlock();
	        
	        //initiate WS
			clientEndPoint = new WebsocketClientEndpoint(new URI(URIstring), this);
			status = true;
			
			//set the running status
			runStatus = true;
		} catch (URISyntaxException e) {
			System.out.println(""WebsocketThread.startWS(): ERROR: URISyntaxException on WebsocketClientEndpoint"");
			e.printStackTrace();
		}
		return status;
	}",1
WrapperPlayServerMapChunkBulk.java,/** * Retrieve the chunk mask for each chunk segment. * @return Chunk x coordindates. */,"public int[] getChunksMask() {
        return handle.getIntegerArrays().read(2);
    }",1
XmlrDebug.java,/** * Compare two reftrees. * @param t1 *            tree 1 * @param t2 *            tree 2 * @return <code>false</code> if trees do not match */,"public static boolean treeComp(RefTree t1, RefTree t2) {
        return treeComp(t1, t2, CompareUtil.OBJECT_EQUALITY, true);
    }",1
WFSPINCAPS.java,/** * {@link #keyImportThroughParts} */,"public boolean isKeyImportThroughParts() {
		return keyImportThroughParts.booleanValue();
	}",1
WebModulesContainer.java,/** * Gets the modules count * @return The modules count */,"public int getModulesCount() {
        return modulesCount;
    }",1
VOMSMessages.java,/** * @return */,"public static String getNullVOMSUrlMessage() {
		return ""Property "" + PeerConfiguration.PROP_VOMS_URL + "" should not be null."";
	}",1
WorkspacesApi.java,/* * Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. */,"public void setDpi(String dpi) {
		this.dpi = dpi;
	}",1
ZMQ.java,/** * Set the poll timeout. * * @param timeout *            the desired poll timeout in milliseconds. * @deprecated Timeout handling has been moved to the poll() methods. */,"@Deprecated
        public void setTimeout(long timeout)
        {
            if (timeout >= -1L) {
                this.timeout = timeout;
            }
        }",1
XmlTreeParserException.java,/** * @param error *            the error to set * @param cause *            the cause of this exception */,"public XmlTreeParserException(final XmlError error, final Throwable cause) {
		super(cause);
		mError = error;
	}",1
WrapperPlayServerWorldParticles.java,/** * Set this the offset added to the X position after being multiplied by random.nextGaussian(). * @param value - new value. */,"public void setOffsetX(float value) {
        handle.getFloat().write(3, value);
    }",1
TestBSTMapExtra.java,"/* * Sanity test for keySet, only here because it's optional */","@Test
public void sanityKeySetTest() {
    BSTMap<String, Integer> b = new BSTMap<String, Integer>();
    HashSet<String> values = new HashSet<String>();
    for (int i = 0; i < 455; i++) {
        b.put(""hi"" + i, 1);   
        values.add(""hi"" + i);
    }
    assertEquals(455, b.size()); //keys are there
    Set<String> keySet = b.keySet();
    assertTrue(values.containsAll(keySet));
    assertTrue(keySet.containsAll(values));
}",0
VMInstanceRequest.java,/** * Get the image type * * @return The image type */,"public VMImageType getImage() {
        return (VMImageType) this.items.get(TankConstants.KEY_IMAGE);
    }",1
WrapperPlayServerOpenWindow.java,/** * Retrieve the entity horse's entity ID. * <p> * Only sent when window type is equal to 11 * @return The unknown field. */,"public int getEntityId() {
        return handle.getIntegers().read(3);
    }",1
ZWindow.java,/** * Tell the buffer that it got fetched and can be overwritten on the next * turn. */,"public void retrieved() {
		if (upper) {
			// NOTE: The lower window doesn't support formatted text. Some games
			// (e.g. curses and anchorhead) work around that limitation by
			// temporarily expanding the upperwindow, printing formatted text there,
			// then collapsing it again. Whatever is in the upperwindow is suppose
			// to stay, the ""overflow"" technically becomes part of the lower window
			// and hence needs to be cleared.
			if (maxCursor > endWindow) {
				Arrays.fill(frameBuffer, endWindow, maxCursor, ' ');
			}
			maxCursor = endWindow;
		}
		else {
			cursorx = 0;
			cursory = 0;
			cursor = 0;
		}
		regions=null;
	}",1
WatchDataSourceImplTest.java,"/* * Checks that a given string buffer (used as a log) holds a given * string, and clears the string buffer. */","private void checkLog(StringBuffer log, String s) {
        Assert.assertEquals(s, log.toString());
        log.delete(0, log.length());
    }",1
Zerokit.java,"/** * This method tries to log in the given user with the given password entered by the user * * @param userId     The userId of the user to log in. * @param password   The password of the user to log in. * @param rememberMe If true, than next time the login without password will be possible * @return Resolved userId of the logged in user. */","@SuppressWarnings(""WeakerAccess"")
    @NonNull
    public Call<ResponseZerokitLogin, ResponseZerokitError> login(@NonNull final String userId, @NonNull final byte[] password, final boolean rememberMe) {
        return new CallAction<>(new ActionCallback<ResponseZerokitLogin, ResponseZerokitError>() {
            @Override
            public void call(final Callback<? super ResponseZerokitLogin, ? super ResponseZerokitError> subscriber) {
                _login(userId, password).enqueue(new Action<ResponseZerokitLogin>() {
                    @Override
                    public void call(final ResponseZerokitLogin responseLogin) {
                        if (rememberMe)
                            _getRememberMeKey(userId, password).enqueue(new Action<String>() {
                                @Override
                                public void call(String rememberKey) {
                                    storeSecret(KEY_STORE_ALIAS, rememberKey);
                                    subscriber.onSuccess(responseLogin);
                                }
                            }, new Action<ResponseZerokitError>() {
                                @Override
                                public void call(ResponseZerokitError responseZerokitError) {
                                    subscriber.onSuccess(responseLogin);
                                }
                            });
                        else
                            subscriber.onSuccess(responseLogin);
                        Arrays.fill(password, (byte) 0);
                    }
                }, new Action<ResponseZerokitError>() {
                    @Override
                    public void call(ResponseZerokitError responseZerokitError) {
                        Arrays.fill(password, (byte) 0);
                        subscriber.onError(responseZerokitError);
                    }
                });
            }
        });",1
JATKInterpreter.java,/** * Entry point of the interpreter */,"public Object visit(ASTStart node, Object data) {
    // Start of interpreter
    Boolean res = (Boolean) node.childrenAccept(this, Boolean.TRUE);
    // End of interpreter
    // test if StopMainLog has been called
    /*if (getMainLogger().isAlive()) {
        getMainLogger()
                .addErrorToDocumentLogger(STOPMAIN_HAS_NOT_BEEN_CALLED, 0, null);
        getMainLogger().interrupt();
        return Boolean.FALSE;
    }*/
    if (res == null) {
        // Logger.getLogger(this.getClass() ).warn(""res == null"");
        return Boolean.FALSE;
    }
    return res;
}",0
WrapperPlayServerScoreboardObjective.java,/** * Retrieve the text to be displayed for the score. * @return The current Objective value */,"public String getObjectiveValue() {
        return handle.getStrings().read(1);
    }",1
WrapperLoginClientEncryptionBegin.java,/** * Set the shared secret data. * @param value - new value. */,"public void setSharedSecret(byte[] value) {
        handle.getByteArrays().write(0, value);
    }",1
WampConnection.java,/** * Create new random ID of default length. * * @return    New random ID of default length. */,"private String newId() {
      return newId(8);
   }",1
WrapperPlayClientTransaction.java,/** * Retrieve whether or not the action was accepted. * @return The current Accepted? */,"public boolean getAccepted() {
        return handle.getSpecificModifier(boolean.class).read(0);
    }",1
WindowManagerService.java,"/** * Returns the focused window in the following format: * windowHashCodeInHexadecimal windowName * * @param client The remote client to send the listing to. * @return False if an error occurred, true otherwise. */","boolean viewServerGetFocusedWindow(Socket client) {
        if (isSystemSecure()) {
            return false;
        }

        boolean result = true;

        WindowState focusedWindow = getFocusedWindow();

        BufferedWriter out = null;

        // Any uncaught exception will crash the system process
        try {
            OutputStream clientStream = client.getOutputStream();
            out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024);

            if(focusedWindow != null) {
                out.write(Integer.toHexString(System.identityHashCode(focusedWindow)));
                out.write(' ');
                out.append(focusedWindow.mAttrs.getTitle());
            }
            out.write('\n');
            out.flush();
        } catch (Exception e) {
            result = false;
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    result = false;
                }
            }
        }

        return result;
    }",1
VocabularyService.java,/** * @summary Lookup source codes in the specified vocabulary using the default source. * @param sourcecodes array of source codes * @return collection of concepts */,"@Path(""lookup/sourcecodes"")
  @POST
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  public Collection<Concept> executeSourcecodeLookup(String[] sourcecodes) {
    String defaultSourceKey = getDefaultVocabularySourceKey();
    
    if (defaultSourceKey == null)
      throw new WebApplicationException(new Exception(""No vocabulary or cdm daimon was found in configured sources.  Search failed.""), Response.Status.SERVICE_UNAVAILABLE); // http 503      

    return executeSourcecodeLookup(defaultSourceKey, sourcecodes);
  }",1
WalkFSABoolean.java,"/** * Collect annotations starting at this (or at any descendent) state * @param state start state * @param annots output list for annotations * @param addSep if true, add specified separator to the output list * @param sepValue separator value for output list * * @return annotation data */","public TIntArrayList collectAnnotations(int state, TIntArrayList annots, boolean addSep, int sepValue) {
        AnnotationCollector proc = new AnnotationCollector(annots, addSep, sepValue);

        collectAnnotations(state, new TIntArrayList(), false, proc);
        return annots;
    }",1
AbstractCalendarView.java,/** * fluent setter */,"public BasicLink withBasicLinkObjectExtension(final List<AbstractObject> basicLinkObjectExtension) {
    this.setBasicLinkObjectExtension(basicLinkObjectExtension);
    return this;
}",0
XmlCalendar2Date.java,/* * Converts XMLGregorianCalendar to java.util.Date in Java */,"public static Date toDate(XMLGregorianCalendar calendar) {
		if (calendar == null) {
			return null;
		}
		return calendar.toGregorianCalendar().getTime();
	}",1
WordCram.java,"/** * Use the given WordAngler to pick angles for each word. * You can make your own, or use a pre-fab one from {@link Anglers}. * * @see WordAngler * @see Anglers * @param angler the WordAngler to use. * @return The WordCram, for further setup or drawing. */","public WordCram withAngler(WordAngler angler) {
		this.angler = angler;
		return this;
	}",1
ZRTCPTransformer.java,/** * Encrypt a SRTCP packet * * Currently SRTCP packet encryption / decryption is not supported * So this method does not change the packet content * * @param pkt plain SRTCP packet to be encrypted * @return encrypted SRTCP packet */,"public RawPacket transform(RawPacket pkt) {
        if (srtcpOut == null) {
            return pkt;
        }
        return srtcpOut.transform(pkt);
    }",1
VMNodeBean.java,/** * @{inheritDoc */,"@Override
    public String getType() {
        return ""vm"";
    }",1
XintroFragmentBuilder.java,/** * Sets title text color. * * @param titleTextColor the title text color * @return the xintro fragment builder */,"public XintroFragmentBuilder setTitleTextColor(int titleTextColor) {
        this.titleTextColor = titleTextColor;
        return this;
    }",1
WFSPINCAPS.java,/** * {@link #pinFormats} */,"public Set<PINFormat> getPINFormats() {
		return XfsConstants.of(pinFormats, PINFormat.class);
	}",1
XsfActivityFragmentLayoutNameDetector.java,"/** * There are more than one methods overloading in the name of ""inflate()"" in android.view.LayoutInflater.<br> * We only care about those having an param with `@LayoutRes` annotation, * for example {public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot)}.<br> * This method will find out the resource param with an `@LayoutRes` annotation in String format, for example `R.layout.fragment_blank` .<br> * If no such param exists, <B>null</B> will be returned. */","private String getParamWithLayoutAnnotation_ForFragment(@NonNull JavaContext context, @NonNull MethodInvocation node) {
        Iterator<Expression> arguments = node.astArguments().iterator();
        Expression argument = arguments.next();

        JavaParser.ResolvedNode resolved = context.resolve(node);
        JavaParser.ResolvedMethod method = (JavaParser.ResolvedMethod) resolved;

        JavaParser.ResolvedAnnotation layoutParamAnnotation = method.getParameterAnnotation(""android.support.annotation.LayoutRes"", 0);
        if (layoutParamAnnotation != null) {
            return argument.toString();
        } else {
            return null;
        }",1
WBSType.java,/** * Gets the value of the summaryActualLaborUnits property. * * @return *     possible object is *     {@link Double } * */,"public Double getSummaryActualLaborUnits()
   {
      return summaryActualLaborUnits;
   }",1
WrapperPlayServerBlockAction.java,/** * Retrieve the block id this action is set for. * @return The current Block ID */,"@SuppressWarnings(""deprecation"")
	public short getBlockId() {
        return (short) getBlockType().getId();
    }",1
wifiHotSpots.java,/** * Check if The Device Is Connected to Hotspot using wifi * * @return true if device connect to Hotspot */,"public boolean  isConnectedToAP(){
		ConnectivityManager connectivity = (ConnectivityManager)mContext
		        .getSystemService(Context.CONNECTIVITY_SERVICE);
		if (connectivity != null) {
		    NetworkInfo info = connectivity.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
		    if (info != null) {
		        if (info.isConnected()) {
			            return true;
		        }
		    }
		}
		return false;
	}",1
WFSPTRCAPS.java,"/** * Specifies the back image color formats supported by this device, as a * combination of following flags (empty if not supported): * {@link PTRImageColor} * * @since 3.00 */","public Set<PTRImageColor> getBackImageColorFormat() {
		return XfsConstants.of(backImageColorFormat, PTRImageColor.class);
	}",1
OhmageJsonServer2ParameterTable.java,/** * Construct an empty entity. */,"private OhmageJsonServer2ParameterTable(OhmageJsonServer2ParameterTable ref, User user) {
super(ref, user);
}",0
WXCircleViewPager.java,/** * @return the circlePageAdapter */,"public WXCirclePageAdapter getCirclePageAdapter() {
    return (WXCirclePageAdapter) getAdapter();
  }",1
XmppBuddies.java,/** * sends an XMPP_PRESENCE_CHANGED intent for every known xmpp rooster item (friend) * with the actual status information * * @param list */,"public void sendFriendList(ArrayList<XmppFriend> list) {
        
        for (XmppFriend xmppFriend : list) {
            Intent intent = new Intent(MainService.ACTION_XMPP_PRESENCE_CHANGED);
            intent.putExtra(""userid"", xmppFriend.mId);
            intent.putExtra(""name"", xmppFriend.mName == null ? xmppFriend.mId : xmppFriend.mName);
            intent.putExtra(""status"", xmppFriend.mStatus);
            intent.putExtra(""state"", xmppFriend.mState);
            sContext.sendBroadcast(intent);
        }
    }",1
WrapperPlayServerWorldEvent.java,/** * Retrieve the Y location of the effect.. * @return The current Y */,"public int getY() {
        return handle.getIntegers().read(3);
    }",1
WrapperPlayServerBlockBreakAnimation.java,/** * Retrieve the y axis of the block coordinate. * @return The current Y */,"public int getY() {
        return handle.getIntegers().read(2);
    }",1
WalkingMonster.java,/** * @param damage */,"@Override
    public void setDamage(int damage) {
        this.setDamage(damage, Server.getInstance().getDifficulty());
    }",1
WordListApiTest.java,"/** * Test of createList method, of class WordListApi. */","@Test
    public void testCreateList() throws Exception {
        System.out.println(""createList"");
        ListType type = ListType.PUBLIC;
        WordList result = WordListApi.createList(token, testListName, testListDescription, type);

        assertNotNull(result);
        assertNotNull(result.getId());
        assertEquals(username, result.getUsername());
        assertEquals(token.getUserId(), result.getUserId());
        assertEquals(testListName, result.getName());
        assertEquals(testListDescription, result.getDescription());

        testList = result;
    }",1
WXCircleViewPager.java,/** * Get auto scroll interval. The time unit is micro second. * The default time interval is 3000 micro second * @return the intervalTime */,"public long getIntervalTime() {
    return intervalTime;
  }",1
VMJobRequest.java,/** * Get the number of instances requested * * @return The number of instances requested */,"public int getNumberOfUsers() {
        if (!this.items.containsKey(TankConstants.KEY_NUMBER_OF_USERS)) {
            return -1;
        }
        return Integer.valueOf((String) this.items.get(TankConstants.KEY_NUMBER_OF_USERS));
    }",1
XMLNoteTransferHandler.java,"/** * Imports the data for XMLNote documents (application/xmlnote+xml, text/html, or text/plain) are * supported. */","public boolean importData(JComponent comp,Transferable t) {
		return importData(comp,t,null);
	}",1
WrapperPlayClientBlockPlace.java,/** * Retrieve the z position of the cursor. * @return The current Cursor position Z */,"public byte getCursorPositionZ() {
        return handle.getFloat().read(2).byteValue();
    }",1
XMLStringWriter.java,/** * Flushes the <code>StringWriter</code> in the field @see #writer. */,"public void flush () {
        writer.flush();
    }",1
WFSPINCAPS.java,/** * {@link #keyBlockImportFormats} */,"public Set<PINKeyBlockImportFormat> getKeyBlockImportFormats() {
		return XfsConstants.of(keyBlockImportFormats, PINKeyBlockImportFormat.class);
	}",1
AccelerationFeatures.java,/* * Haar-like filter for acceleration */,"private float getHaarFilter(float[] values)
{
    float haar = 0;

    // Sizes in number of samples
    int wFrame = values.length;
    int wFilter = (int) (0.2 * wFrame);
    int wShift = (int) (0.5 * wFilter);
    int N = (wFrame - wFilter) / wShift + 1;

    float filterValue;

    for (int n = 0; n < N; n++)
    {
        filterValue = 0;

        for (int k = 0; k < wFilter; k++)
        {
            if (n * wShift + k < wFrame)
            {
                if (k < wFilter / 2)
                {
                    // Left side of haar filter
                    filterValue -= values[n * wShift + k];
                }
                else
                {
                    // Right side of haar filter
                    filterValue += values[n * wShift + k];
                }
            }
        }

        haar += Math.abs(filterValue);
    }",0
XmlTreePullParser.java,/** * @param xpp *            the parser * @throws XmlPullParserException */,"protected void pullProcessingInstructionNode(final XmlPullParser xpp)
			throws XmlPullParserException {

		String text = xpp.getText().trim();

		XmlNode pi = XmlNode.createProcessingInstruction(text);

		onCreateNode(pi);
	}",1
DonovanDriveTrain.java,/* * A FAILED attempt at driving straight. */,"public void forwardInchesCharlie(int inches) {
encoderRight.reset();
encoderLeft.reset();
double lm;
double rm;
int i = 0;
while ((getAvgDistance() < inches) && donnie.isAutonomous() && donnie.isEnabled()) {
/*if(i%10 == 0)
System.out.println(""diff: "" + (encoderLeft.get()-encoderRight.get()));
else if(i%50 == 0)
System.out.println(""left: "" + encoderLeft.get() + ""  right: "" + encoderRight.get());
 * */

lm = .5 + ((encoderRight.get() - encoderLeft.get()) / (SCALE));
rm = .5 + ((encoderLeft.get() - encoderRight.get()) / SCALE);
tankDrive((-1*lm), (-1*rm));
i++;
}
tankDrive(0, 0);
}",0
WrapperPlayServerSpawnPosition.java,/** * Retrieve the Y coordinate of the spawn point. * @return The current Y */,"public int getY() {
        return handle.getIntegers().read(1);
    }",1
YangIndenter.java,"/** * Reads the next token in backward direction from the heuristic scanner and sets the fields * <code>fToken, fPreviousPosition</code> and <code>fPosition</code> accordingly. */","private void nextToken() {
        nextToken(fPosition);
    }",1
VpnService.java,/** * Returns the VPN profile associated with the connection. */,"protected E getProfile() {
        return mProfile;
    }",1
AbstractCalendarView.java,/** * Method replicates the simple logic from JmsTemplate#getRequiredDefaultDestinationName. */,"private String getRequiredDefaultDestinationName() throws IllegalStateException {
    String name = getDefaultDestinationName();
    if (name == null) {
        throw new IllegalStateException(
                ""No 'defaultDestination' or 'defaultDestinationName' specified. Check configuration of JmsTemplate."");
    }
    return name;
}",0
WBSType.java,/** * Sets the value of the summaryCostVarianceByCost property. * * @param value *     allowed object is *     {@link Double } * */,"public void setSummaryCostVarianceByCost(Double value)
   {
      this.summaryCostVarianceByCost = value;
   }",1
WBSType.java,/** * Gets the value of the summaryNonLaborUnitsVariance property. * * @return *     possible object is *     {@link Double } * */,"public Double getSummaryNonLaborUnitsVariance()
   {
      return summaryNonLaborUnitsVariance;
   }",1
WaveformAnalysis.java,/** * This function returns the maximum noise among a map of ion to list of spectra * @param spectra A map of ion to spectrum * @return The maximum noise of the map */,"public static Double maxNoiseOfSpectra(Map<String, List<XZ>> spectra) {
    Double maxNoise = Double.MIN_VALUE;
    for (Map.Entry<String, List<XZ>> ionToSpectrum : spectra.entrySet()) {
      maxNoise = Math.max(maxNoise, noiseOfSpectrum(ionToSpectrum.getValue()));
    }
    return maxNoise;
  }",1
_AuditEventConverter.java,/** * Convert a list of PersistentAuditEvent to a list of AuditEvent * @param persistentAuditEvents the list to convert * @return the converted list. */,"public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents) {
        if (persistentAuditEvents == null) {
            return Collections.emptyList();
        }

        List<AuditEvent> auditEvents = new ArrayList<>();

        for (PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {
            AuditEvent auditEvent = new AuditEvent(persistentAuditEvent.getAuditEventDate().toDate(), persistentAuditEvent.getPrincipal(),
                    persistentAuditEvent.getAuditEventType(), convertDataToObjects(persistentAuditEvent.getData()));
            auditEvents.add(auditEvent);
        }

        return auditEvents;
    }",1
AbstractAccess.java,/** * Constructors */,"@Override
public List<Constructor> getConstructors() {
    List<Constructor> constructors = new ArrayList<>();

    if (forceAccess) {
        constructors.addAll(getAllConstructors(this.clazz));
    } else {
        constructors.addAll(getConstructors(this.clazz));
    }

    return constructors;
}",0
ZkUtils.java,"/** * Conditional update the persistent path data, return (true, newVersion) if it succeeds, * otherwise (the path doesn't exist, the current version is not the expected version, etc.) * return (false, -1) * * When there is a ConnectionLossException during the conditional update, zkClient will retry the * update and may fail since the previous update may have succeeded (but the stored zkVersion no * longer matches the expected one). In this case, we will run the optionalChecker to further * check if the previous write did indeed succeeded. */","public static int conditionalUpdatePersistentPath(ZkClient client,
                                                    String path,
                                                    String data,
                                                    int expectedVersion,
                                                    ConditionalUpdateCallback customConditionCallback) {
    try {
      Stat stat = client.writeDataReturnStat(path, data, expectedVersion);
      log.debug(
          ""Conditional update of path %s with value %s and expected version %d succeeded, returning the new version: %d""
              .format(path, data, expectedVersion, stat.getVersion()));
      return stat.getVersion();
    } catch (ZkBadVersionException bve) {
      if (customConditionCallback != null) {
        return customConditionCallback.checker(client, path, data);
      } else {
        log.warn((""Conditional update of path %s with data %s and expected version %d failed due to "" 
                  + ""%s. When there is a ConnectionLossException during the conditional update, "" 
                  + ""ZkClient will retry the update and may fail since the previous update may have "" 
                  + ""succeeded (but the stored zkVersion no longer matches the expected one). "" 
                  + ""In this case, the customConditionCallback is required to further check if the "" 
                  + ""previous write did indeed succeed, but was not passed in here."")
                     .format(path, data,
                             expectedVersion, bve.getMessage()));
        return -1;
      }
    } catch (Exception e) {
      log.warn(""Conditional update of path %s with data %s and expected version %d failed due to %s""
                   .format(path, data,
                           expectedVersion, e.getMessage()));
      return -1;
    }
  }",1
WBSType.java,/** * Sets the value of the summaryBaselineExpenseCost property. * * @param value *     allowed object is *     {@link Double } * */,"public void setSummaryBaselineExpenseCost(Double value)
   {
      this.summaryBaselineExpenseCost = value;
   }",1
WrapperPlayServerLogin.java,/** * Set the difficulty of the initial world. * @param value - new difficulty. */,"public void setDifficulty(Difficulty difficulty) {
        handle.getDifficulties().write(0, difficulty);
    }",1
WeekView.java,/** * Returns the last visible day in the week view. * @return The last visible day in the week view. */,"public Calendar getLastVisibleDay() {
        return mLastVisibleDay;
    }",1
ZrtpConfigure.java,"/** * Enables or disables trusted MitM processing. * * For further details of trusted MitM processing refer to ZRTP * specification, chapter 7.3 * * @param yesNo *    If set to true then trusted MitM processing is enabled. */","@SuppressWarnings(""unused"")
    public void setTrustedMitM(boolean yesNo) {
        enableTrustedMitM = yesNo;
    }",1
WellKnownTypeUtils.java,"/** * @return a Kind corresponding to the JSON number type and the given format. TODO (guptasu): For *     all below types, ensure defaults are right. TODO (guptasu): For all below types, add errors *     for unknown types. */","private static Kind getNumberKind(String format) {
    if (Strings.isNullOrEmpty(format)) {
      return Kind.TYPE_DOUBLE;
    }
    switch (format) {
      case ""float"":
        return Kind.TYPE_FLOAT;
      case ""double"":
        return Kind.TYPE_DOUBLE;
      default:
        return Kind.TYPE_DOUBLE;
    }
  }",1
ZMQ.java,"/** * If set, a socket shall keep only one message in its inbound/outbound queue, * this message being the last message received/the last message to be sent. * Ignores ZMQ_RCVHWM and ZMQ_SNDHWM options. * Does not support multi-part messages, in particular, * only one part of it is kept in the socket internal queue. * * @param conflate true to keep only one message, false for standard behaviour. * @return true if the option was set, otherwise false. * @see #isConflate() */","public boolean setConflate(boolean conflate)
        {
            return setSocketOpt(zmq.ZMQ.ZMQ_CONFLATE, conflate);
        }",1
AbstractArrayState.java,/* * A version to use in caches where getting null can be expected. */,"final Object getArrayNoCheck() {
    return array.get();
}",0
WeatherBuilder.java,/** * Sets the {@link Action} of the {@link LanternWeather}. * * @param action The action * @return This weather builder */,"public WeatherBuilder action(Action action) {
        this.action = checkNotNull(action, ""action"");
        return this;
    }",1
WrapperPlayServerUpdateAttributes.java,/** * Retrieve the entity. * @param world - the current world of the entity. * @return The entity. */,"public Entity getEntity(World world) {
    	return handle.getEntityModifier(world).read(0);
    }",1
VpnStateService.java,"/** * Get the remediation instructions, if any. * * @return read-only list of instructions */","public List<RemediationInstruction> getRemediationInstructions()
	{	/* only updated from the main thread so no synchronization needed */
		return Collections.unmodifiableList(mRemediationInstructions);
	}",1
AbstractCalendarView.java,/** * Default implementation that simply executes all events. */,"public class BatchExecutorImpl implements BatchExecutor {
public void execute(EventReader toExecute) {
    for (int i = 0; i < toExecute.size(); i++) {
        toExecute.get(i).run();
    }
}
}",0
WrapperPlayServerExplosion.java,/** * Set the y coordinate of the center of the explosion. * @param value - new value. */,"public void setY(double value) {
        handle.getDoubles().write(1, value);
    }",1
VvrTaskOperation.java,/** * Operation of a VVR task. * * @author oodrive * @author ebredzinski * */,"public enum VvrTaskOperation {
    CREATE, DELETE, SET, CLONE;
}",1
WebDriverElement.java,"/** * Expected way for sub element types to interact with their corresponding WebElement. This * attempts the desired action, and will throw appropriate exceptions should the element not be * able to be interacted with, for whatever reason. If the WebElement is stale when the action * is attempted, the cached WebElement will be cleared and looked up again, which may lookup a * fresh reference to the equivalent element. * * @param action A function that wraps the action to be performed. Accepts the source WebElement * as its only parameter and returns the result of this action. * @param <T> Return type of the action. * @return Whatever the action returns. */","protected <T> T attemptAndGet(Function<WebElement, T> action) {
        try {
            return action.apply(webElement());
        } catch (StaleElementReferenceException e) {
            invalidateCache();

            try {
                return action.apply(webElement());
            } catch (ElementNotVisibleException e1) {
                throw new ElementNotDisplayedException(this, e1);
            }
        } catch (ElementNotVisibleException e) {
            throw new ElementNotDisplayedException(this, e);
        }
    }",1
AbstractAccess.java,/** * Fields */,"@Override
public List<Field> getFields() {
    List<Field> fields = new ArrayList<>();

    if (forceAccess) {
        fields.addAll(getAllFields(this.clazz));
    } else {
        fields.addAll(getFields(this.clazz));
    }

    return fields;
}",0
XlsxUtil.java,/** * Copy a cell to another cell * * @param oldCell cell to be copied * @param newCell cell to be created * @param styleMap style map */,"public static void copyCell(XSSFCell oldCell, XSSFCell newCell, Map<Integer, CellStyle> styleMap) {
		if (styleMap != null) {			
			if (oldCell.getSheet().getWorkbook() == newCell.getSheet().getWorkbook()) {
				newCell.setCellStyle(oldCell.getCellStyle());
			} else {				
				int stHashCode = oldCell.getCellStyle().hashCode();
				CellStyle newCellStyle = styleMap.get(stHashCode);				
				if (newCellStyle == null) {					
					newCellStyle = newCell.getSheet().getWorkbook().createCellStyle();
					newCellStyle.cloneStyleFrom(oldCell.getCellStyle());					
					styleMap.put(stHashCode, newCellStyle);
				}
				newCell.setCellStyle(newCellStyle);
			}			
		}
		switch (oldCell.getCellType()) {
		case XSSFCell.CELL_TYPE_STRING:
			newCell.setCellValue(oldCell.getStringCellValue());
			break;
		case XSSFCell.CELL_TYPE_NUMERIC:
			newCell.setCellValue(oldCell.getNumericCellValue());
			break;
		case XSSFCell.CELL_TYPE_BLANK:
			newCell.setCellType(XSSFCell.CELL_TYPE_BLANK);
			break;
		case XSSFCell.CELL_TYPE_BOOLEAN:
			newCell.setCellValue(oldCell.getBooleanCellValue());
			break;
		case XSSFCell.CELL_TYPE_ERROR:
			newCell.setCellErrorValue(oldCell.getErrorCellValue());
			break;
		case XSSFCell.CELL_TYPE_FORMULA:
			newCell.setCellFormula(oldCell.getCellFormula());
			break;
		default:
			break;
		}

	}",1
WorkQueueFrontier.java,"/** * Enqueue the given queue to either readyClassQueues or inactiveQueues, * as appropriate. * * @param wq */","protected void reenqueueQueue(WorkQueue wq) { 
        if (logger.isLoggable(Level.FINE)) {
            logger.fine(""queue reenqueued: "" +
                wq.getClassKey());
        }
        if(highestPrecedenceWaiting < wq.getPrecedence() 
            || wq.getPrecedence() >= getPrecedenceFloor()) {
            // if still over budget, deactivate
            deactivateQueue(wq);
        } else {
            readyQueue(wq);
        }
    }",1
XScrollView.java,/** * Set the content ViewGroup for XScrollView. * * @param content */,"public void setContentView(ViewGroup content) {
        if (mLayout == null) {
            return;
        }

        if (mContentLayout == null) {
            mContentLayout = (LinearLayout) mLayout.findViewById(R.id.content_layout);
        }

        if (mContentLayout.getChildCount() > 0) {
            mContentLayout.removeAllViews();
        }
        mContentLayout.addView(content);
    }",1
XmppMuc.java,"/** * Returns the MultiUserChat given in roomname, * which is a full JID (e.g. room@conference.jabber.com), * if the room is in your internal data structure. * Otherwise null will be returned * * * @param roomname - the full roomname as JID * @return the room or null */","public MultiUserChat getRoomViaRoomName(String roomname) {
        Collection<MultiUserChat> mucSet = mRooms.values();
        for(MultiUserChat muc : mucSet) {
            if(muc.getRoom().equals(roomname)) {
                return muc;
            }
        }
        return null;
    }",1
Workdiary.java,"/** * Get Workdiary * * @param   company Company ID * @param   username User ID * @param   date Date * @param   params (Optional) Parameters * @throws	JSONException If error occurred * @return	{@link JSONObject} */","public JSONObject get(String company, String username, String date, HashMap<String, String> params) throws JSONException {
        return oClient.get(""/team/v1/workdiaries/"" + company + ""/"" + username + ""/"" + date, params);
    }",1
WFSIDCCAPS.java,/** * @see #chipProtocols */,"public Set<IDCChipProtocol> getChipProtocols() {
		return XfsConstants.of(chipProtocols, IDCChipProtocol.class);
	}",1
XmlTreeSaxParser.java,"/** *      java.lang.String, java.lang.String) */","public void endElement(String uri, String localName, String qName)
			throws SAXException {
		onCloseElement();
	}",1
XSLFComments.java,"/** * Construct a SpreadsheetML slide comments from a package part * * @param part the package part holding the comments data, * the content type must be <code>application/vnd.openxmlformats-officedocument.comments+xml</code> * @param rel  the package relationship holding this comments, * the relationship type must be http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments */","XSLFComments(PackagePart part, PackageRelationship rel) throws IOException, XmlException {
        super(part, rel);

//        CmLstDocument doc =
//           CmLstDocument.Factory.parse(getPackagePart().getInputStream());
//        _comments = doc.getCmLst();
    }",1
WrapperPlayServerWorldParticles.java,/** * Set the name of the particle to create. A list can be found here. * @param value - new value. */,"public void setParticleName(String value) {
        handle.getStrings().write(0, value);
    }",1
YardCalculator.java,/** * Gets the perimeter of the yard * @return the perimeter */,"public double perimeter()
   {
	   return (2 * l + 2 * w) * METERS_PER_FOOT;
   }",1
WrapperPlayServerSpawnEntity.java,/** * Retrieve the entity that will be spawned. * @param event - the packet event. * @return The spawned entity. */,"public Entity getEntity(PacketEvent event) {
    	return getEntity(event.getPlayer().getWorld());
    }",1
WiffReporter.java,/** * Stops the execution of the run method and releases resources. */,"public void stop() {
    running = false;
  }",1
XSLFSheet.java,"/** * Removes the specified shape from this sheet, if it is present * (optional operation).  If this sheet does not contain the element, * it is unchanged. * * @param xShape shape to be removed from this sheet, if present * @return <tt>true</tt> if this sheet contained the specified element * @throws IllegalArgumentException if the type of the specified shape *         is incompatible with this sheet (optional) */","public boolean removeShape(XSLFShape xShape) {
        XmlObject obj = xShape.getXmlObject();
        CTGroupShape spTree = getSpTree();
        if(obj instanceof CTShape){
            spTree.getSpList().remove(obj);
        } else if (obj instanceof CTGroupShape){
            spTree.getGrpSpList().remove(obj);
        } else if (obj instanceof CTConnector){
            spTree.getCxnSpList().remove(obj);
        } else {
            throw new IllegalArgumentException(""Unsupported shape: "" + xShape);
        }
        return getShapeList().remove(xShape);
    }",1
WBSType.java,/** * Sets the value of the summaryActualValueByCost property. * * @param value *     allowed object is *     {@link Double } * */,"public void setSummaryActualValueByCost(Double value)
   {
      this.summaryActualValueByCost = value;
   }",1
WrapperPlayServerMapChunk.java,"/** * Retrieve a bitmask similar to {@link #getPrimaryBitMap()}, but this is used exclusively for the 'add' portion of the payload. * @return The current add bit map */","public short getAddBitMap() {
        return handle.getIntegers().read(3).shortValue();
    }",1
WordNetAPI.java,/** * Gets the lemma of a word. * * @param word a word * @param pos part of speech * @return lemma or the input if it could not be lemmatized */,"public static String getLemma(String word, POS pos) {
		if (wDict == null) return word;
		IndexWord indexWord = null;

		try {
			indexWord = wDict.lookupIndexWord(pos, word);
		} catch (JWNLException e) {}

		return (indexWord != null) ? indexWord.getLemma() : word;
	}",1
WorldConfiguration.java,"/** * Get whether PVP is enabled * * @return true when enabled, false otherwise. Default is true. */","public boolean isPvpEnabled() {
        return getBoolean(""pvp"", true);
    }",1
WrapperReturnValueFromResultSet.java,/** * Executes and Returns the Value. This method has to be used instaed of execute (it internally exceutes execute). */,"public final synchronized Object executeForValue()
  {
    execute();

    return _tempReturnValue;
  }",1
YangFormattingPreferences.java,/** * @param formatStrings the formatStrings to set */,"public void setFormatStrings(boolean formatStrings) {
        this.formatStrings = formatStrings;
    }",1
WebSessionTrackingTelemetryModule.java,/** * Initializes the telemetry module. * * @param configuration The configuration to used to initialize the module. */,"@Override
    public void initialize(TelemetryConfiguration configuration) {
    }",1
Xml2JsonUtils.java,/** * Transform XML to JSON * * @param xml * @return * @throws ParserConfigurationException * @throws SAXException * @throws IOException */,"public static String toJson(String xml) throws ParserConfigurationException, SAXException, IOException {
		JsonObject rootJson = new JsonObject();
		DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		Document doc = dBuilder.parse(new InputSource(new StringReader(xml)));
		if (doc.hasChildNodes()) {
			traverseNode(doc, rootJson, null);
		}
		Gson gson = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
		String json = gson.toJson(rootJson);

		return json;
	}",1
ZeroConfClient.java,/** * Register a client-level listener * * @param listener */,"public void registerListener(Listener listener) {
		listeners.add(listener);
	}",1
WarriorRepository.java,/** * Reads all warrior data files from the warriors' directory. * * @throws IOException */,"private void readWarriorFiles() throws IOException {
        readWarriorsFileFromPath(WARRIOR_DIRECTORY);
        readZombiesFiles();
    }",1
WrapperPlayServerOpenWindow.java,"/** * Retrieve a unique id number for the window to be displayed. * <p> * Notchian server implementation is a counter, starting at 1. * @return The current Window id */","public byte getWindowId() {
        return (byte) handle.getIntegers().read(0).byteValue();
    }",1
WindowHoverMenu.java,"/** * Expands the Hover menu to show all of its tabs and a content area for the selected tab. To * collapse the menu down a single active tab, use {@link #collapseMenu()}. */","@Override
    public void expandMenu() {
        if (mIsInDragMode) {
            mHoverMenuView.expand();
        }
    }",1
WrapperPlayServerSpawnEntityExperienceOrb.java,/** * Retrieve the experience orb entity. * @param world - the current world of the entity. * @return The spawned entity. */,"public Entity getEntity(World world) {
    	return handle.getEntityModifier(world).read(0);
    }",1
XmlEscapeUtil.java,"/** * Escapes the characters in a String using XML entities. * For example: a&b < c > d => a&amp;b &lt; c &gt; d * * Supports only XML entities which must be escaped in non-attribute * text (gt, lt, amp) * * @param value The string to escape * @return The escaped String that can be used in an XML document. */","public static String escapeTextXml(String value) {
        return escapeXml(value, XML_TEXT_CHARS);
    }",1
WifiDirectHandler.java,/** * Translates a device status code to a readable String status * @param status * @return A readable String device status */,"public String deviceStatusToString(int status) {
        if (status == WifiP2pDevice.AVAILABLE) {
            return ""Available"";
        } else if (status == WifiP2pDevice.INVITED) {
            return ""Invited"";
        } else if (status == WifiP2pDevice.CONNECTED) {
            return ""Connected"";
        } else if (status == WifiP2pDevice.FAILED) {
            return ""Failed"";
        } else if (status == WifiP2pDevice.UNAVAILABLE) {
            return ""Unavailable"";
        } else {
            return ""Unknown"";
        }
    }",1
_AuditEventConverter.java,"/** * Internal conversion. This method will allow to save additionnals data. * By default, it will save the object as string * * @param data the data to convert * @return a map of String, String */","public Map<String, String> convertDataToStrings(Map<String, Object> data) {
        Map<String, String> results = new HashMap<>();

        if (data != null) {
            for (String key : data.keySet()) {
                Object object = data.get(key);

                // Extract the data that will be saved.
                if (object instanceof WebAuthenticationDetails) {
                    WebAuthenticationDetails authenticationDetails = (WebAuthenticationDetails) object;
                    results.put(""remoteAddress"", authenticationDetails.getRemoteAddress());
                    results.put(""sessionId"", authenticationDetails.getSessionId());
                } else {
                    results.put(key, object.toString());
                }
            }
        }

        return results;
    }",1
WidgetTextfieldsOptionalMinMax.java,/** * @return    True if the maximum should be automatic. */,"public boolean isMaximumAutomatic() {
		
		return maxCheckbox.isSelected();
		
	}",1
wifiHotSpots.java,/** * get Connection Info * @return WifiInfo */,"public WifiInfo getConnectionInfo() {
        return mWifiManager.getConnectionInfo();
    }",1
AbstractCalendarView.java,/****************** * String Binder  * ******************/,"public <T> T convertFromString(Class<T> output, String object) {
    return convertTo(String.class, output, object);
}",0
_GZipResponseUtil.java,"/** * Checks whether a gzipped body is actually empty and should just be zero. * When the compressedBytes is {@link #EMPTY_GZIPPED_CONTENT_SIZE} it should be zero. * * @param compressedBytes the gzipped response body * @param request         the client HTTP request * @return true if the response should be 0, even if it is isn't. */","public static boolean shouldGzippedBodyBeZero(byte[] compressedBytes, HttpServletRequest request) {

        //Check for 0 length body
        if (compressedBytes.length == EMPTY_GZIPPED_CONTENT_SIZE) {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""{} resulted in an empty response."", request.getRequestURL());
            }
            return true;
        } else {
            return false;
        }
    }",1
WorkQueueFrontier.java,/** Compact report of all nonempty queues (one queue per line) * * @param writer */,"public void allQueuesReportTo(PrintWriter writer) {
        queueSingleLinesTo(writer, allQueues.keySet().iterator());
    }",1
WorkflowTools.java,"/** * Stop the DSpace workflow, and return the item to the user workspace * * @param item * @throws DSpaceSwordException */","public void stopWorkflow(Context context, Item item)
            throws DSpaceSwordException
    {
        try
        {
            // find the item in the workflow if it exists
            InProgressSubmission wfi = this.getWorkflowItem(context, item);

            // abort the workflow
            if (wfi != null)
            {
                if(wfi instanceof WorkflowItem)
                {
                    WorkflowManager.abort(context, (WorkflowItem) wfi, context.getCurrentUser());
                } //else{
                  //  XmlWorkflowManager.abort(context, (XmlWorkflowItem) wfi, context.getCurrentUser());
                //}
            }
        }
        catch (SQLException e)
        {
            throw new DSpaceSwordException(e);
        }
        catch (AuthorizeException e)
        {
            throw new DSpaceSwordException(e);
        }
        catch (IOException e)
        {
            throw new DSpaceSwordException(e);
        }
    }",1
ZipHelper.java,/** * Convert an OPC item name into a zip URI by removing any leading forward * slash if it exist. * * @param opcItemName *            The OPC item name to convert. * @return A zip URI without any leading slashes. */,"public static URI getZipURIFromOPCName(String opcItemName) {
		if (opcItemName == null)
			throw new IllegalArgumentException(""opcItemName"");

		String retVal = opcItemName;
		while (retVal.startsWith(FORWARD_SLASH))
			retVal = retVal.substring(1);
		try {
			return new URI(retVal);
		} catch (URISyntaxException e) {
			return null;
		}
	}",1
ZMQ.java,/** * Bind to network interface to a random port. Start listening for new * connections. * * @param addr *            the endpoint to bind to. */,"public int bindToRandomPort(String addr)
        {
            return bindToRandomPort(addr, DYNFROM, DYNTO);
        }",1
VMLaunchOptions.java,/** * Launches multiple virtual machines based on the current contents of this set of launch options. The method is a success * if any one virtual machine is provisioned even if any errors occurred provisioning others. * @param provider the cloud provider in which the VM should be provisioned * @param count the number of virtual machines to provision * @return the IDs of the virtual machines that were provisioned * @throws CloudException an error occurred within the cloud provider that prevented the provisioning of any VMs * @throws InternalException an error occurred within Dasein Cloud in preparing the API call (can happen even if a VM gets provisioned) * @throws OperationNotSupportedException the cloud does not support virtual machines */,"public @Nonnull Iterable<String> buildMany(@Nonnull CloudProvider provider, int count) throws CloudException, InternalException {
        ComputeServices services = provider.getComputeServices();

        if( services == null ) {
            throw new OperationNotSupportedException(provider.getCloudName() + "" does not support compute services."");
        }",1
WallPostFragment.java,/** * loader which starts loading the wall comments for the wall */,"private void loadWallComments() {
        getLoaderManager().restartLoader(AppConstants.Loaders.LOAD_WALL_COMMENTS, null, this);

    }",1
WBSType.java,/** * Sets the value of the wbsMilestonePercentComplete property. * * @param value *     allowed object is *     {@link Double } * */,"public void setWBSMilestonePercentComplete(Double value)
   {
      this.wbsMilestonePercentComplete = value;
   }",1
YangFormattingPreferences.java,/** * @return the formatStrings */,"public boolean isFormatStrings() {
        return formatStrings;
    }",1
WXGesture.java,"/** * Create a touchObject for a pointer at a certain moment. * @param motionEvent motionEvent, which contains all pointers event in a period of time * @param pos index used to retrieve a certain moment in a period of time. * @param pointerIndex pointerIndex * @return JSONObject represent a touch event * @see <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Touch"">touch</a> */","private JSONObject createJSONObject(MotionEvent motionEvent, int pos, int pointerIndex) {
    PointF screenXY, pageXY;
    if (pos == CUR_EVENT) {
      pageXY = getEventLocInPageCoordinate(motionEvent, pointerIndex);
      screenXY = getEventLocInScreenCoordinate(motionEvent, pointerIndex);
    } else {
      pageXY = getEventLocInPageCoordinate(motionEvent, pointerIndex, pos);
      screenXY = getEventLocInScreenCoordinate(motionEvent, pointerIndex, pos);
    }
    return createJSONObject(screenXY, pageXY, (float) motionEvent.getPointerId(pointerIndex));
  }",1
XTraceBaggageInterface.java,/** Set the task ID in the thread's current baggage to the specified task ID * * @param taskId The task ID to set for the current execution */,"public static void setTaskID(long taskId) {
        BaggageContents.replace(XTRACE_BAGGAGE_NAMESPACE, TASK_ID_BAGGAGE_FIELD, ByteStrings.copyFrom(taskId));
    }",1
WBSType.java,/** * Gets the value of the summaryEarnedValueByCost property. * * @return *     possible object is *     {@link Double } * */,"public Double getSummaryEarnedValueByCost()
   {
      return summaryEarnedValueByCost;
   }",1
WrapperPlayServerSpawnEntityPainting.java,/** * Retrieve center Y coordinate. * @return The current Y */,"public int getY() {
        return handle.getIntegers().read(2);
    }",1
WidgetButtonNextPage.java,/** * Draws this button to the screen. */,"@Override
	public void drawButton(Minecraft par1Minecraft, int par2, int par3)
	{
		if (this.visible)
		{
			boolean flag = par2 >= this.xPosition && par3 >= this.yPosition && par2 < this.xPosition + this.width && par3 < this.yPosition + this.height;
			GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
			par1Minecraft.getTextureManager().bindTexture(bookGui);
			int k = 0;
			int l = 192;

			if (flag)
			{
				k += 23;
			}

			if (!this.nextPage)
			{
				l += 13;
			}

			this.drawTexturedModalRect(this.xPosition, this.yPosition, k, l, 23, 13);
		}
	}",1
XSLFSheet.java,/** * Set the contents of this sheet to be a copy of the source sheet. * This method erases any existing shapes and replaces them with * object from the source sheet. * * @param src the source sheet to copy data from * @return modified 'this' */,"public XSLFSheet importContent(XSLFSheet src){
        _shapes = null;
        _spTree = null;
        _drawing = null;
        _spTree = null;
        // first copy the source xml
        getSpTree().set(src.getSpTree());

        // recursively update each shape
        List<XSLFShape> tgtShapes = getShapeList();
        List<XSLFShape> srcShapes = src.getShapeList();
        for(int i = 0; i < tgtShapes.size(); i++){
            XSLFShape s1 = srcShapes.get(i);
            XSLFShape s2 = tgtShapes.get(i);

            s2.copy(s1);
        }
        return this;
    }",1
WXBaseCircleIndicator.java,/** * @return the fillColor */,"public int getFillColor() {
    return fillColor;
  }",1
WrapperPlayClientPositionLook.java,/** * Set absolute rotation on the Y Axis. * @param value - new value. */,"public void setPitch(float value) {
        handle.getFloat().write(1, value);
    }",1
YagoParser.java,/** * <p>handlePrefix.</p> * * @return a char. * @throws java.io.EOFException if any. */,"protected char handlePrefix() throws EOFException {
			final String s = """" + nextCharacter() + nextCharacter()
					+ nextCharacter() + nextCharacter() + nextCharacter()
					+ nextCharacter();
			if (s.toLowerCase().compareTo(""prefix"") == 0) {
				String name = """";
				char next = jumpOverBlanks();
				while (next != ':') {
					name += next;
					next = nextCharacter();
				}
				String prefix = """";
				next = jumpOverBlanks();
				if (next != '<') {
					while (next != ' ' && next != '\n') {
						prefix += next;
						next = nextCharacter();
					}
				} else {
					next = jumpOverBlanks();
					while (next != '>') {
						prefix += next;
						next = nextCharacter();
					}
					next = nextCharacter();
				}
				prefixe.put(name, prefix);
				if (next == ' ' || next == '\n') {
					next = jumpOverBlanks();
				}
				return next;
			} else {
				System.err.println(""Prefix not recognized!"");
				throw new EOFException();
			}
	}",1
ZMQ.java,"/** * Sets the username for outgoing connections over TCP or IPC. * If you set this to a non-null value, the security mechanism used for connections shall be PLAIN, see zmq_plain(7). * If you set this to a null value, the security mechanism used for connections shall be NULL, see zmq_null(3). * * @param username the username to set. * @return true if the option was set, otherwise false. */","public boolean setPlainUsername(String username)
        {
            return base.setSocketOpt(zmq.ZMQ.ZMQ_PLAIN_USERNAME, username);
        }",1
WorldEditCUI.java,/** * @return By default true is returned * @see com.sijobe.spc.core.IHook#isEnabled() */,"@Override
   public boolean isEnabled() {
      return handleEvents;
   }",1
Vvr.java,/** * Register the snapshots and the devices to the given {@link MBeanServer}. * * @param server * @throws JMException */,"private final void registerElements() throws JMException {
        final UUID vvrUuid = getUuidUuid();

        // Register snapshots
        {
            final Set<UUID> snapshots = vvrInstance.getSnapshots();
            for (final UUID uuid : snapshots) {
                final Snapshot snapshot = vvrInstance.getSnapshot(uuid);
                final VvrSnapshot mbean = new VvrSnapshot(snapshot);
                final ObjectName objectName = VvrObjectNameFactory.newSnapshotObjectName(owner, vvrUuid, uuid);
                server.registerMBean(mbean, objectName);
            }
        }

        // Register devices
        {
            final Set<UUID> devices = vvrInstance.getDevices();
            for (final UUID uuid : devices) {
                final Device device = vvrInstance.getDevice(uuid);
                final VvrDevice mbean = VvrDevice.loadVvrDevice(device, iscsiServer, nbdServer, node);
                devicesMXBeans.put(uuid, new WeakReference<>(mbean));
                final ObjectName objectName = VvrObjectNameFactory.newDeviceObjectName(owner, vvrUuid, uuid);
                server.registerMBean(mbean, objectName);
            }
        }
    }",1
WrapperPlayServerEntityMoveLook.java,/** * Set the relative movement in the x axis. * <p> * Note that this cannot exceed 4 blocks in either direction. * @param value - new value. */,"public void setDx(double value) {
    	if (Math.abs(value) > 4)
    		throw new IllegalArgumentException(""Displacement cannot exceed 4 meters."");
        handle.getBytes().write(0, (byte) Math.min(Math.floor(value * 32.0D), 127));
    }",1
WorkbenchShellHandler.java,/** * Gets instance of WorkbenchShellHandler. * * @return instance of WorkbenchShellHandler */,"public static WorkbenchShellHandler getInstance(){
		if(instance == null){
			instance = new WorkbenchShellHandler();
		}
		return instance;
	}",1
WidgetSpace.java,/** * * @param widgetView * @param dummyViewId * @return whether the dummy view is replaced by listview */,"ListView postListView(AppWidgetHostView widgetView, int dummyViewId) {
            ListView lv = new ListView(getContext());
            lv.setCacheColorHint(0);

            if (replaceView(widgetView, dummyViewId, lv))
                return lv;
            else
                return null;
        }",1
XmlEntityConsumerTest.java,/** * @param inlineEntries * @param feed * @param entry */,"private void getExpandedData(Map<String, Object> inlineEntries, ODataEntry entry) {
    assertNotNull(entry);
    Map<String, ExpandSelectTreeNode> expandNodes = entry.getExpandSelectTree().getLinks();
    for (Entry<String, ExpandSelectTreeNode> expand : expandNodes.entrySet()) {
      assertNotNull(expand.getKey());
      if (inlineEntries.containsKey(expand.getKey() + entry.getMetadata().getId())) {
        if (inlineEntries.get(expand.getKey() + entry.getMetadata().getId()) instanceof ODataFeed) {
          ODataFeed innerFeed = (ODataFeed) inlineEntries.get(expand.getKey() + entry.getMetadata().getId());
          assertNotNull(innerFeed);
          getExpandedData(inlineEntries, innerFeed);
          entry.getProperties().put(expand.getKey(), innerFeed);
        } else if (inlineEntries.get(expand.getKey() + entry.getMetadata().getId()) instanceof ODataEntry) {
          ODataEntry innerEntry = (ODataEntry) inlineEntries.get(expand.getKey() + entry.getMetadata().getId());
          assertNotNull(innerEntry);
          getExpandedData(inlineEntries, innerEntry);
          entry.getProperties().put(expand.getKey(), innerEntry);
        }
      }
    }
  }",1
XmlMarshaller.java,"/** * sort PropertyDescriptors according to propOrder. * properties listed in propOrder come first, in the order they are listed, and * then come remaining unlisted properties, in arbitrary order (likely alphabetical). * this semantics is rather relaxed compared to original JAXB semantics, where props * and propOrder must be the same set (except for those marked XmlTransient). * @param props PropertyDescriptor array to be sorted in-place. * @param propOrder list of property names in order of desired appearance. */","protected static void orderProperties(PropertyDescriptor[] props, final String[] propOrder) {
        if (propOrder == null || propOrder.length == 0) return;
        final Map<String, Integer> order = new HashMap<String, Integer>();
        for (int i = 0; i < propOrder.length; i++) {
            order.put(propOrder[i], i);
        }
        final Integer LAST = Integer.valueOf(propOrder.length);
        Arrays.sort(props, new Comparator<PropertyDescriptor>() {
            @Override
            public int compare(PropertyDescriptor o1, PropertyDescriptor o2) {
                Integer c1 = order.get(o1.getName());
                Integer c2 = order.get(o2.getName());
                return (c1 != null ? c1 : LAST).compareTo(c2 != null ? c2 : LAST);
            } 
        });
    }",1
AbstractExternalService.java,/** * Helper function for constructors. * */,"protected static FormServiceCursor createFormServiceCursor(IForm form, CommonFieldsBase entity, ExternalServicePublicationOption externalServiceOption, ExternalServiceType type, CallingContext cc) throws ODKDatastoreException {
FormServiceCursor formServiceCursor = FormServiceCursor.createFormServiceCursor(form, type, entity, cc);
formServiceCursor.setExternalServiceOption(externalServiceOption);
formServiceCursor.setIsExternalServicePrepared(false);
formServiceCursor.setOperationalStatus(OperationalStatus.ESTABLISHED);
formServiceCursor.setEstablishmentDateTime(new Date());
formServiceCursor.setUploadCompleted(false);
return formServiceCursor;
}",0
WampConnection.java,/** * Unsubscribe from any subscribed topic. */,"public void unsubscribe() {

      for (String topicUri : mSubs.keySet()) {

         WampMessage.Unsubscribe msg = new WampMessage.Unsubscribe(topicUri);
         mWriter.forward(msg);
      }
      mSubs.clear();
   }",1
VuzeActivitiesEntry.java,/** * Not needed if you #setDownloadManager(DownloadManager). This will * be written the map. */,"public void setTorrent(TOTorrent torrent) {
    this.torrent = torrent;

    try {
        assetHash = torrent.getHashWrapper().toBase32String();
    } catch (Exception e) {
    }
}",0
YTSearchAdapter.java,"/** * This should be called when adapter is no more used. * Adapter caching each music icons. * So, it occupies lots of memory. * To free those memories before GC, calling cleanup might be useful. */","public void
    cleanup() {
        P.bug(AUtil.isUiThread());
        for (int i = 0; i < mThumbnails.length; i++) {
            if (null != mThumbnails[i]) {
                mThumbnails[i].recycle();
                mThumbnails[i] = null;
            }
        }
        TaskManager tm = TaskManager.get();
        for (TmTask t : tm.getTasks(this))
            tm.cancelTask(t);
    }",1
WXGesture.java,"/** * @see {@link #getEventLocInPageCoordinate(MotionEvent, int, int)} */","private PointF getEventLocInPageCoordinate(MotionEvent motionEvent, int pointerIndex) {
    return getEventLocInPageCoordinate(motionEvent, pointerIndex, CUR_EVENT);
  }",1
WifiDirectHandler.java,"/** * Removes persistent/remembered groups * * Source: https://android.googlesource.com/platform/cts/+/jb-mr1-dev%5E1%5E2..jb-mr1-dev%5E1/ * Author: Nick  Kralevich <nnk@google.com> * * WifiP2pManager.java has a method deletePersistentGroup(), but it is not accessible in the * SDK. According to Vinit Deshpande <vinitd@google.com>, it is a common Android paradigm to * expose certain APIs in the SDK and hide others. This allows Android to maintain stability and * security. As a workaround, this removePersistentGroups() method uses Java reflection to call * the hidden method. We can list all the methods in WifiP2pManager and invoke ""deletePersistentGroup"" * if it exists. This is used to remove all possible persistent/remembered groups. */","private void removePersistentGroups() {
        try {
            Method[] methods = WifiP2pManager.class.getMethods();
            for (int i = 0; i < methods.length; i++) {
                if (methods[i].getName().equals(""deletePersistentGroup"")) {
                    // Remove any persistent group
                    for (int netid = 0; netid < 32; netid++) {
                        methods[i].invoke(wifiP2pManager, channel, netid, null);
                    }
                }
            }
            Log.i(TAG, ""Persistent groups removed"");
        } catch(Exception e) {
            Log.e(TAG, ""Failure removing persistent groups: "" + e.getMessage());
            e.printStackTrace();
        }
    }",1
WorkflowMode.java,/** * This enumerates the modes of the workflows that are currently known to Dockstore. * * @author dyuen */,"@ApiModel(description = ""This enumerates the modes of the workflows that are currently known to Dockstore."")
public enum WorkflowMode {
    /**
     * A full workflow entry means that a user has attempted to publish this workflow. We should look at all branches
     * and tags for workflows
     */
    FULL, /**
     * A stub workflow entry means that we're aware of a repo. However, we should not do a full refresh or scan into that repo
     * to conserve quota
     */
    STUB
}",1
XMPSchemaTest.java,/** * Check if Bag (Unordered Array) management is ok * * @throws InappropriateTypeException */,"@Test
	public void testBagManagement() throws Exception {
		String bagName = ""nsSchem:BAGTEST"";
		String value1 = ""valueOne"";
		String value2 = ""valueTwo"";
		schem.addBagValue(bagName, new TextType(parent, ""rdf"", ""li"", value1));
		schem.addBagValue(bagName, value2);

		List<String> values = schem.getBagValueList(bagName);
		Assert.assertEquals(value1, values.get(0));
		Assert.assertEquals(value2, values.get(1));

		schem.removeBagValue(bagName, value1);
		List<String> values2 = schem.getBagValueList(bagName);
		Assert.assertEquals(1, values2.size());
		Assert.assertEquals(value2, values2.get(0));

		/*
		 * System.out.println(""Bag Management :"");
		 * parent.getFuturOwner().appendChild(schem.getElement()); try {
		 * XMLUtil.save(parent.getFuturOwner(), System.out, ""UTF-8""); } catch
		 * (TransformerException e) {
		 * 
		 * e.printStackTrace(); } System.out.println(""------------------"");
		 */

	}",1
VMPCRandomGenerator.java,/** * Value generated in the same way as {@link VMPCRandomGenerator#P}; */,"private byte s = (byte) 0xbe;

    public VMPCRandomGenerator()
    {
    }",1
OrderResource.java,/** * Order Version 1. */,"@ContextualActionSet
public Set<String> getContextualActionSet() {
    Set<String> result = new HashSet<String>();
    result.add(""refresh"");
    switch (order.getStatus()) {
        case RECEIVED:
            result.add(""review"");       // @Action's value
            result.add(""cancel"");       // @Action's value
            result.add(""update"");       // @Action's value
            break;
        case REVIEWED:
            result.add(""cancel"");       // @Action's value
            result.add(""pay"");          // @Action's value
            result.add(""update"");       // @Action's value
            break;
        case CANCELED:
            break;
        case PAYED:
            result.add(""ship"");         // @Action's value
            result.add(""update"");       // @Action's value
            break;
        case SHIPPED:
            break;
    }
    return result;
}",0
StaticContentHandler.java,/** * This will force jetty to return the document anyway. */,"private void hackRemoveLastModifiedSince(HttpRequest req) {
if (null == req.getField(HttpFields.__IfModifiedSince)) {
  return;
}
try {
  Field f = HttpMessage.class.getDeclaredField(""_header"");
  f.setAccessible(true);
  HttpFields header = (HttpFields) f.get(req);
  header.remove(HttpFields.__IfModifiedSince);
} catch (Exception e) {
  e.printStackTrace();
}
}",0
AbstractCalendarView.java,/** * Defaults to ONE if not set. */,"public BatchExecutionBuilder withConsistency(String consistency) {
        this.consistency = consistency;
        return this;
    }",0
WrapperPlayServerNamedSoundEffect.java,/** * Retrieve the x coordinate of the effect. * @return The current effect position X */,"public double getEffectPositionX() {
        return handle.getIntegers().read(0) / 8.0;
    }",1
ZMQ.java,/** * Retrieves the current long term public key for the socket in binary format of 32 bytes. * * @return key the curve public key * @see #setCurvePublicKey(byte[]) */,"public byte[] getCurvePublicKey()
        {
            return (byte[]) base.getSocketOptx(zmq.ZMQ.ZMQ_CURVE_PUBLICKEY);
        }",1
YearPicker.java,/** * Jump to a specific year. * @param year */,"public void goTo(int year){
        int position = mAdapter.positionOfYear(year) - mPositionShift;
        int offset = mDistanceShift;
        if(position < 0){
            position = 0;
            offset = 0;
        }
        postSetSelectionFromTop(position, offset);
    }",1
AbstractBasicVO.java,/** * Useful For Debugging */,"@Override
public String toString() {
    return ""id: "" + this.id;
}",0
XMLFileWriter.java,"/** * Prints a string to the <code>FileWriter</code> stored in the field @see #writer indenting it * by the number of spaces indicated by @see #indent either relative to the * current indentation level (if @see #relative is <code>true</code>) or with * respect to the beginning of the line (if @see #relative is <code>false</code>). * * @param string the string to be printed. * @param indent the number of spaces by which the string needs to be indented. * @param relative id <code>true</code> the string is further indented with respect * to the current indentation level, if <code>false</code> is indented with respect to * the beginning of the line. */","public void indentPrint (String string, int indent, boolean relative) throws java.io.IOException {
        this.setIndent(indent, relative);
        String newString = this.indentString + string;
        int newStringLength = newString.length();
        writer.write(newString, 0, newStringLength);
    }",1
ZMQ.java,/** * The ZMQ_SNDBUF option shall retrieve the underlying kernel transmit buffer size for the specified socket. * For details refer to your operating system documentation for the SO_SNDBUF socket option. * * @return the kernel send buffer size. * @see #setSendBufferSize(int) */,"public int getSendBufferSize()
        {
            return base.getSocketOpt(zmq.ZMQ.ZMQ_SNDBUF);
        }",1
WrapperPlayServerPosition.java,"/** * Retrieve absolute rotation on the Y Axis, in degrees. * @return The current Pitch */","public float getPitch() {
        return handle.getFloat().read(1);
    }",1
XlsxUtil.java,/** * Check that the merged region has been created in the destination sheet. * * @param newMergedRegion the merged region to copy or not in the destination sheet. * @param mergedRegions the list containing all the merged region. * @return true if the merged region is already in the list or not. */,"private static boolean isNewMergedRegion(CellRangeAddressWrapper newMergedRegion, Set<CellRangeAddressWrapper> mergedRegions) {
		return !mergedRegions.contains(newMergedRegion);
	}",1
OutSequenceFaultSequenceTestCase.java,/** * Invalid service referred */,"@Test(groups = ""wso2.esb"", description = ""- Custom proxy -Fault sequence existing fault sequence"")
public void testCustomProxyFaultExistingFaultSequence() throws Exception {

    try {
        axis2Client.sendSimpleStockQuoteRequest(getProxyServiceURLHttp(""StockQuoteProxyFour""), null, ""WSO2"");
        fail();
    } catch (AxisFault axisFault) {
        assertTrue(axisFault.getReason().contains(""Fault sequence invoked""), ""Fault: value 'reason' mismatched"");
    }
}",0
WiffReporter.java,/** * @return */,"public T getKillPill() {
    return killSignal;
  }",1
AbstractBindTest.java,/** * Default constructor */,"public EchoProtocolHandler() {
        super();
    }

    r\\et",0
WireMockActivityInstrumentationTestCase2.java,/** * Test WireMock */,"@Test
    public void testWiremock() {
        activity = activityRule.getActivity();
        String jsonBody = asset(activity, ""atlanta-conditions.json"");
        stubFor(get(urlMatching(""/api/.*""))
                .willReturn(aResponse()
                        .withStatus(200)
                        .withBody(jsonBody)));

        String serviceEndpoint = ""http://127.0.0.1:"" + BuildConfig.PORT;
        logger.debug(""WireMock Endpoint: "" + serviceEndpoint);
        activity.setWeatherServiceManager(new WeatherServiceManager(serviceEndpoint));

        onView(ViewMatchers.withId(R.id.editText)).perform(typeText(""atlanta""));
        onView(withId(R.id.button)).perform(click());
        onView(withId(R.id.textView)).check(matches(withText(containsString(""GA""))));
    }",1
WrapperPlayClientUpdateSign.java,/** * Set block X Coordinate. * @param value - new value. */,"public void setX(int value) {
        handle.getIntegers().write(0, value);
    }",1
WXApplication.java,"/** * @param enable enable remote debugger. valid only if host not to be ""DEBUG_SERVER_HOST"". *               true, you can launch a remote debugger and inspector both. *               false, you can  just launch a inspector. * @param host   the debug server host, must not be ""DEBUG_SERVER_HOST"", a ip address or domain will be OK. *               for example ""127.0.0.1"". */","private void initDebugEnvironment(boolean connectable,boolean enable, String host) {
    if (!""DEBUG_SERVER_HOST"".equals(host)) {
      WXEnvironment.sDebugServerConnectable = connectable;
      WXEnvironment.sRemoteDebugMode = enable;
      WXEnvironment.sRemoteDebugProxyUrl = ""ws://"" + host + "":8088/debugProxy/native"";
    }
  }",1
WorkflowStateTag.java,/** * @return the type */,"public String getType() {
		return type;
	}",1
WrapperPlayServerSpawnEntity.java,/** * Set the optional speed y. * @param value - new value. */,"public void setOptionalSpeedY(double value) {
        handle.getIntegers().write(5, (int) (value * 8000.0D));
    }",1
WebSocketEmulatedDecoderImpl.java,/* * Processing state machine */,"enum DecodingState {
        START_OF_FRAME,
        READING_TEXT_FRAME,
        READING_COMMAND_FRAME,
        READING_BINARY_FRAME_HEADER,
        READING_BINARY_FRAME,
        READING_PING_FRAME
    };",1
WrapperPlayServerNamedEntitySpawn.java,/** * Set the UUID of the player. * @param uuid - the UUID. */,"public void setPlayerUUID(String uuid) {
    	setProfile(new WrappedGameProfile(uuid, getPlayerName()));
    }",1
ZipNumAllOutputFormat.java,/** * Get the path and filename for the output format. * * @param context *            the task context * @param extension *            an extension to add to the filename * @return a full path $output/_temporary/$taskid/part-[mr]-$id * @throws IOException */,"public Path getWorkFile(TaskAttemptContext context, String partWithExt)
			throws IOException {
		FileOutputCommitter committer = (FileOutputCommitter) getOutputCommitter(context);
				return new Path(committer.getWorkPath(), partWithExt);
	}",1
WBSType.java,/** * Gets the value of the totalSpendingPlan property. * * @return *     possible object is *     {@link Double } * */,"public Double getTotalSpendingPlan()
   {
      return totalSpendingPlan;
   }",1
WorkerMessages.java,/** * @return */,"public static String getNullConsumerChangeStatusToAllocatedForPeer() {
		return ""Allocation with a null consumer. The status change was ignored."";
	}",1
WFSIDCCAPS.java,/** * @see #readWriteAccessFollowingEject */,"public void setReadWriteAccessFollowingEject(final boolean readWriteAccessFollowingEject) {
		this.readWriteAccessFollowingEject.set(readWriteAccessFollowingEject);
	}",1
YangIndenter.java,"/** * Sets the deep indent offset (<code>fAlign</code>) to either the offset right after * <code>scopeIntroducerOffset</code> or - if available - the first YANG token after * <code>scopeIntroducerOffset</code>, but before <code>bound</code>. * * @param scopeIntroducerOffset the offset of the scope introducer * @param bound the bound for the search for another element * @return the reference position */","private int setFirstElementAlignment(int scopeIntroducerOffset, int bound) {
        int firstPossible = scopeIntroducerOffset + 1; // align with the first position after the
        // scope intro
        fAlign = fScanner.findNonWhitespaceForwardInAnyPartition(firstPossible, bound);
        if (fAlign == YangHeuristicScanner.NOT_FOUND) {
            fAlign = firstPossible;
        }
        return fAlign;
    }",1
WeexUiTestCaseTCAHrefStyle.java,/** * get tc list by text * @param byText * @return * @throws InterruptedException */,"public ArrayList<View> getTestCaseListViewByText(String byText) throws InterruptedException {
        Log.e(""TestScript_Guide"", ""byText =="" + byText);

        if(TextUtils.isEmpty(byText)){
            return null;
        }
        ArrayList<View> outViews = new ArrayList<View>();

        mViewGroup.findViewsWithText(outViews, byText, View.FIND_VIEWS_WITH_TEXT);

        for (View view :  outViews){
            String viewText = ((WXTextView)view).getText().toString();
            Log.e(TAG, ""viewText =="" + viewText);


        }
        return outViews;
    }",1
Win32PrintJob.java,/** * Converts the Java 1/72 inch to .NET 1/100 inch * @param javaLength the java length in 1/72 inch * @return the .NET length in 1/100 inch */,"private static int java2netLength( int javaLength ){
    	return (int) Math.round( (double)(javaLength * 100) / 72d );
    }",1
WrapperPlayClientSettings.java,/** * Set the client-side difficulty. * @param value - new value. */,"public void setDifficulty(Difficulty difficulty) {
    	handle.getDifficulties().write(0, difficulty);
    }",1
ZipResourceFile.java,"/** * getAssetFileDescriptor allows for ZipResourceFile to directly feed * Android API's that want an fd, offset, and length such as the * MediaPlayer. It also allows for the class to be used in a content * provider that can feed video players. The file must be stored * (non-compressed) in the Zip file for this to work. * * @param assetPath * @return the asset file descriptor for the file, or null if the file isn't *         present or is stored compressed */","public AssetFileDescriptor getAssetFileDescriptor(String assetPath) {
        ZipEntryRO entry = mHashMap.get(assetPath);
        if (null != entry) {
            return entry.getAssetFileDescriptor();
        }
        return null;
    }",1
WideDynamicMode.java,"/** * <p>Java class for WideDynamicMode. * * <p>The following schema fragment specifies the expected content contained within this class. * <p> * <pre> * &lt;simpleType name=""WideDynamicMode""&gt; *   &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}string""&gt; *     &lt;enumeration value=""OFF""/&gt; *     &lt;enumeration value=""ON""/&gt; *   &lt;/restriction&gt; * &lt;/simpleType&gt; * </pre> * */","@XmlType(name = ""WideDynamicMode"")
@XmlEnum
public enum WideDynamicMode {

    OFF,
    ON;

    public String value() {
        return name();
    }

    public static WideDynamicMode fromValue(String v) {
        return valueOf(v);
    }

}",1
OutSequenceFaultSequenceTestCase.java,/** * Invalid service referred */,"@Test(groups = ""wso2.esb"", description = ""- Custom proxy -Fault sequence From registry"")
public void testCustomProxyFaultFromRegistry() throws Exception {

    try {
        axis2Client.sendSimpleStockQuoteRequest(getProxyServiceURLHttp(""StockQuoteProxyFour""), null, ""WSO2"");
        fail();
    } catch (AxisFault axisFault) {
        assertTrue(axisFault.getReason().contains(""Fault sequence invoked""), ""Fault: value 'reason' mismatched"");
    }
}",0
WidgetUtils.java,/** * * @param control which index should be found * @return index of control */,"public static int getIndex(Control control) {
		// This is the reverse method of
		//    Matcher matcher = allOf(widgetOfType(Button.class), withStyle(SWT.PUSH, ""SWT.PUSH""));
		//    return new SWTBotButton((Button) widget(matcher, index), matcher);
		// TODO? Evaluate reusing matchers here too

		int index = 0;
		Composite parent = null;
		do {
			parent = control.getParent();
			for (Control c : parent.getChildren()) {
				if(c.equals(control)){
					return index;
				} else if (c.getClass().equals(control.getClass())){
					index++;
				}
			}
		} while(!(parent instanceof Shell));

		throw new RuntimeException(""Could not determine index for widget "" + control);
	}",1
VolumeCreateOptions.java,/** * Provisions a volume in the specified cloud based on the options defined in this object. * @param provider the cloud provider in which the volume should be provisioned * @return the unique ID of the newly provisioned volume * @throws CloudException an error occurred with the cloud provider while provisioning the volume * @throws InternalException an error occurred within Dasein Cloud while preparing the API call * @throws OperationNotSupportedException the cloud does not support volumes */,"public @Nonnull String build(@Nonnull CloudProvider provider) throws CloudException, InternalException {
        ComputeServices services = provider.getComputeServices();

        if( services == null ) {
            throw new OperationNotSupportedException(provider.getCloudName() + "" does not have support for compute services"");
        }",1
WorkQueueFrontier.java,/** * Get the queue of inactive uri-queue names at the given precedence. * * @param precedence * @return queue of inacti */,"protected Queue<String> getInactiveQueuesForPrecedence(int precedence) {
        Map<Integer,Queue<String>> inactiveQueuesByPrecedence = 
            getInactiveQueuesByPrecedence();
        Queue<String> candidate = inactiveQueuesByPrecedence.get(precedence);
        if(candidate==null) {
            candidate = createInactiveQueueForPrecedence(precedence);
            inactiveQueuesByPrecedence.put(precedence,candidate);
        }
        return candidate;
    }",1
VvrManagerTestUtils.java,"/** * Wait for the apparition of MXBeans. * * @param server *            a dummyMBeanServer * @param nbMXBean *            the wanted number of mx beans * * @return true if there are at least nbMXBean registered MXBeans, otherwise false. */","public final static boolean waitMXBeanNumber(final DummyMBeanServer server, final int nbMXBean)
            throws InterruptedException {
        int i = 0;
        int currentNumber = 0;
        while ((currentNumber = server.getNbMXBeans()) < nbMXBean && i < 100) {
            Thread.sleep(200);
            i++;
        }
        if (currentNumber >= nbMXBean) {
            return true;
        }
        else {
            return false;
        }
    }",1
WrapperPlayClientSetCreativeSlot.java,/** * Retrieve the inventory slot index. * @return The current Slot */,"public short getSlot() {
        return handle.getIntegers().read(0).shortValue();
    }",1
WinSrvPlugin.java,/** * Return a File pointing to the location of the Jar file this Main method is executed from. * @return */,"public File getWarLocation() {
        URL resource = WinSrvPlugin.class.getResource(""/META-INF/jettyconsole/jettyconsole.properties"");
        String file = resource.getFile();
        file = file.substring(""file:"".length(), file.indexOf(""!""));
        try {
            file = URLDecoder.decode(file, ""utf-8"");
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        return new File(file);
    }",1
YammerService.java,/** * Post a message or a reply to the current Yammer Network * * @param message - message to post * @param messageId - Message being replied to * * @throws YammerProxy.AccessDeniedException * @throws YammerProxy.ConnectionProblem */,"public void postMessage(final String message, final long messageId) throws YammerProxy.YammerProxyException {
    getYammerProxy().postMessage(message, messageId);
  }",1
X509CertSelector.java,"/** * Returns a copy of the pathToNames criterion. The * <code>X509Certificate</code> must not include name constraints that would * prohibit building a path to the specified names. If the value * returned is <code>null</code>, no pathToNames check will be performed. * <p> * If the value returned is not <code>null</code>, it is a * <code>Collection</code> with one * entry for each name to be included in the pathToNames * criterion. Each entry is a <code>List</code> whose first entry is an * <code>Integer</code> (the name type, 0-8) and whose second * entry is a <code>String</code> or a byte array (the name, in * string or ASN.1 DER encoded form, respectively). * There can be multiple names of the same type. Note that the * <code>Collection</code> returned may contain duplicate names (same * name and name type). * <p> * Each name in the <code>Collection</code> * may be specified either as a <code>String</code> or as an ASN.1 encoded * byte array. For more details about the formats used, see * {@link #addPathToName(int type, String name) * addPathToName(int type, String name)} and * {@link #addPathToName(int type, byte [] name) * addPathToName(int type, byte [] name)}. * <p> * Note that a deep copy is performed on the <code>Collection</code> to * protect against subsequent modifications. * * @return a <code>Collection</code> of names (or <code>null</code>) * @see #setPathToNames */","public Collection<List<?>> getPathToNames() {
        if (pathToNames == null) {
            return null;
        }
        return cloneNames(pathToNames);
    }",1
XMLWorkflowFactory.java,/** * Get where to find workflow XML files. * * @param root *            The root element of the XML file. * @return The absolute base dir used for finding these files or null. */,"protected String getBaseDir(Element root) {
		String basedir = root.getAttribute(""basedir"");

		if (basedir.length() == 0) {
			// No base dir defined
			return null;
		}

		if (new File(basedir).isAbsolute()) {
			// An absolute base dir defined
			return basedir;
		} else {
			// Append the current working directory to the relative base dir
			return new File(System.getProperty(""user.dir""), basedir).getAbsolutePath();
		}
	}",1
WebSocketWebResource.java,/** * Gets a caller id (IP + role) * * @return the web service caller identification */,"public String clientAppId() {
        if (clientId != null && service().getConfig().isAuthenticationEnabled()) {
            try {
                clientId = service().getAuthenticationService().authenticateHttpRequest(httpRequest);
            } catch (AuthenticationException e) {
                throw new RestException(Status.UNAUTHORIZED, ""Failed to get clientId from request"");
            }
        } else {
            throw new RestException(Status.UNAUTHORIZED, ""Failed to get auth data from the request"");
        }
        return clientId;
    }",1
YangColorManager.java,/* * @see IColorManager#getColor(RGB) */,"public Color getColor(RGB rgb) {

        if (rgb == null)
            return null;

        final Display display = Display.getCurrent();
        Map<RGB, Color> colorTable = fDisplayTable.get(display);
        if (colorTable == null) {
            colorTable = new HashMap<RGB, Color>(10);
            fDisplayTable.put(display, colorTable);
            if (fAutoDisposeOnDisplayDispose) {
                display.disposeExec(new Runnable() {
                    public void run() {
                        dispose(display);
                    }
                });
            }
        }

        Color color = colorTable.get(rgb);
        if (color == null) {
            color = new Color(Display.getCurrent(), rgb);
            colorTable.put(rgb, color);
        }

        return color;
    }",1
MD4Hasher.java,/** * Uses bouncy castle provider * */,"public 
MD4Hasher()
{
    try{
        md4 = MessageDigest.getInstance(""MD4"", BouncyCastleProvider.PROVIDER_NAME );
                  
    }catch( Throwable e ){
        
            // should never get here
        
        Debug.printStackTrace( e );
    }
}",0
WrapperPlayClientBlockDig.java,/** * Retrieve block position. * @return The current X */,"public int getX() {
        return handle.getIntegers().read(0);
    }",1
WAStoragePublisher.java,/** * Allowing anonymous access for links generated by jenkins. */,"public boolean isAllowAnonymousAccess() {
        return allowAnonymousAccess;
    }",1
WrapperPlayServerTileEntityData.java,/** * Retrieve the type of update to perform. * @return The current Action */,"public byte getAction() {
        return handle.getIntegers().read(3).byteValue();
    }",1
WurmAPI.java,/** * Creates new WurmAPI instance. * * @param worldDirectory path to new or existing world directory. * @param powerOfTwo power of two of new map (must be between 10 and 15) * @return WurmAPI instance */,"public static WurmAPI create(String worldDirectory, int powerOfTwo) throws IOException {
        return new WurmAPI(worldDirectory, powerOfTwo);
    }",1
WrapperLoginServerDisconnect.java,/** * Retrieve the message that is displayed to the client when the connection terminates. * @return The current JSON message. */,"public WrappedChatComponent getJsonData() {
        return handle.getChatComponents().read(0);
    }",1
XMLReferencesBatchValidator.java,"/** * Determine if a given file should be validated. * * @param file *            The file that may be validated. * @return True if the file should be validated, false otherwise. */","private static boolean shouldValidate(IFile file) {
		IResource resource = file;
		do {
			if (resource.isDerived() || resource.isTeamPrivateMember()
					|| !resource.isAccessible()
					|| resource.getName().charAt(0) == '.') {
				return false;
			}
			resource = resource.getParent();
		} while ((resource.getType() & IResource.PROJECT) == 0);

		return true;
	}",1
YoutubeActivityUtil.java,/** * Gets the common youtube {@link Provider} object * @return a provider object representing YouTube */,"public static Provider getProvider() {
    Provider provider = new Provider();
    provider.setId(""id:providers:youtube"");
    provider.setDisplayName(""YouTube"");
    return provider;
  }",1
HashDirCache.java,/* blocking interruptions until complete should be perfectly * okay. */,"private static LockedFile lock2(File path) throws IOException {
boolean intr = false;
try {
    while(true) {
    try {
        RandomAccessFile fp = null;
        try {
        fp = new RandomAccessFile(path, ""rw"");
        FileLock lk = fp.getChannel().lock();
        LockedFile ret = new LockedFile(fp, lk);
        fp = null;
        return(ret);
        } finally {
        if(fp != null)
            fp.close();
        }
    } catch(FileLockInterruptionException e) {
        Thread.currentThread().interrupted();
        intr = true;
    }
    }
} finally {
    if(intr)
    Thread.currentThread().interrupt();
}
}",0
WebResourcesContext.java,"/** * Constructor for web resources context. * * @param htmlNode *            the HTML node which have triggers this provider. * @param resourceType *            the resource type (css, js, img); * @param hasExternalCSS */","public WebResourcesContext(IDOMNode htmlNode,
			WebResourcesFinderType resourceType, boolean hasExternalCSS) {
		this.htmlNode = htmlNode;
		this.htmlFile = null;
		this.resourceType = resourceType;
		this.hasExternalCSS = hasExternalCSS;
	}",1
WrapperPlayServerScoreboardTeam.java,/** * Set the team display name. * <p> * A team must be created or updated. * @param value - new value. */,"public void setTeamDisplayName(String value) {
    	handle.getStrings().write(1, value);
    }",1
ZrtpSrtpSecrets.java,/** * @param initSaltLen the initSaltLen to set */,"public void setInitSaltLen(int initSaltLen) {
            this.initSaltLen = initSaltLen;
        }",1
WrapperPlayServerSetSlot.java,"/** * Set the window which is being updated. * <p> * Use 0 for the player inventory. This packet will only be sent for the currently opened window while the player is * performing actions, even if it affects the player inventory. After the window is closed, a number of these packets * are sent to update the player's inventory window. * @param value - new value. */","public void setWindowId(byte value) {
        handle.getIntegers().write(0, (int) value);
    }",1
YTPlayer.java,/** * Get volume of video-on-play * @return -1 : for error */,"public int
    getVideoVolume() {
        if (isVideoPlaying())
            return mpGetVolume();
        return DB.INVALID_VOLUME;
    }",1
ZrtpConfigure.java,/** * Returns Iterable for the hashes. * * Use this in for-each loop such as * <code>for (ZrtpConstants.SupportedHashes sh: config.hashes()) {</code> * * @return The hash Iterable. */,"@SuppressWarnings(""unused"")
    public Iterable<ZrtpConstants.SupportedHashes> hashes() {
        return hashes;
    }",1
BlockLift.java,/** Called when a block is placed using its ItemBlock.*/,"public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ,
        int meta, EntityLivingBase placer)
{
    return getStateFromMeta(meta);
}",0
XMLFileWriter.java,/** * Prints a string to the <code>FileWriter</code> stored in the field @see #writer. * * @param string the string to be printed. */,"public void print (String string) throws java.io.IOException {
        writer.write(string, 0, string.length());
    }",1
WatchDataSourceImplTest.java,/* * Asserts that all objects in a given collection are same. */,"private void assertAllSame(Collection collection) {
        if (collection.isEmpty()) {
            return;
        }
        Iterator i = collection.iterator();
        Object obj = i.next();
        while (i.hasNext()) {
            Assert.assertSame(obj, i.next());
        }
    }",1
ZMQ.java,/** * Get the socket associated with an index. * * @param index *            the desired index. * @return the Socket associated with that index (or null). */,"public Socket getSocket(int index)
        {
            if (index < 0 || index >= this.next) {
                return null;
            }
            return items[index].socket;
        }",1
RemoteWebDriver.java,/** * Override this to be notified at key points in the execution of a command. */,"protected void log(SessionId sessionId, String commandName, Object toLog, When when) {
String text = """" + toLog;
if (commandName.equals(DriverCommand.EXECUTE_SCRIPT)
    || commandName.equals(DriverCommand.EXECUTE_ASYNC_SCRIPT)) {
  if (text.length() > 100 && Boolean.getBoolean(""webdriver.remote.shorten_log_messages"")) {
    text = text.substring(0, 100) + ""..."";
  }
}
switch(when) {
  case BEFORE:
    logger.log(level, ""Executing: "" + commandName + "" "" + text);
    break;
  case AFTER:
    logger.log(level, ""Executed: "" + text);
    break;
  case EXCEPTION:
    logger.log(level, ""Exception: "" + text);
    break;
  default:
    logger.log(level, text);
    break;
}
}",0
XMLSetFieldLiteralString.java,"/** * <p>Java class for XMLSetFieldLiteralString complex type. * * <p>The following schema fragment specifies the expected content contained within this class. * * <pre> * &lt;complexType name=""XMLSetFieldLiteralString""&gt; *   &lt;complexContent&gt; *     &lt;extension base=""{}XMLSetFieldLiteralBase""&gt; *       &lt;attribute name=""value"" type=""{http://www.w3.org/2001/XMLSchema}string"" /&gt; *     &lt;/extension&gt; *   &lt;/complexContent&gt; * &lt;/complexType&gt; * </pre> * * */","@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""XMLSetFieldLiteralString"")
public class XMLSetFieldLiteralString
    extends XMLSetFieldLiteralBase
{

    @XmlAttribute(name = ""value"")
    protected String value;

    /**
     * Gets the value of the value property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setValue(String value) {
        this.value = value;
    }

}",1
VOffset.java,/** * Move text vertically by N pixels * * @param pixels the number of pixels */,"public VOffset(String pixels) throws ParseException {
        try {
            this.mPixels = Integer.parseInt(pixels);
        } catch (NumberFormatException e) {
            throw new ParseException(String.format(""Invalid pixels: '%s'"", pixels));
        }
    }",1
WebDriverElement.java,"/** * Retrieve the ElementContext that this element was found in. Intended to allow element types * to find other elements within the same context, most likely by nesting within themselves. For * example, {@code return By.nested(this, By.htmlTag(""option"")).findAll(SelectOption.class, * getContext());}. */","public ElementContext getContext() {
        return context;
    }",1
WrapperPlayClientBlockPlace.java,/** * Retrieve the y block position. * @return The current Y */,"public byte getY() {
        return handle.getIntegers().read(1).byteValue();
    }",1
WebsockifyProxyHandler.java,/** * Sets the content type header for the HTTP Response * * @param response *            HTTP response * @param file *            file to extract content type */,"private void setContentTypeHeader(HttpResponse response, File file) {
        MimetypesFileTypeMap mimeTypesMap = new MimetypesFileTypeMap();
        response.setHeader(HttpHeaders.Names.CONTENT_TYPE, mimeTypesMap.getContentType(file.getPath()));
    }",1
WrapperPlayServerCustomPayload.java,"/** * Retrieve name of the ""channel"" used to send the data.. * @return The current Channel */","public String getChannel() {
        return handle.getStrings().read(0);
    }",1
ZStreamingQuoteControl.java,/** * stopStreamingQuote - private method to stop streaming Quote WS */,"private void stopStreamingQuote(){
		//stop web socket for streaming quote URL
		if(streamingQuoteStarted && websocketThread != null){
			websocketThread.stopWS();
			//Allow WS to get closed
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				System.out.println(""ZStreamingQuoteControl.stopStreamingQuote(): ERROR: InterruptedException while sleeping"");
			}
		}
		
		if(ZStreamingConfig.isStreamingQuoteStoringRequired() && (streamingQuoteStorage != null)){
			//Close streaming quote storage
			streamingQuoteStorage.closeJDBCConn();
		}
	}",1
YTPlayer.java,"/** * Player session id. * Even if same video is re-played, session id is different. */","public long
    getPlayerSessionId() {
        return mMpSessId;
    }",1
DParticles.java,/** * DParticles */,"public DParticles(GeneralParam params,List<EntryParam<String,Object>>list,String prefix)
{    	
    super(params,new DistributedMultiSchedule<Int2D>(),prefix,params.getConnectionType());
    this.MODE=params.getMode();
    gridWidth=params.getWidth();
    gridHeight=params.getHeight();
    topicPrefix=prefix;

}",0
WriteBufferDeviceTest.java,/** * Test buffered write with 8kb blocks on the device. * * @throws Exception *             These should never be thrown. */,"@Test
    public final void testReadWriteBeginning8kb() throws Exception {

        int writeBlockCount = 50;
        int blockFactor = testDataBlock8kb.length / device.getBlockSize();
        long address = 0;

        for (int i = 0; i < writeBlockCount; i++) {
            device.write(address + i * blockFactor, testDataBlock8kb);
        }
        device.flush();
        for (int j = 0; j < writeBlockCount; j++) {
            byte[] result = new byte[testDataBlock8kb.length];
            device.read(address + j * blockFactor, result);
            for (int i = 0; i < testDataBlock8kb.length; i++) {
                assertEquals(result[i], testDataBlock8kb[i]);
            }
        }
    }",1
WBSType.java,/** * Gets the value of the lastUpdateUser property. * * @return *     possible object is *     {@link String } * */,"public String getLastUpdateUser()
   {
      return lastUpdateUser;
   }",1
XSLFSheet.java,/** * * @return  background for this sheet */,"public XSLFBackground getBackground() {
        return null;
    }",1
ZrtpConfigure.java,/** * Returns Iterable for SRTP authentication lengths. * * Use this in for-each loop such as * <code>for (ZrtpConstants.SupportedHashes sh: config.authLengths()) {</code> * * @return The authLengths Iterable. */,"@SuppressWarnings(""unused"")
    public Iterable<ZrtpConstants.SupportedAuthLengths> authLengths() {
        return authLengths;
    }",1
WalkingMonster.java,/** * @param difficulty * @return */,"@Override
    public int getMinDamage(Integer difficulty) {
        if (difficulty == null || difficulty > 3 || difficulty < 0) {
            difficulty = Server.getInstance().getDifficulty();
        }
        return this.minDamage[difficulty];
    }",1
VOGeoServerContrastEnhancementNormalizeBlueTest.java,/** * Creates the channel selection error object. * * @param styleFactory the style factory * @param contrastMethod the contrast method * @return the channel selection */,"private ChannelSelection createChannelSelectionError(StyleFactoryImpl styleFactory,
            ContrastMethod contrastMethod) {
        ContrastEnhancement contrastEnhancement = 
                (ContrastEnhancement) styleFactory.contrastEnhancement(null, 
                contrastMethod.name());

        FilterFactory ff = CommonFactoryFinder.getFilterFactory();

        Map<String, Expression> options = contrastEnhancement.getOptions();
        options.put(""algorithm"", ff.literal(""TestStretchToMinimumMaximum""));
        options.put(""minValue"", ff.literal(""1.0""));
        options.put(""maxValue"", ff.literal(""5.0""));

        SelectedChannelType channelType = styleFactory.createSelectedChannelType(""channel name"",
                contrastEnhancement);
        SelectedChannelType[] channels = new SelectedChannelType[3];
        channels[0] = channelType;
        channels[1] = channelType;
        channels[2] = channelType;
        ChannelSelection channelSelection = styleFactory.createChannelSelection(channels);
        return channelSelection;
    }",1
WebSensorTest.java,/** * Unit test which is more kind of an integration test. The purpose of this test is to get early feedback on changes in * the number of issues. */,"@Test
  public void testSensor() throws Exception {
    DefaultInputFile inputFile = new DefaultInputFile(""key"", ""user-properties.jsp"")
      .setLanguage(WebConstants.LANGUAGE_KEY)
      .setType(InputFile.Type.MAIN)
      .initMetadata(new FileMetadata().readMetadata(new FileReader(new File(TEST_DIR, ""user-properties.jsp""))));

    tester.fileSystem().add(inputFile);

    sensor.execute(tester);

    String componentKey = inputFile.key();
    assertThat(tester.measure(componentKey, CoreMetrics.NCLOC).value()).isEqualTo(227);
    assertThat(tester.measure(componentKey, CoreMetrics.COMMENT_LINES).value()).isEqualTo(14);
    assertThat(tester.measure(componentKey, CoreMetrics.COMPLEXITY).value()).isEqualTo(1);

    assertThat(tester.cpdTokens(componentKey)).hasSize(224);

    assertThat(tester.highlightingTypeAt(componentKey, 1, 0)).containsOnly(TypeOfText.COMMENT);
    assertThat(tester.highlightingTypeAt(componentKey, 18, 0)).containsOnly(TypeOfText.COMMENT);
    assertThat(tester.highlightingTypeAt(componentKey, 19, 0)).containsOnly(TypeOfText.ANNOTATION);
    assertThat(tester.highlightingTypeAt(componentKey, 29, 17)).containsOnly(TypeOfText.STRING);
    assertThat(tester.highlightingTypeAt(componentKey, 29, 0)).containsOnly(TypeOfText.KEYWORD);

    assertThat(tester.allIssues()).hasSize(84);
  }",1
AbstractCalendarView.java,/** * Default constructor */,"public BasicForm()
{
  initializePanel();
}",0
WrapperPlayServerMapChunkBulk.java,/** * Retrieve the size of the data field. * @return The current Data length */,"public int getDataLength() {
        return handle.getIntegers().read(0);
    }",1
WfsIDCStatus.java,/** * @see #device */,"public IDCDeviceState getDevice() {
		return XfsConstants.valueOf(device, IDCDeviceState.class);
	}",1
XposedBridge.java,"/** * Get notified when the resources for a package are loaded. In callbacks, resource replacements can be created. * @return */","public static XC_InitPackageResources.Unhook hookInitPackageResources(XC_InitPackageResources callback) {
        synchronized (sInitPackageResourcesCallbacks) {
            sInitPackageResourcesCallbacks.add(callback);
        }
        return callback.new Unhook();
    }",1
WymEditor.java,/** * Upload image. * * @return */,"@OnEvent(value = ""uploadImage"")
    public Object uploadFile()
    {
        JSONObject result = new JSONObject();
        JSONArray message = new JSONArray();
        try
        {
            UploadedFile attachment = decoder.getFileUpload(""attachment"");
            String path = this.uploadMedia.uploadMedia(attachment);
            result.put(""error"", false);
            result.put(""path"", path);
            message.put(messages.get(""upload-success""));
        }
        catch (IOException ioEx)
        {
            ioEx.printStackTrace();
            result.put(""error"", true);
            message.put(messages.get(""upload-failure""));
        }
        result.put(""messages"", message);
        return new TextStreamResponse(""text/html"", result.toString());
    }",1
WizPurchase.java,/** * Convert a Purchase object in Java-land to a JSON Purchase object to be returned to JS-land * * @param purchase Purchase to transform to a JSON object **/,"JSONObject convertToJSONObject(Purchase purchase) throws JSONException {
		JSONObject purchaseObject = new JSONObject();
		purchaseObject.put(""platform"", ""android"");
		purchaseObject.put(""orderId"", purchase.getOrderId());
		purchaseObject.put(""packageName"", cordova.getActivity().getPackageName());
		purchaseObject.put(""productId"", purchase.getSku());
		purchaseObject.put(""purchaseTime"", purchase.getPurchaseTime());
		purchaseObject.put(""purchaseState"", purchase.getPurchaseState());
		purchaseObject.put(""developerPayload"", purchase.getDeveloperPayload());
		purchaseObject.put(""receipt"", purchase.getToken());
		purchaseObject.put(""json"", purchase.getOriginalJson());
		purchaseObject.put(""signature"", purchase.getSignature());
		return purchaseObject;
	}",1
WiffProperties.java,/** * Retrieves the value of the given key as a boolean * * @param key *          the property to retrieve * @return the key's value as a boolean */,"public boolean getBoolean(String key) {
    return Boolean.parseBoolean(getString(key));
  }",1
ZkSyncPrimitive.java,"/** * If the primitive has been killed, returns the exception that has killed it. * @return							The exception that killed the primitive */","public ZkCagesException getKillerException() {
    	return killedByException;
    }",1
ZrtpConfigure.java,/** * Returns the identifier of the SRTP authentication length at the given * index. * * If the index does not point to a configured slot then the function * returns the value <code>EndSupportedAuthLength</code>. */,"@SuppressWarnings(""unused"")
    public ZrtpConstants.SupportedAuthLengths getAuthLengthAt(int index) {
        try {
            return authLengths.getAlgoAt(index);
        } catch (IndexOutOfBoundsException e) {
            return null;
        }
    }",1
Utils.java,/*  they should do for these simple purposes. */,"public static String odformat(double num, int md) {
if(num < 0)
    return(""-"" + odformat(-num, md));
long dm = 1;
for(int i = 0; i < md; i++) dm *= 10;
long raw = (long)Math.round(num * dm);
long ip = raw / dm;
long dp = raw % dm;
if(dp == 0)
    return(Long.toString(ip));
StringBuilder buf = new StringBuilder();
buf.append(ip);
buf.append('.');
for(dm /= 10; dm > dp; dm /= 10) buf.append('0');
while((dp % 10) == 0) dp /= 10;
buf.append(dp);
return(buf.toString());
}",0
BrowseServlet.java,/** * Creates a folder. */,"protected void doPost(HttpServletRequest request,
        HttpServletResponse response, Session session)
        throws ServletException, IOException, TheBlendException {

    String parentId = getRequiredStringParameter(request, PARAM_PARENT);
    String typeId = getRequiredStringParameter(request, PARAM_TYPE_ID);
    String name = getStringParameter(request, PARAM_NAME);

    if (name == null || name.length() == 0) {
        redirect(HTMLHelper.encodeUrlWithId(request, ""browse"", parentId),
                request, response);
        return;
    }

    // fetch the parent folder
    Folder parent = CMISHelper.getFolder(session, parentId,
            CMISHelper.LIGHT_OPERATION_CONTEXT, ""parent folder"");

    // set name and type of the new folder
    Map<String, Object> properties = new HashMap<String, Object>();
    properties.put(PropertyIds.NAME, name);
    properties.put(PropertyIds.OBJECT_TYPE_ID, typeId);

    // create the folder
    try {
        parent.createFolder(properties);
    } catch (CmisBaseException cbe) {
        throw new TheBlendException(""Could not create folder: ""
                + cbe.getMessage(), cbe);
    }

    redirect(HTMLHelper.encodeUrlWithId(request, ""browse"", parentId),
            request, response);
}",0
XTraceGCUtils.java,/** * Turn on or off a thread that spams calls to System.GC * * @param enabled *            turn the thread on or off */,"public static void spam(boolean enabled) {
        if (enabled)
            spammer.start();
        else
            spammer.stop();
    }",1
WBSType.java,/** * Sets the value of the summaryFinishDateVariance property. * * @param value *     allowed object is *     {@link Double } * */,"public void setSummaryFinishDateVariance(Double value)
   {
      this.summaryFinishDateVariance = value;
   }",1
XMLNoteDocument.java,/*********************************************************************************************** * This is an internal class for date representation for meta key/values. ***********************************************************************************************/,"class Date extends java.util.Date {

	/**
	 * Version
	 */
	private static final long serialVersionUID = 1L;
	
	private static SimpleDateFormat format=new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSZ""); 
	
	public String toString() {
		return format.format(this);
	}
	
	public java.util.Date dt() {
		return new java.util.Date(this.getTime());
	}
	
	public static java.util.Date parseDate(String txt) {
		try {
			return format.parse(txt);
		} catch (ParseException e) {
			DefaultXMLNoteErrorHandler.exception(e);
			return new java.util.Date();
		}
	}
	
	public Date(java.util.Date dt) {
		super(dt.getTime());
	}
	
}",1
WeekView.java,/** * Get scroll duration * @return scroll duration */,"public int getScrollDuration() {
        return mScrollDuration;
    }",1
XMultiColumnListView.java,"/** * Stop load more, reset footer view. */","public void stopLoadMore() {
        if (mPullLoading) {
            mPullLoading = false;
            mFooterView.setState(XFooterView.STATE_NORMAL);
        }
    }",1
WebApplicationMetaData.java,/** * Override to return false to prevent WebApplicationDefaultsProcessor * from setting an empty context to / */,"public boolean forceDefaultContext() {
        return true;
    }",1
WiffConnection.java,/** * @param packet *          a packet object describing this TCP packet * @throws Exception */,"public WiffConnection(WiffPacket packet) throws Exception {
    sourceIp = packet.getSourceIP();
    sourcePort = packet.getSourcePort();
    destinationIp = packet.getDestinationIP();
    destinationPort = packet.getDestinationPort();
  }",1
WrapperPlayServerUpdateSign.java,/** * Set the lines of text represented by a four-element String array.. * @param value - new value. */,"public void setLines(@Nonnull String[] lines) {
    	if (lines == null)
    		throw new IllegalArgumentException(""Array cannot be NULL."");
    	if (lines.length != 4)
    		throw new IllegalArgumentException(""The lines array must be four elements long."");
        handle.getStringArrays().write(0, lines);
    }
}",1
DonovanDriveTrain.java,"/* * A SO FAR UNSUCCESSFUL attempt at drive straight code, ported from Michael1. */","public void forwardInchesMike(int inches){
resetEncoders();
donnie.gyro.reset();
double p, i, d, err, lastErr;
double multiplier = 0.3;
p = i = d = err = 0;
lastErr =  donnie.gyro.getAngle();
while(getAvgDistance() < inches && donnie.isAutonomous() && donnie.isEnabled()) {
err = donnie.gyro.getAngle();
p = err;
i = i + err * FWD_T;
d = (err-lastErr)/FWD_T;
lastErr = err;
double diff = p*FWD_P + d*FWD_D + i*FWD_I;
if (getAvgDistance() > inches - 7) {
multiplier = (inches - getAvgDistance()) / 14;
if (multiplier < .2)  {
multiplier = 0.2;
}
}
donnie.dt.tankDrive((multiplier - diff), (multiplier + diff));
Timer.delay(FWD_T);


}
donnie.dt.tankDrive(0, 0);

}",0
AbstractCalendarView.java,/** * Initializer */,"protected void initializePanel()
{
  setLayout(new BorderLayout());
  add(createPanel(), BorderLayout.CENTER);
}",0
MyDisplayJAI.java,/** * constructor */,"public MyDisplayJAI(ComparaisonCouple couple, Model model, boolean isTest) {
    super();
    model.addObserver(this);
    mask=couple.getMaskSum();
    this.isTest=isTest;
    me = this;
    this.model = model;
    try {
        if (isTest){
            img = ImageIO.read(couple.getImgTest());
        }else{
            img = ImageIO.read(model.getRefImage(couple.getImgRefId()).getImage());	
        }
        w = img.getWidth();
        h = img.getHeight();
        bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        Graphics g = bi.getGraphics();

        Dimension dim = new Dimension(w,h);
        setPreferredSize(dim);
        setMinimumSize(dim);
        g.drawImage(img, 0, 0, null);
    } catch (IOException e) {
        e.printStackTrace();
    }
    diff = couple.getDifWithMask();
}",0
WXGesture.java,"/** * Handle low-level gesture * @param WXGestureType possible low-level gesture, defined in {@link WXEventType} * @param motionEvent motionEvent, which contains all pointers event in a period of time * @return true if this event is handled, otherwise false. */","private boolean handleMotionEvent(WXGestureType WXGestureType, MotionEvent motionEvent) {
    if (component.containsGesture(WXGestureType)) {
      List<Map<String, Object>> list = createFireEventParam(motionEvent);
      for (Map<String, Object> map : list) {
        WXSDKManager.getInstance().fireEvent(component.mInstanceId, component.mDomObj.ref,
                                             WXGestureType.toString(), map);
      }
      return true;
    } else {
      return false;
    }
  }",1
WifiStatus.java,/** * Check if The Device Is Connected to Hotspot using wifi * * @return true if device connect to Hotspot or return false if not */,"public boolean  isConnectedToAP(){
			ConnectivityManager connectivity = (ConnectivityManager)mContext
			        .getSystemService(Context.CONNECTIVITY_SERVICE);
			if (connectivity != null) {
			    NetworkInfo info = connectivity.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
			    if (info != null) {
			        if (info.isConnected()) {
				            return true;
			        }
			    }
			}
			return false;
		}",1
WorkflowTools.java,/** * Is the given item in a DSpace workspace? * * This method queries the database directly to determine if this is the * case rather than using the DSpace API (which is very slow). * * @param context * @param item * @throws DSpaceSwordException */,"public boolean isItemInWorkspace(Context context, Item item)
            throws DSpaceSwordException
    {
        try
        {
            return WorkspaceItem.findByItem(context, item) != null;
        }
        catch (SQLException e)
        {
            throw new DSpaceSwordException(e);
        }
    }",1
HtmlUnitDriver.java,/** * Allows HtmlUnit's about:blank to be loaded in the constructor */,"protected void get(URL fullUrl) {
try {
  getWebClient().getPage(fullUrl);
  // A ""get"" works over the entire page
  currentWindow = getCurrentWindow().getTopWindow();
} catch (UnknownHostException e) {
  getCurrentWindow().getTopWindow().setEnclosedPage(new UnexpectedPage(
      new StringWebResponse(""Unknown host"", fullUrl),
      getCurrentWindow().getTopWindow()
  ));
} catch (ConnectException e) {
  // This might be expected
} catch (SocketTimeoutException e) {
  throw new TimeoutException(e);
} catch (Exception e) {
  throw new WebDriverException(e);
}

gotPage = true;
pickWindow();
resetKeyboardAndMouseState();
}",0
YTUtil.java,/** * @throws InterruptedException * @throws IOException (MalformedURLException ...) */,"@NonNull
    public static byte[]
    loadYtDataUrl(String urlstr)
            throws InterruptedException, IOException {
        URL url = new URL(urlstr);
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream(4096)){
            NetReadTask.Builder<NetReadTask.Builder> nrb
                    = new NetReadTask.Builder<>(Util.createNetConn(url), baos);
            try {
                nrb.create().startSync();
            } catch (IOException | InterruptedException e) {
                throw e;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
            return baos.toByteArray();
        }
    }",1
ZrtpConfigure.java,"/** * Enables or disables SAS signature processing. * * For further details of trusted MitM processing refer to ZRTP * specification, chapter 7.2 * * @param yesNo *    If set to true then certificate processing is enabled. */","@SuppressWarnings(""unused"")
    public void setSasSignature(boolean yesNo) {
        enableSasSignature = yesNo;
    }",1
XMLNoteTransferHandler.java,"/** * Imports the data for XMLNote documents (application/xmlnote+xml, text/html, or text/plain) are * supported. If XMLNote is imported, the XMLNote Document that is imported may contain XMLNoteMarks. * These XMLNoteMarks will be reassigned new ids(), if XMLNoteDocument.getMarkIdReallocator() on the * document that the clipboard data is pasted into, is not null. */","public boolean importData(TransferHandler.TransferSupport support) {
		return importData((JComponent) support.getComponent(),support.getTransferable(),support);
	}",1
  USHibernateUtil.java,/** * A path to the Hibernate configuration file. */,"protected SessionFactory buildSessionFactory() {
    try {
        cz.filmtit.core.Configuration projectConfiguration = ConfigurationSingleton.conf();

        // Create the SessionFactory from core.cfg.xml
        Configuration hibernateConfiguration = new Configuration();

        hibernateConfiguration.configure(getConfigurationFile());

        hibernateConfiguration.setProperty(""hibernate.connection.username"", projectConfiguration.dbUser());
        hibernateConfiguration.setProperty(""hibernate.connection.password"", projectConfiguration.dbPassword());
        hibernateConfiguration.setProperty(""hibernate.connection.url"", projectConfiguration.dbConnector());

        serviceRegistry = new ServiceRegistryBuilder().applySettings(hibernateConfiguration.getProperties()).buildServiceRegistry();
        sessionFactory = hibernateConfiguration.buildSessionFactory(serviceRegistry);
        return sessionFactory;
    }
    catch (Throwable ex) {
        // Make sure you log the exception, as it might be swallowed
        logger.error(""Initial SessionFactory creation failed."" + ex);
        throw new ExceptionInInitializerError(ex);
    }
}",0
VolleyBall.java,"/** * Creates a default instance of the worker pool and calls {@link com.android.volley.RequestQueue#start()} on it. * * @param context A {@link android.content.Context} to use for creating the cache dir. * @param stack An {@link com.android.volley.toolbox.HttpStack} to use for the network, or null for default. * @return A started {@link com.android.volley.RequestQueue} instance. */","public static BallRequestQueue newRequestQueue(Context context, HttpStack stack) {
        File cacheDir = new File(context.getCacheDir(), DEFAULT_CACHE_DIR);

        String userAgent = ""volley/0"";
        try {
            String packageName = context.getPackageName();
            PackageInfo info = context.getPackageManager().getPackageInfo(packageName, 0);
            userAgent = packageName + ""/"" + info.versionCode;
        } catch (NameNotFoundException e) {
        }

        if (stack == null) {
            if (Build.VERSION.SDK_INT >= 9) {
                stack = new HurlStack();
            } else {
                // Prior to Gingerbread, HttpUrlConnection was unreliable.
                // See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html
                stack = new HttpClientStack(AndroidHttpClient.newInstance(userAgent));
            }
        }

        Network network = new BasicNetwork(stack);

        BallRequestQueue queue = new BallRequestQueue(new DiskBasedCache(cacheDir), network);
        queue.start();

        return queue;
    }",1
WrapperPlayServerNamedEntitySpawn.java,/** * Retrieve the player's entity object. * @param event - the packet event. * @return The player's entity. */,"public Entity getEntity(PacketEvent event) {
    	return getEntity(event.getPlayer().getWorld());
    }",1
XSLFGraphicFrame.java,"/** * Rotation angle in degrees * <p> * Positive angles are clockwise (i.e., towards the positive y axis); * negative angles are counter-clockwise (i.e., towards the negative y axis). * </p> * * @return rotation angle in degrees */","public double getRotation(){
    	return 0;
    }",1
AbstractExternalService.java,/** * Helper function for constructors. */,"protected static final <T extends CommonFieldsBase> T retrieveEntity(T parameterTableRelation, FormServiceCursor fsc, CallingContext cc) throws ODKDatastoreException {
Datastore ds = cc.getDatastore();
User user = cc.getCurrentUser();
return ds.getEntity(parameterTableRelation, fsc.getAuriService(), user);
}",0
AbstractAccess.java,/** * Other things */,"@Override
public boolean isAssignableFrom(final Class<?> clazz) {
    return this.getReflectedClass().isAssignableFrom(clazz);
}",0
XmlTreePullParser.java,/** * @param xpp *            the parser * @throws XmlPullParserException */,"protected void pullCommentNode(final XmlPullParser xpp)
			throws XmlPullParserException {
		onCreateNode(XmlNode.createComment(xpp.getText()));
	}",1
WorldGrid.java,/** * @return the tile height */,"public int getTileHeight() {
        return tileHeight;
    }",1
YeloBoardFragment.java,/** * api call for closing the wall * * @param wallId id of the wall u want to close */,"private void closeWall(String wallId) {
        RetroCallback retroCallback;
        retroCallback = new RetroCallback(this);
        retroCallback.setRequestId(HttpConstants.ApiResponseCodes.CLOSE_WALL);
        Bundle args = new Bundle();
        args.putString(AppConstants.Keys.WALL_ID, wallId);
        retroCallback.setExtras(args);
        retroCallbackList.add(retroCallback);
        CloseWallRequestModel closeWallRequestModel = new CloseWallRequestModel();
        closeWallRequestModel.setIs_solved(""1"");

        mYeloApi.closeWall(wallId, closeWallRequestModel, retroCallback);


    }",1
WFSPTRCAPS.java,/** * Specifies which guidance lights are available. * * @since 3.10 */,"public DWORD getGuidLights() {
		return guidLights;
	}",1
WiffReporter.java,/** * Releases resources used by this reporter */,"public void cleanup() {
    messages.clear();
  }",1
ZMQ.java,"/** * The 'ZMQ_HWM' option shall set the high water mark for the specified 'socket'. The high * water mark is a hard limit on the maximum number of outstanding messages 0MQ shall queue * in memory for any single peer that the specified 'socket' is communicating with. * * If this limit has been reached the socket shall enter an exceptional state and depending * on the socket type, 0MQ shall take appropriate action such as blocking or dropping sent * messages. Refer to the individual socket descriptions in the man page of zmq_socket[3] for * details on the exact action taken for each socket type. * * @param hwm *            the number of messages to queue. * @return true if the option was set, otherwise false. * @deprecated this option uses integer range, use {@link #setHWM(int)} instead */","@Deprecated
        public boolean setHWM(long hwm)
        {
            boolean set = true;
            set |= setSndHWM(hwm);
            set |= setRcvHWM(hwm);
            return set;
        }",1
WrapperPlayServerOpenWindow.java,"/** * Set a unique id number for the window to be displayed. Notchian server implementation is a counter, starting at 1.. * @param value - new value. */","public void setWindowId(byte value) {
        handle.getIntegers().write(0, (int) value);
    }",1
AbstractCalendarView.java,"/** * If start is less than min, it will * be ignored, and the pool will start * with min. */","public synchronized void setStart( int start )
throws ResourcePoolException
{ this.start = start; }",0
YangFileWizardPage.java,/** * @return the prefix */,"public String getPrefix() {
        return prefixTxt.getText();
    }",1
WaveReader.java,/** * Constructor; initializes WaveReader to read from given file * * @param path  path to input file * @param name  name of input file */,"public WaveReader(String path, String name) {
        this.mInFile = new File(path + File.separator + name);
    }",1
WBSType.java,/** * Gets the value of the summaryActualValueByLaborUnits property. * * @return *     possible object is *     {@link Double } * */,"public Double getSummaryActualValueByLaborUnits()
   {
      return summaryActualValueByLaborUnits;
   }",1
WaveReader.java,/** * Get input file length * * @return length of file in seconds */,"public int getLength() {
        if (mSampleRate == 0 || mChannels == 0 || (mSampleBits + 7) / 8 == 0) {
            return 0;
        } else {
            return mDataSize / (mSampleRate * mChannels * ((mSampleBits + 7) / 8));
        }
    }",1
YandexSynthesiser.java,/** * Get speaker voice */,"public String getSpeaker() {
        return speaker;
    }",1
Win32Utils.java,/** * Determines the location of the AppData/Roaming folder */,"public static String determineAppDataDir()
    {
        String appDataDir = null;

        // Modified from http://stackoverflow.com/questions/5953149/detect-the-location-of-appdata-locallow-with-jna
        final PointerByReference ppszPath = new PointerByReference();

        int hResult = Shell32.INSTANCE.SHGetKnownFolderPath(
                Shell32.FOLDERID_RoamingAppData,
                Shell32.KF_FLAG_CREATE, null, ppszPath);

        if (Shell32.S_OK == hResult) {
            try {
                appDataDir = nullTerminatedToString(ppszPath);
            } finally {
                Ole32.INSTANCE.CoTaskMemFree(ppszPath.getValue());
            }
        } else {
            logger.log(Level.SEVERE, null, ""Could not determine local application data directory: "" + hResult);
        }

        return appDataDir;
    }",1
ZMQ.java,"/** * Retrieve the IPv6 option for the socket. * A value of true means IPv6 is enabled on the socket, * while false means the socket will use only IPv4. * When IPv6 is enabled the socket will connect to, * or accept connections from, both IPv4 and IPv6 hosts. * * @return the IPV6 configuration. * @see #setIPv6 (boolean) */","public boolean isIPv6()
        {
            return (Boolean) base.getSocketOptx(zmq.ZMQ.ZMQ_IPV6);
        }",1
WebSocketExtensionFactory.java,/** * Creates a new instance of WebSocketExtensionFactory. It uses the default {@link ClassLoader} to load * {@link WebSocketExtensionFactorySpi} objects that are registered using META-INF/services. * * @return WebSocketExtensionFactory */,"public static WebSocketExtensionFactory newInstance() {
        ServiceLoader<WebSocketExtensionFactorySpi> services = load(WebSocketExtensionFactorySpi.class);
        return newInstance(services);
    }",1
XFooterView.java,/** * normal status */,"public void normal() {
        mHintView.setVisibility(View.VISIBLE);
        mProgressBar.setVisibility(View.GONE);
    }",1
Wizard.java,/** * Finish */,"protected JPanel step6_setup()
{
    JTextArea introText = new JTextArea();
    introText.setLineWrap(true);
    introText.setWrapStyleWord(true);
    introText.setEditable(false);
    introText.setMargin(new Insets(10, 10, 10, 10));
    introText.setAutoscrolls(true);
    introText.setText(
        ""That's all.\n""
        + ""It allows you to get information on the the running ""
        + ""simulation.\n""
        + ""\n""
        + ""Click the button below to start the Global Inspector ""
        + ""and go to the next step.""
    );
    
    JScrollPane sclIntroText = new JScrollPane(introText);
                
    JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout(10, 10));
        panel.add(sclIntroText, BorderLayout.CENTER);
        
    return panel;
}",0
SurroundLoopVisitor.java,"/** * if data not null, it's the position in parent node (int) */","public Object visit(SimpleNode node, Object data) {

    if( treepathdepth >= firsttreepath.size() )
        return false;
    
    
    if (treepathdepth == firsttreepath.size()-1 ){
        int firstposition = firsttreepath.get(treepathdepth);
    
        
        ASTLOOP loop = new ASTLOOP(ATKScriptParserTreeConstants.JJTLOOP);

        loop.jjtAddChild(nbloop, 0);
        
        for (int i=0 ; i <= lasttreepathindex-firstposition ; i++){
            loop.jjtAddChild(node.jjtGetChild(firstposition), i+1);
            node.jjtRemoveChild(firstposition);
        }
        node.jjtInsertChild(loop, firstposition);
        return true;
        
        
    } else {
        //cross node depending the PathTree
                
        Node child = node.jjtGetChild( firsttreepath.get(treepathdepth));
        treepathdepth++;
        child.jjtAccept(this,null);
    }
    
    return  true;
}",0
WrapperPlayServerEntityTeleport.java,/** * Set the pitch of the current entity. * @param value - new pitch. */,"public void setPitch(float value) {
        handle.getBytes().write(1, (byte) (value * 256.0F / 360.0F));
    }",1
Zip4jUtil.java,/** * returns the length of the string in the input encoding * @param str * @param charset * @return int * @throws ZipException */,"public static int getEncodedStringLength(String str, String charset) throws ZipException {
		if (!isStringNotNullAndNotEmpty(str)) {
			throw new ZipException(""input string is null, cannot calculate encoded String length"");
		}
		
		if (!isStringNotNullAndNotEmpty(charset)) {
			throw new ZipException(""encoding is not defined, cannot calculate string length"");
		}
		
		ByteBuffer byteBuffer = null;
		
		try {
			if (charset.equals(InternalZipConstants.CHARSET_CP850)) {
				byteBuffer = ByteBuffer.wrap(str.getBytes(InternalZipConstants.CHARSET_CP850));
			} else if (charset.equals(InternalZipConstants.CHARSET_UTF8)) {
				byteBuffer = ByteBuffer.wrap(str.getBytes(InternalZipConstants.CHARSET_UTF8));
			} else {
				byteBuffer = ByteBuffer.wrap(str.getBytes(charset));
			}
		} catch (UnsupportedEncodingException e) {
			byteBuffer = ByteBuffer.wrap(str.getBytes());
		} catch (Exception e) {
			throw new ZipException(e);
		}
		
		return byteBuffer.limit();
	}",1
WebsiteChooserFragment.java,/** * Set the adapter data by copying the given data to a new object and removing already added website. * It will also sort the list by the most liked website first * * @param websites data to display */,"private void setAdapterData(List<Website> websites) {
        List<Website> websites1 = new ArrayList<>();
        websites1.addAll(websites);
        if (!websites1.isEmpty()) {
            if (!TextUtils.isEmpty(mMode) && !mMode.equals(BUNDLE_MODE_RESTORE)) {
                // We want to add some websites : remove duplicates or already added ones
                List<Website> savedWebsites = SpStorage.getWebsites(getActivity());

                // We cannot iterate on a list and remove item at the same time, need an array
                for (Website website : websites1.toArray(new Website[websites1.size()])) {
                    if (savedWebsites.contains(website)) {
                        websites1.remove(website);
                    }
                }
            }

            Collections.sort(websites1, new Comparator<Website>() {
                @Override
                public int compare(Website website, Website website2) {
                    if (website.like > website2.like) {
                        return -1;
                    } else if (website.like < website2.like) {
                        return 1;
                    }
                    return 0;
                }
            });

            mAdapter.setData(websites1);
        }
    }",1
ZrtpConfigure.java,/** * Returns the identifier of the symmetric cipher algorithm at the given * index. * * If the index does not point to a configured slot then the function * returns the value <code>EndSupportedSymCiphers</code>. */,"@SuppressWarnings(""unused"")
    public ZrtpConstants.SupportedSymCiphers getSymCipherAlgoAt(int index) {
        try {
            return symCiphers.getAlgoAt(index);
        } catch (IndexOutOfBoundsException e) {
            return null;
        }
    }",1
WebsitePage.java,/** * Validate inner data to prevent usage when using it */,"public void validate() {
        if(TextUtils.isEmpty(slug)){
            slug = ""local-"" + name;
        }
        if(content == null){
            content = new Content();
        }
    }",1
XSLFSlide.java,/** * Create a new slide */,"XSLFSlide() {
        super();
        _slide = prototype();
        setCommonSlideData(_slide.getCSld());
    }",1
VMTrackerImpl.java,/** * @param status * @return */,"private JobQueueStatus getQueueStatus(JobQueueStatus oldStatus, JobStatus jobSatatus) {
        try {
            return JobQueueStatus.valueOf(jobSatatus.name());
        } catch (Exception e) {
            LOG.error(""Error converting status from "" + jobSatatus);
        }
        return oldStatus;
    }",1
_AccountResource.java,"/** * DELETE  /account/sessions?series={series} -> invalidate an existing session. * * - You can only delete your own sessions, not any other user's session * - If you delete one of your existing sessions, and that you are currently logged in on that session, you will *   still be able to use that session, until you quit your browser: it does not work in real time (there is *   no API for that), it only removes the ""remember me"" cookie * - This is also true if you invalidate your current session: you will still be able to use it until you close *   your browser or that the session times out. But automatic login (the ""remember me"" cookie) will not work *   anymore. *   There is an API to invalidate the current session, but there is no API to check which session uses which *   cookie. */","@RequestMapping(value = ""/account/sessions/{series}"",
            method = RequestMethod.DELETE)
    @Timed
    public void invalidateSession(@PathVariable String series) throws UnsupportedEncodingException {
        String decodedSeries = URLDecoder.decode(series, ""UTF-8"");<% if (javaVersion == '8') { %>
        userRepository.findOneByLogin(SecurityUtils.getCurrentLogin()).ifPresent(u -> {
            persistentTokenRepository.findByUser(u).stream()
                .filter(persistentToken -> StringUtils.equals(persistentToken.getSeries(), decodedSeries))
                .findAny().ifPresent(t -> persistentTokenRepository.delete(decodedSeries));
        });<% } else { %>
        User user = userRepository.findOneByLogin(SecurityUtils.getCurrentLogin());
        List<PersistentToken> persistentTokens = persistentTokenRepository.findByUser(user);
        for (PersistentToken persistentToken : persistentTokens) {
            if (StringUtils.equals(persistentToken.getSeries(), decodedSeries)) {
                persistentTokenRepository.delete(decodedSeries);
            }
        }<% } %>",1
Wakelock.java,/** * @return the wakeType */,"public int getWakeType() {
		return m_wakeType;
	}",1
WBSMilestoneType.java,/** * Sets the value of the lastUpdateDate property. * * @param value *     allowed object is *     {@link String } * */,"public void setLastUpdateDate(Date value)
   {
      this.lastUpdateDate = value;
   }",1
XSLFSheet.java,"/** * @return theme (shared styles) associated with this theme. *  By default returns <code>null</code> which means that this sheet is theme-less. *  Sheets that support the notion of themes (slides, masters, layouts, etc.) should override this *  method and return the corresponding package part. */","XSLFTheme getTheme(){
    	return null;
    }",1
AbstractArrayState.java,/** * May return null if array has been collected. */,"final public Object getArray() {
    Object l = array.get();
    if (l == null) {
        Yikes.yikes(""Getting array of AbstractArrayState after array has been gc'd."");
    }
    return l;
}",0
ZrtpPacketRelayAck.java,/** * Constructor for ErrorAck message initialized with received data. * * @param data received from the network. */,"@SuppressWarnings(""unused"")
    public ZrtpPacketRelayAck(final byte[] data) {
        super(data);
    }",1
WebSocketChannel.java,/** * The number of bytes queued to be sent */,"public int getBufferedAmount() {
        return this.bufferedAmount;
    }",1
WrapperPlayServerNamedSoundEffect.java,/** * Set the z coordinate of the effect. * <p> * Note that the value is rounded of to the nearest 1/8. * @param value - new value. */,"public void setEffectPositionZ(double value) {
        handle.getIntegers().write(2, (int) (value * 8.0));
    }",1
WebResourcesMainPropertyPage.java,/** * Web resources Main page for project properties. * */,"public class WebResourcesMainPropertyPage extends PropertyPage implements
		IWorkbenchPropertyPage {

	public WebResourcesMainPropertyPage() {
	}

	protected Control createContents(Composite parent) {
		Composite composite = new Composite(parent, SWT.NONE);
		composite.setLayoutData(new GridData(4, 4, true, true));
		composite.setLayout(new GridLayout());
		return composite;
	}

}",1
XmlFeedConsumerTest.java,"/** * Rooms has an inline feed Employees and Rooms has Inline entry Buildings * E.g: Rooms?$expand=nr_Employees,nr_Building * @throws Exception */","@Test
  public void roomsFeedWithRoomInlineEmployeesInlineBuildings() throws Exception {
    InputStream stream = getFileAsStream(""Rooms_InlineEmployees_InlineBuildings.xml"");
    assertNotNull(stream);
    FeedCallback callback = new FeedCallback();

    EntityProviderReadProperties readProperties = EntityProviderReadProperties.init()
        .mergeSemantic(false).callback(callback).build();

    ODataFeed feed =
        EntityProvider.readFeed(""application/atom+xml"", MockFacade.getMockEdm().getDefaultEntityContainer()
            .getEntitySet(
                ""Rooms""), stream, readProperties);
    assertNotNull(feed);
    assertEquals(2, feed.getEntries().size());

    Map<String, Object> inlineEntries = callback.getNavigationProperties();
    getExpandedData(inlineEntries, feed);
    for (ODataEntry entry : feed.getEntries()) {
      assertEquals(6, entry.getProperties().size());
      for (ODataEntry employeeEntry : ((ODataFeed)entry.getProperties().get(""nr_Employees"")).getEntries()) {
        assertEquals(9, employeeEntry.getProperties().size());
      }
      assertEquals(3, ((ODataEntry)entry.getProperties().get(""nr_Building"")).getProperties().size());
    }
  }",1
XMLFieldLiteralString.java,"/** * *                 Configuration to compare the string value of a field * * * <p>Java class for XMLFieldLiteralString complex type. * * <p>The following schema fragment specifies the expected content contained within this class. * * <pre> * &lt;complexType name=""XMLFieldLiteralString""&gt; *   &lt;complexContent&gt; *     &lt;extension base=""{}XMLFieldLiteralBase""&gt; *       &lt;attribute name=""value"" type=""{http://www.w3.org/2001/XMLSchema}string"" /&gt; *     &lt;/extension&gt; *   &lt;/complexContent&gt; * &lt;/complexType&gt; * </pre> * * */","@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""XMLFieldLiteralString"")
public class XMLFieldLiteralString
    extends XMLFieldLiteralBase
{

    @XmlAttribute(name = ""value"")
    protected String value;

    /**
     * Gets the value of the value property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setValue(String value) {
        this.value = value;
    }

}",1
Waterfall.java,/** * Execute the waterfall. * * @param callback          Callback for the task * @return */,"public Future execute (CompletionCallback <Object> callback)
  {
    return this.execute (null, callback);
  }",1
WrappedIterator.java,"/** * If the delegate changed since the iterator was created, the iterator is no * longer valid. */","void validateIterator()
   {
      collection.refreshIfEmpty();
      if (collection.delegate != originalDelegate)
      {
         throw new ConcurrentModificationException();
      }
   }",1
WordListOpenHelper.java,"/** * Called when a database needs to be upgraded. The most basic version of this method drops * the tables, and then recreates them. All data is lost, which is why for a production app, * you want to back up your data first. If this method fails, changes are rolled back. * * @param db * @param oldVersion * @param newVersion */","@Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        Log.w(WordListOpenHelper.class.getName(),
                ""Upgrading database from version "" + oldVersion + "" to ""
                        + newVersion + "", which will destroy all old data"");
        db.execSQL(""DROP TABLE IF EXISTS "" + WORD_LIST_TABLE);
        onCreate(db);
    }",1
WrapperPlayServerStatistics.java,/** * Set every statistic and associated integer value to send to the player. * @param changes - the changed map of statistics and data. */,"public void setStatistics(Map<WrappedStatistic, Integer> changes) {
        handle.getStatisticMaps().write(0, changes);
    }",1
WavefrontStrings.java,/** * Convert a name to a name that wavefront will accept. * * Wavefront documentation specifies a metric consists of the characters * [-a-zA-Z_0-9.] Any disallowed characters are replaced with underscores. */,"public static final String name(String name) {
        return name
                .toLowerCase(Locale.ROOT)
                .replaceAll(""[^-a-zA-Z_0-9.]"", ""_"");
    }",1
XmlBeanFactory.java,"/** * Creates a new object of the specified type configured by parsing the * provided XML.<br/> * The underlying XmlBean will start at the root of the XML and will access * private fields as needed. * @param is The InputStream containing the XML document to configure the object * @param type The class to create a new object instance * @return A new object configured by the XML * @see XmlBean#configure(java.io.InputStream, java.lang.Object) */","static public <E> E create(InputStream is, Class<E> type) throws XmlBeanException, IOException, SAXException, InstantiationException, IllegalAccessException {
        Object obj = type.newInstance();
        configure(is, obj);
        return (E)obj;
    }",1
WBSType.java,/** * Sets the value of the summaryActualNonLaborUnits property. * * @param value *     allowed object is *     {@link Double } * */,"public void setSummaryActualNonLaborUnits(Double value)
   {
      this.summaryActualNonLaborUnits = value;
   }",1
ParallelTest.java,/** * a proxy than can host up to 5 tests at the same time. */,"@BeforeClass
public static void prepareReqRequest() {

Map<String, Object> config = new HashMap<String, Object>();
app1.put(APP, ""app1"");
app1.put(MAX_INSTANCES, 5);

app2.put(APP, ""app2"");
app2.put(MAX_INSTANCES, 1);

config.put(REMOTE_HOST, ""http://machine1:4444"");
config.put(MAX_SESSION, 5);

req = new RegistrationRequest();
req.addDesiredCapability(app1);
req.addDesiredCapability(app2);
req.setConfiguration(config);
}",0
ZRTCPTransformer.java,/** * @param srtcpOut the srtcpOut to set */,"public void setSrtcpOut(PacketTransformer srtcpOut) {
        this.srtcpOut = srtcpOut;
    }",1
WorldGrid.java,/** * Initialize * * @param width      the width of the world * @param height     the height of the world * @param tileWidth  the width of the tiles * @param tileHeight the height of the tiles. */,"public WorldGrid(int width, int height, int tileWidth, int tileHeight) {
        this.tileWidth = tileWidth;
        this.tileHeight = tileHeight;

        this.width = width;
        this.height = height;

        worldGrid = generateGrid();

    }",1
WXSwipeLayout.java,/** * Callback on loadmore finish */,"public void finishPullLoad() {
    if (mCurrentAction == LOAD_MORE) {
      resetFootView(footerView == null ? 0 : footerView.getMeasuredHeight());
    }
  }",1
VMInstanceRequest.java,/** * Set the job id * * @param data *            The job id */,"public void setLoggingProfile(String data) {
        this.items.put(TankConstants.KEY_LOGGING_PROFILE, data);
    }",1
WiffPacket.java,/** * @return the destination port */,"public int getDestinationPort() {
    int offset = getEthHeaderLength() + getIpHeaderLength() + 2;

    byte[] bytes = new byte[2];
    buffer.clear().position(offset).limit(offset + 2);
    buffer.get(bytes);

    return getUShortAsUInt(bytes);
  }",1
WBSType.java,/** * Sets the value of the summaryPerformancePercentCompleteByLaborUnits property. * * @param value *     allowed object is *     {@link Double } * */,"public void setSummaryPerformancePercentCompleteByLaborUnits(Double value)
   {
      this.summaryPerformancePercentCompleteByLaborUnits = value;
   }",1
WidgetHistogramXaxisType.java,/** * Gets the axis maximum value. This should only be called if isAxisCentered() returns false and isMaximumAutomatic() returns false. * * @return    The maximum value for this axis. */,"public float getMaximumValue() {
		
		return Float.parseFloat(maxTextfield.getText());
		
	}",1
ZrtpSrtpSecrets.java,/** * @return the initKeyLen */,"public int getInitKeyLen() {
            return initKeyLen;
        }",1
XmlUtilities.java,"/** * Applies the user parameters, but does not modify the original (as they come from the XML file) * matchers * * @param staticXpathBodyMatchers * @return * @throws InvalidMatcherException */","private List<XPathBodyMatcher>
            applyUserParameters( List<XPathBodyMatcher> staticXpathBodyMatchers ) throws InvalidMatcherException {

        List<XPathBodyMatcher> actualXpathBodyMatchers = new ArrayList<XPathBodyMatcher>();

        for( XPathBodyMatcher matcher : staticXpathBodyMatchers ) {
            String matcherValue = matcher.getMatcherValue();
            String attributeName = ( String ) ThreadContext.getAttribute( matcherValue );
            if( attributeName != null ) {
                matcherValue = ThreadContext.getAttribute( attributeName ).toString();
            }

            actualXpathBodyMatchers.add( new XPathBodyMatcher( matcher.getXpath(), matcherValue,
                                                               matcher.getMatchMode() ) );
        }

        return actualXpathBodyMatchers;
    }",1
WebAppType.java,/** * Gets the value of the id property. * * @return *     possible object is *     {@link java.lang.String } * */,"public java.lang.String getId() {
        return id;
    }",1
WeatherNotificationSettings.java,/** * Check if the user only wants to download when on wifi * * @param context * @return true if the user want measurements from the nearest station */,"public static boolean getDownloadOnlyOnWifi(Context context) {
		final SharedPreferences settings = context.getSharedPreferences(
				PREFS_NAME, 0);
		return settings.getBoolean(PREFS_DOWNLOAD_ONLY_ON_WIFI_KEY,
				PREFS_DOWNLOAD_ONLY_ON_WIFI_DEFAULT);

	}",1
WoolModule.java,/** * Checks if this wool has been captured when a block is placed. * * @param event The event. */,"@EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
  public void onBlockPlace(BlockPlaceEvent event) {
    for (Wool wool : getWools(Cardinal.getMatch(event.getWorld()))) {
      if (wool.isComplete()) {
        continue;
      }
      Player player = event.getPlayer();
      Block block = event.getBlock();
      if (wool.getMonument().contains(block.getLocation().toVector()) && block.getType().equals(Material.WOOL)
          && ((org.bukkit.material.Wool) block.getState().getMaterialData()).getColor().equals(wool.getColor())) {
        wool.setComplete(true);

        if (wool.isShow()) {
          //fixme: unchecked cast
          Match match = Cardinal.getMatch(event.getWorld());
          Team team = (Team) match.getPlayingContainer(player);
          Channels.getGlobalChannel(match.getMatchThread()).sendMessage(
              new LocalizedComponentBuilder(ChatConstant.getConstant(""objective.wool.completed""),
                  Components.getName(player).build(),
                  wool.getComponent(),
                  new TeamComponent(team)).color(ChatColor.GRAY).build());
        }
        Bukkit.getPluginManager().callEvent(new ObjectiveCompleteEvent(wool, player));
      }
    }
  }",1
WebScenarioObject.java,/** * Sets new http_proxy. * * @param http_proxy New value of http_proxy. */,"public void setHttp_proxy(String http_proxy) {
        this.http_proxy = http_proxy;
    }",1
WrapperPlayServerSpawnEntityLiving.java,/** * Set the data watcher. * @param value - new value. */,"public void setMetadata(WrappedDataWatcher value) {
        handle.getDataWatcherModifier().write(0, value);
    }",1
HumanTaskCoordinationTest.java,/** * Setup */,"private void setupTestClients() throws Exception {
    init();
    requestSender.waitForProcessDeployment(backEndUrl + HumanTaskTestConstants.CLAIM_APPROVAL_PROCESS_SERVICE);
    requestSender.waitForProcessDeployment(backEndUrl + HumanTaskTestConstants.CLAIM_SERVICE);
    log.info(""BPEL and Humantask services are up and running"");
    // Need to re-initialize since we have restarted the server
    bpelPackageManagementClient = new BpelPackageManagementClient(backEndUrl, sessionCookie);
    humanTaskPackageManagementClient = new HumanTaskPackageManagementClient(backEndUrl, sessionCookie);
    instanceManagementClient = new BpelInstanceManagementClient(backEndUrl, sessionCookie);
    log.info(""Server setting up completed ...!!!"");
    serverConfigurationManager = new ServerConfigurationManager(bpsServer);

    //initialize HT Client API for Clerk1 and manager1 user
    AutomationContext clerk1AutomationContext =
            new AutomationContext(""BPS"", ""bpsServerInstance0001"", FrameworkConstants.SUPER_TENANT_KEY,
                                  HumanTaskTestConstants.CLERK1_USER);
    LoginLogoutClient clerk1LoginLogoutClient = new LoginLogoutClient(clerk1AutomationContext);
    String clerk1SessionCookie = clerk1LoginLogoutClient.login();
    clerk1HumanTaskClientApiClient = new HumanTaskClientApiClient(backEndUrl, clerk1SessionCookie);

    AutomationContext manager1AutomationContext =
            new AutomationContext(""BPS"", ""bpsServerInstance0001"", FrameworkConstants.SUPER_TENANT_KEY,
                                  HumanTaskTestConstants.MANAGER1_USER);
    LoginLogoutClient manager1LoginLogoutClient = new LoginLogoutClient(manager1AutomationContext);
    String manager1SessionCookie = manager1LoginLogoutClient.login();
    manager1HumanTaskClientApiClient = new HumanTaskClientApiClient(backEndUrl, manager1SessionCookie);

}",0
VpnProfileDetailActivity.java,/** * Update the profile object with the data entered by the user */,"private void updateProfileData()
	{
		/* the name is optional, we default to the gateway if none is given */
		String name = mName.getText().toString().trim();
		String gateway = mGateway.getText().toString().trim();
		mProfile.setName(name.isEmpty() ? gateway : name);
		mProfile.setGateway(gateway);
		mProfile.setVpnType(mVpnType);
		if (mVpnType.has(VpnTypeFeature.USER_PASS))
		{
			mProfile.setUsername(mUsername.getText().toString().trim());
			String password = mPassword.getText().toString().trim();
			password = password.isEmpty() ? null : password;
			mProfile.setPassword(password);
		}
		if (mVpnType.has(VpnTypeFeature.CERTIFICATE))
		{
			mProfile.setUserCertificateAlias(mUserCertEntry.getAlias());
		}
		String certAlias = mCheckAuto.isChecked() ? null : mCertEntry.getAlias();
		mProfile.setCertificateAlias(certAlias);
	}",1
VoldPeers.java,/** * Wait for a task end. * * @param taskId */,"private final void waitTaskEnd(@Nonnull final UUID taskId, @Nonnull final DtxTaskApi dtxTaskApi) {

        // Wait for task end
        final DtxTaskFutureVoid future = new DtxTaskFutureVoid(taskId, dtxTaskApi);
        try {
            future.get();
        }",1
WebSocketController.java,"/** * Opens a websocket for the given user nation and their current home region, and the region they are viewing the regional controls page for. * * @param nation nation that is opening the websocket. * @param userRegion name of the region the user currently resides in. * @param adminRegion the name of the region that the user currently is looking at in the regional controls. * @param reconnect whether this is the first time opening the websocket, or a reconnection attempt. * * @return websocket */","public WebSocket<JsonNode> recruitmentAdmin(String nation, String userRegion, String adminRegion, boolean reconnect) {
		if (nation.isEmpty() || userRegion.isEmpty() || adminRegion.isEmpty()) return null;
		return new NationStatesWebSocket(this.getDatabase(), new RecruitmentAdministrationPage(adminRegion, getDatabase().getRegionId(adminRegion)), sanitizeName(nation), sanitizeName(userRegion), reconnect);
	}",1
WebScarabWrapper.java,/** * Add a plugin to the proxy. IMPORTANT: call this before the proxy is actually started. * * @param plugin *            The plugin to add. */,"public void addPlugin(ProxyPlugin plugin) {
		plugins.add(plugin);
	}",1
WBSType.java,/** * Gets the value of the summaryRemainingFinishDate property. * * @return *     possible object is *     {@link String } * */,"public Date getSummaryRemainingFinishDate()
   {
      return summaryRemainingFinishDate;
   }",1