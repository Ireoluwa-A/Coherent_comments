File,Comment,Code,Coherent
RayHandler.java,"""/** * Expert functionality */""","""public Texture getLightMapTexture() {
            return this.lightMap.frameBuffer.getColorBufferTexture();
    }""",0
YangEditor.java,"""/** * @return {@link Module} of the current editor input or <code>null</code> if editor input does * not contains appropriate {@link Module} * @throws YangModelException error during initialization of Module */""","""public Module getModule() throws YangModelException {
        IEditorInput input = getEditorInput();
        if (input == null) {
            return null;
        }

        if (input instanceof IFileEditorInput) {
            IFile file = ((IFileEditorInput) input).getFile();
            return YangCorePlugin.createYangFile(file).getModule();
        } else if (input instanceof JarEntryEditorInput) {
            JarEntryEditorInput jarInput = (JarEntryEditorInput) input;
            IStorage storage = jarInput.getStorage();
            if (storage instanceof YangJarFileEntryResource) {
                YangJarFileEntryResource jarEntry = (YangJarFileEntryResource) storage;
                return YangCorePlugin.createJarEntry(jarEntry.getPath(), jarEntry.getEntry()).getModule();
            } else if (storage instanceof JarEntryFile) {
                JarEntryFile jarEntry = (JarEntryFile) storage;
                return YangCorePlugin.createJarEntry(jarEntry.getPackageFragmentRoot().getPath(),
                        jarEntry.getFullPath().makeRelative().toString()).getModule();
            }
        }
        return null;
    }""",1
WfsIDCStatus.java,"""/** * @see #powerSaveRecoveryTime */""","""public void setPowerSaveRecoveryTime(final int powerSaveRecoveryTime) {
		this.powerSaveRecoveryTime.set(powerSaveRecoveryTime);
	}""",1
ResponseBody.java,"""/** * getBadRequestResult */""","""@JsonIgnore
public Result getBadRequestResult (
VangavException vangavException,
UUID requestId) throws Exception {

try {
  
  ResponseBodyError responseBodyError =
    new ResponseBodyError(vangavException, requestId);
  
  return Results.badRequest((String)responseBodyError.getContent() );
} catch (Exception e) {
  
  try {
    
    ResponseBodyError responseBodyError =
      new ResponseBodyError(vangavException);
    
    return Results.badRequest((String)responseBodyError.getContent() );
  } catch (Exception e2) {
    
    try {

      ResponseBodyError responseBodyError =
        new ResponseBodyError(requestId);
      
      return Results.badRequest((String)responseBodyError.getContent() );
    } catch (Exception e3) {

      ResponseBodyError responseBodyError =
        new ResponseBodyError();
      
      return Results.badRequest((String)responseBodyError.getContent() );
    }
  }
}
}""",0
WindowParam.java,"""/** * * set Y coordinate of the left upper point of the window * **/""","""public void setTopRightCornerY(int topRightCornerY) {
		this.topRightCornerY = topRightCornerY;
	}""",1
MasterServer.java,"""/** * Receive, from worker, ip and port for Socket connection */""","""private synchronized void processInfoForCopyLog(String info,String topicOfWorker){

    //parse message to get ip e port for logs
    String [] split=info.split("","");

    String iPaddress="""";
    String port="""";

    for(String x: split){
        if(x.contains(""ip"")) 
            iPaddress=x.split("":"")[1];
        if(x.contains(""portcopylog""))
            port=x.split("":"")[1];


    }
    Address address=new Address(iPaddress, port);
    workerListForCopyLogs.put(topicOfWorker, address);
}""",0
WrapperPlayServerBlockChange.java,"""/** * Retrieve block Z Coordinate. * @return The current Z */""","""public int getZ() {
        return handle.getIntegers().read(2);
    }""",1
XmlWriterUtilTest.java,"""/** * Test method for {@link org.codehaus.plexus.util.xml.XmlWriterUtil#writeComment(org.codehaus.plexus.util.xml.XMLWriter, java.lang.String)}. * * @throws Exception if any */""","""public void testWriteCommentXMLWriterString()
        throws Exception
    {
        XmlWriterUtil.writeComment( xmlWriter, ""hello"" );
        writer.close();
        StringBuffer sb = new StringBuffer();
        sb.append( ""<!-- hello                                                                  -->"" ).append( XmlWriterUtil.LS );
        assertEquals( output.toString(), sb.toString() );
        assertTrue( output.toString().length() == XmlWriterUtil.DEFAULT_COLUMN_LINE - 1 + XmlWriterUtil.LS.length() );

        tearDown();
        setUp();

        XmlWriterUtil.writeComment( xmlWriter,
                                    ""hellooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo"" );
        writer.close();
        sb = new StringBuffer();
        sb.append( ""<!-- hellooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo -->"" )
            .append( XmlWriterUtil.LS );
        assertEquals( output.toString(), sb.toString() );
        assertTrue( output.toString().length() >= XmlWriterUtil.DEFAULT_COLUMN_LINE );

        tearDown();
        setUp();

        XmlWriterUtil.writeComment( xmlWriter, ""hello\nworld"" );
        writer.close();
        sb = new StringBuffer();
        sb.append( ""<!-- hello                                                                  -->"" ).append( XmlWriterUtil.LS );
        sb.append( ""<!-- world                                                                  -->"" ).append( XmlWriterUtil.LS );
        assertEquals( output.toString(), sb.toString() );
        assertTrue( output.toString().length() == 2 * ( XmlWriterUtil.DEFAULT_COLUMN_LINE - 1 + XmlWriterUtil.LS.length() ) );
    }""",1
WBSType.java,"""/** * Gets the value of the summaryAccountingVarianceByLaborUnits property. * * @return *     possible object is *     {@link Double } * */""","""public Double getSummaryAccountingVarianceByLaborUnits()
   {
      return summaryAccountingVarianceByLaborUnits;
   }""",1
WrapperPlayServerWorldParticles.java,"""/** * Retrieve the name of the particle to create. A list can be found here. * @return The current Particle name */""","""public String getParticleName() {
        return handle.getStrings().read(0);
    }""",1
WebScenarioObject.java,"""/** * Gets variables. * * @return Value of variables. */""","""public String getVariables() {
        return variables;
    }""",1
WTauNafPreCompInfo.java,"""/** * Constructor for <code>WTauNafPreCompInfo</code> * @param preComp Array holding the precomputed <code>ECPoint.F2m</code>s * used for the WTNAF multiplication in <code> * {@link org.bouncycastle.math.ec.multiplier.WTauNafMultiplier.multiply() * WTauNafMultiplier.multiply()}</code>. */""","""WTauNafPreCompInfo(ECPoint.F2m[] preComp)
    {
        this.preComp = preComp;
    }""",1
WrapperPlayClientWindowClick.java,"""/** * Set the item that was clicked in the inventory. * @param value - new value. */""","""public void setClickedItem(ItemStack value) {
        handle.getItemModifier().write(0, value);
    }""",1
XmppMuc.java,"""/** * Checks if a room for the specific number * * @param number * @param contact * @return true if the room exists and gtalksms is in it, otherwise false */""","""public boolean roomExists(String number) {
    	return mRooms.containsKey(number);
    }""",1
Wakelock.java,"""/** * returns the values of the data */""","""public double[] getValues()
	{
		double[] retVal = new double[2];
		retVal[0] = getDuration();
		return retVal;
	}""",1
WBSType.java,"""/** * Sets the value of the totalSpendingPlan property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setTotalSpendingPlan(Double value)
   {
      this.totalSpendingPlan = value;
   }""",1
WBSType.java,"""/** * Gets the value of the summaryInProgressActivityCount property. * * @return *     possible object is *     {@link Integer } * */""","""public Integer getSummaryInProgressActivityCount()
   {
      return summaryInProgressActivityCount;
   }""",1
WebRtcChannel.java,"""/** * Type of channel in WebRTC communications (audio, video, or both). * * @author Boni Garcia (bgarcia@gsyc.es) * @since 4.2.3 */""","""public enum WebRtcChannel {
	VIDEO_ONLY, AUDIO_ONLY, AUDIO_AND_VIDEO;

	public boolean getAudio() {
		switch (this) {
		case VIDEO_ONLY:
			return false;
		case AUDIO_ONLY:
			return true;
		case AUDIO_AND_VIDEO:
		default:
			return true;
		}
	}

	public boolean getVideo() {
		switch (this) {
		case VIDEO_ONLY:
			return true;
		case AUDIO_ONLY:
			return false;
		case AUDIO_AND_VIDEO:
		default:
			return true;
		}
	}
}""",1
WriteGeoLocationNfcAsync.java,"""/** * Instantiates a new WriteGeoLocationNfcAsync. * * @param asyncUiCallback the async ui callback * @param asyncOperationCallback the async operation callback * @param nfcWriteUtility the nfc write utility */""","""public WriteGeoLocationNfcAsync(@Nullable AsyncUiCallback asyncUiCallback, @NotNull AsyncOperationCallback asyncOperationCallback, @NotNull NfcWriteUtility nfcWriteUtility) {
        super(asyncUiCallback, asyncOperationCallback, nfcWriteUtility);
    }

    @Override
    public void executeWriteOperation(final Intent intent, final Object... args) {
        if (checkDoubleArguments(args.getClass()) || args.length != 2 || intent == null) {
            throw new UnsupportedOperationException(""Invalid arguments"");
        }

        setAsyncOperationCallback(new AsyncOperationCallback() {
            @Override
            public boolean performWrite(NfcWriteUtility writeUtility) throws ReadOnlyTagException, InsufficientCapacityException, TagNotPresentException, FormatException {
                return writeUtility.writeGeolocationToTagFromIntent((Double) args[0], (Double) args[1], intent);
            }
        });

        super.executeWriteOperation();
    }""",1
WebRequestTrackingTelemetryModule.java,"""/** * Initializes the telemetry module with the given telemetry configuration. * @param configuration The telemetry configuration. */""","""@Override
    public void initialize(TelemetryConfiguration configuration) {
        try {
            telemetryClient = new TelemetryClient(configuration);
            isInitialized = true;
        } catch (Exception e) {
            InternalLogger.INSTANCE.error(
                    ""Failed to initialize telemetry module "" + this.getClass().getSimpleName() + "". Exception: %s."", e.getMessage());
        }
    }""",1
WrapperPlayServerNamedEntitySpawn.java,"""/** * Set the yaw of the spawned entity. * @param value - new yaw. */""","""public void setYaw(float value) {
        handle.getBytes().write(0, (byte) (value * 256.0F / 360.0F));
    }""",1
WBSType.java,"""/** * Gets the value of the summaryCostPercentComplete property. * * @return *     possible object is *     {@link Double } * */""","""public Double getSummaryCostPercentComplete()
   {
      return summaryCostPercentComplete;
   }""",1
WidgetPreferenceActivity.java,"""/** * Send an intent to update the widget. */""","""private void updateWidget(boolean online) {
        Intent updateIntent = new Intent(android.appwidget.AppWidgetManager.ACTION_APPWIDGET_UPDATE,
                Uri.EMPTY, this, Widget.class);
        updateIntent.putExtra(Widget.LOAD_DATA_KEY, online);
        sendBroadcast(updateIntent);
    }""",1
WebScenarioObject.java,"""/** * Gets status. * * @return Value of status. */""","""public Integer getStatus() {
        return status;
    }""",1
WorldChunkManagerTofu.java,"""/** * Returns a list of rainfall values for the specified blocks. Args: listToReuse, x, z, width, length. */""","""@Override
    public float[] getRainfall(float[] par1ArrayOfFloat, int par2, int par3, int par4, int par5)
    {
        IntCache.resetIntCache();

        if (par1ArrayOfFloat == null || par1ArrayOfFloat.length < par4 * par5)
        {
            par1ArrayOfFloat = new float[par4 * par5];
        }

        int[] aint = this.genBiomes.getInts(par2, par3, par4, par5);

        for (int i1 = 0; i1 < par4 * par5; ++i1)
        {
            float f = BiomeGenTofuBase.getBiome(aint[i1]).getIntRainfall() / 65536.0F;

            if (f > 1.0F)
            {
                f = 1.0F;
            }

            par1ArrayOfFloat[i1] = f;
        }

        return par1ArrayOfFloat;
    }""",1
WebResourceName.java,"""/** * Gets the value of the id property. * * @return *     possible object is *     {@link String } * */""","""public String getId() {
        return id;
    }""",1
ZMQ.java,"""/** * Sets the SOCKS5 proxy address that shall be used by the socket for the TCP connection(s). * Does not support SOCKS5 authentication. * If the endpoints are domain names instead of addresses they shall not be resolved * and they shall be forwarded unchanged to the SOCKS proxy service * in the client connection request message (address type 0x03 domain name). * * @param proxy * @return true if the option was set, otherwise false. * @see #getSocksProxy() */""","""public boolean setSocksProxy(byte[] proxy)
        {
            return setSocketOpt(zmq.ZMQ.ZMQ_SOCKS_PROXY, proxy);
        }""",1
XmlBeanFactory.java,"""/** * Configures the object by parsing the provided XML.<br/> * The underlying XmlBean will start at the root of the XML and will access * private fields as needed. * @param xml The XML String containing the document to configure the object * @param obj The object instance to configure * @see XmlBean#configure(java.lang.String, java.lang.Object) */""","""static public void configure(String xml, Object obj) throws XmlBeanException, IOException, SAXException {
        createXmlBean().configure(xml, obj);
    }""",1
XmlManipulationUtils.java,"""/** * Traverse submission looking for OpenRosa metadata tag (with or without * namespace). * * @param parent * @return */""","""private static Element findMetaTag(Element parent, String rootUri) {
    for (int i = 0; i < parent.getChildCount(); ++i) {
      if (parent.getType(i) == Node.ELEMENT) {
        Element child = parent.getElement(i);
        String cnUri = child.getNamespace();
        String cnName = child.getName();
        if (cnName.equals(OPEN_ROSA_METADATA_TAG)
            && (cnUri == null || 
                cnUri.equals(EMPTY_STRING) || 
                cnUri.equals(rootUri) ||
                cnUri.equalsIgnoreCase(OPEN_ROSA_NAMESPACE) || 
                cnUri.equalsIgnoreCase(OPEN_ROSA_NAMESPACE_SLASH) || 
                cnUri.equalsIgnoreCase(OPEN_ROSA_NAMESPACE_PRELIM))) {
          return child;
        } else {
          Element descendent = findMetaTag(child, rootUri);
          if (descendent != null)
            return descendent;
        }
      }
    }
    return null;
  }""",1
WrapperPlayServerLogin.java,"""/** * Retrieve the player's entity object. * @param event - the packet event. * @return The player's entity. */""","""public Entity getEntity(PacketEvent event) {
    	return getEntity(event.getPlayer().getWorld());
    }""",1
WrapperPlayServerSpawnEntityWeather.java,"""/** * Set the y coordinate of the thunderbolt. * @param value - new value. */""","""public void setY(double value) {
        handle.getIntegers().write(2, (int) (value * 32.0D));
    }""",1
XMLStringUtil.java,"""/** * Remove or replace XML invalid chars from input. * * @param input * @param replace *            Whether or not to replace invalid characters by replacement * @param replacement *            The character to replace any invalid character found * @return The String that is cleaned from the invalid in XML characters. * @see #isXMLValid(char) */""","""public static String getXMLValidString(final String input,
            final boolean replace, final char replacement) {
        if (input == null) {
            return null;
        }

        if ("""".equals(input)) {
            return """";
        }

        StringBuilder sb = new StringBuilder();
        for (char c : input.toCharArray()) {
            if (XMLStringUtil.isXMLValid(c)) {
                sb.append(c);
            } else if (replace) {
                sb.append(replacement);
            }
        }
        return sb.toString();
    }""",1
WrapperPlayServerEntityEffect.java,"""/** * Retrieve duration in ticks. * @return The current Duration */""","""public short getDuration() {
        return handle.getShorts().read(0);
    }""",1
WeekView.java,"""/** * Get the ""now"" line color. * @return The color of the ""now"" line. */""","""public int getNowLineColor() {
        return mNowLineColor;
    }""",1
WrapperPlayServerNamedEntitySpawn.java,"""/** * Set the x axis of the position. * @param value - new value. */""","""public void setX(double value) {
        handle.getIntegers().write(1, (int) Math.floor(value * 32.0D));
    }""",1
SMConfigurationAdapterImpl.java,"""/** * One of the above constants */""","""public float getEstimateType() {
        return limitEstimateType;
    }""",0
VoltageDecryptor.java,"""/** * @param dataIn * @param format * @return returns java.lang.String * @throws FaultResponse */""","""@Override
    public String accessFormattedData(String dataIn, String format) throws FaultResponse {
        return service.accessFormattedData(dataIn, format, IDENTITY, """", com.kunai.keyvault.crypto.voltage.vibesimple.AuthMethod.SHARED_SECRET, AUTHINFO);
    }""",1
WorkerManager.java,"""/** * Performs a deep copy on <i>other</i>. */""","""public remove_worker_result(remove_worker_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.is_set_ne()) {
        this.ne = new NebuException(other.ne);
      }
    }""",1
WrapperPlayServerNamedEntitySpawn.java,"""/** * Retrieve the z axis of the new position. * <p> * Note that the coordinate is rounded off to the nearest 1/32 of a meter. * @return The current z */""","""public double getZ() {
        return handle.getIntegers().read(3) / 32.0D;
    }""",1
MockBrowserLauncher.java,"""/** *  This browser configuration is not supported for IE */""","""public void launchRemoteSession(String url) {
browser = new Thread(this); // Thread safety reviewed
browser.setName(""mockbrowser"");
if (null != url) {
  browser.start();
} else {
  log.info(""launching a mock unresponsive browser"");
}
}""",0
ZMQ.java,"""/** * The 'ZMQ_MCAST_LOOP' option shall control whether data sent via multicast transports * using the specified 'socket' can also be received by the sending host via loopback. A * value of zero disables the loopback functionality, while the default value of 1 enables * the loopback functionality. Leaving multicast loopback enabled when it is not required * can have a negative impact on performance. Where possible, disable 'ZMQ_MCAST_LOOP' in * production environments. * * @param multicastLoop */""","""@Deprecated
        public boolean setMulticastLoop(boolean multicastLoop)
        {
            throw new UnsupportedOperationException();
        }""",1
XFooterView.java,"""/** * Set footer view state * * @see #STATE_LOADING * @see #STATE_NORMAL * @see #STATE_READY * * @param state */""","""public void setState(int state) {
        if (state == mState) return;

        if (state == STATE_LOADING) {
//            mHintImage.clearAnimation();
//            mHintImage.setVisibility(View.INVISIBLE);
            mProgressBar.setVisibility(View.VISIBLE);
            mHintView.setVisibility(View.INVISIBLE);
        } else {
            mHintView.setVisibility(View.VISIBLE);
//            mHintImage.setVisibility(View.VISIBLE);
            mProgressBar.setVisibility(View.INVISIBLE);
        }

        switch (state) {
            case STATE_NORMAL:
//                if (mState == STATE_READY) {
//                    mHintImage.startAnimation(mRotateDownAnim);
//                }
//                if (mState == STATE_LOADING) {
//                    mHintImage.clearAnimation();
//                }
                mHintView.setText(R.string.footer_hint_load_normal);
                break;

            case STATE_READY:
                if (mState != STATE_READY) {
//                    mHintImage.clearAnimation();
//                    mHintImage.startAnimation(mRotateUpAnim);
                    mHintView.setText(R.string.footer_hint_load_ready);
                }
                break;

            case STATE_LOADING:
                break;
        }

        mState = state;
    }""",1
WBSType.java,"""/** * Sets the value of the summaryEstimateAtCompletionByLaborUnits property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryEstimateAtCompletionByLaborUnits(Double value)
   {
      this.summaryEstimateAtCompletionByLaborUnits = value;
   }""",1
XfaFile.java,"""/** * Constructs an XFA file from an OutputStreamResource. * This resource can be an XML file or a node in a RUPS application. * @param	resource	the XFA resource * @throws IOException * @throws DocumentException */""","""public XfaFile(OutputStreamResource resource) throws IOException, DocumentException {
		// Is there a way to avoid loading everything in memory?
		// Can we somehow get the XML from the PDF as an InputSource, Reader or InputStream?
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		resource.writeTo(baos);
		ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
		SAXReader reader = new SAXReader();
		xfaDocument = reader.read(bais);
	}""",1
Tool.java,"""/** If the tool needs to panic/exit, how do we do that? */""","""public void panic() {
    throw new Error(""ANTLR panic"");
}""",0
WrapperPlayServerAnimation.java,"""/** * Retrieve the player ID. * @return The current EID */""","""public int getEntityID() {
        return handle.getIntegers().read(0);
    }""",1
WrapperPlayClientSteerVehicle.java,"""/** * Retrieve positive forward. * @return The current Forward */""","""public float getForward() {
        return handle.getFloat().read(1);
    }""",1
WorldGrid.java,"""/** * This can return null if the grid has not been generated. * * @return a list of rectangles that represent the grid. */""","""public List<Rectangle> getWorldGrid() {
        return worldGrid;
    }""",1
WBSCategoryType.java,"""/** * Gets the value of the createUser property. * * @return *     possible object is *     {@link String } * */""","""public String getCreateUser()
   {
      return createUser;
   }""",1
CreateGraph.java,"""/** * A new tcpdump line has been received */""","""public void newTcpDumpLine(String line) {
    Date theDate = NetworkAnalysisUtils.extractTcpdumpLineDate(line);
    String url = NetworkAnalysisUtils.extractTcpdumpLineUrl(line);
    if (theDate != null && url != null) {
        GraphMarker urlMarker = mapAction.get(""URL"");
        if (urlMarker != null) {
            urlMarker.addEvent(""Type"", url, theDate, theDate);
            // Set marker to hidden if urlMarkers checkbox is not checked
            if (urlMarkersDisplayed == false) {
                urlMarker.removeMarker();
            }
            mapAction.put(""URL"", urlMarker);
        }
    }
}""",0
SkelSprite.java,"""/*  It's ugly to snoop inside a wrapping */""","""private Rendered animwrap(GLState.Wrapping wrap) {
if(!(wrap.r instanceof FastMesh))
    return(wrap);
FastMesh m = (FastMesh)wrap.r;
for(MeshAnim.Anim anim : manims) {
    if(anim.desc().animp(m)) {
    Rendered ret = wrap.st().apply(new MorphedMesh(m, mmorph));
    if(bonedb)
        ret = morphed.apply(ret);
    return(ret);
    }
}
Rendered ret;
if(PoseMorph.boned(m)) {
    String bnm = PoseMorph.boneidp(m);
    if(bnm == null) {
    ret = wrap.st().apply(new MorphedMesh(m, pmorph));
    if(bonedb)
        ret = morphed.apply(ret);
    } else {
    ret = pose.bonetrans2(skel.bones.get(bnm).idx).apply(wrap);
    if(bonedb)
        ret = rigid.apply(ret);
    }
} else {
    ret = wrap;
    if(bonedb)
    ret = unboned.apply(ret);
}
return(ret);
}""",0
WebSocketHandshakeObject.java,"""/** * @param name the name to set */""","""public void setName(String name) {
        this.name = name;
    }""",1
ZettelkastenViewUtil.java,"""/** * This method opens files or folders (attchments). Typically used when * opening attachments. First, this method tries to open a file using the * {@code Desktop} api from Java. If this fails, on Windows and Linux the * {@code Runtime}. * * @param path The path to the file that should be opened * @param settings a reference to the Settings class * @return {@code true} if opening the file was successfull, {@code false} * otherwise. */""","""public static boolean openFilePath(String path, Settings settings) {
        File linuxpath = new File(path);
        // on linux, check whether we have white spaces
        if (linuxpath.toString().contains("" "")) {
            // if so, replace them with ascii-number
            linuxpath = new File(""file://"" + linuxpath.toString().replaceAll(Pattern.quote("" ""), Matcher.quoteReplacement(""%20"")));
        }
        // log file path, in case we need to debug user info
        Constants.zknlogger.log(Level.INFO, ""Verwendeter Anhangspfad: {0}"", linuxpath);
        // check whether desktop-api is supported
        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.OPEN)) {
            try {
                // open file
                Desktop.getDesktop().open(new File(path));
            } catch (IOException ex) {
                // log error
                Constants.zknlogger.log(Level.WARNING, ex.getLocalizedMessage());
                return false;
            }
        } else {
            try {
                // on windows, use Runtime with rundll32
                if (PlatformUtil.isWindows()) {
                    Runtime.getRuntime().exec(""rundll32 SHELL32.DLL,ShellExec_RunDLL \"""" + path + ""\"""");
                } else if (PlatformUtil.isLinux()) {
                    // on linux, use xdg-open
                    Runtime.getRuntime().exec(""xdg-open "" + linuxpath.getPath());
                }
            } catch (IOException ex) {
                Constants.zknlogger.log(Level.WARNING, ex.getLocalizedMessage());
                return false;
            }
        }
        return true;
    }""",1
WrapperPlayServerMapChunk.java,"""/** * Retrieve size of compressed chunk data. * @return The current Compressed size */""","""public int getCompressedSize() {
        return handle.getIntegers().read(4);
    }""",1
WindowManagerService.java,"""/** * Check wallpaper for visiblity change and notify window if so. * @param wallpaper The wallpaper to test and notify. * @param visible Current visibility. */""","""void dispatchWallpaperVisibility(final WindowState wallpaper, final boolean visible) {
        if (wallpaper.mWallpaperVisible != visible) {
            wallpaper.mWallpaperVisible = visible;
            try {
                if (DEBUG_VISIBILITY || DEBUG_WALLPAPER_LIGHT) Slog.v(TAG,
                        ""Updating vis of wallpaper "" + wallpaper
                        + "": "" + visible + "" from:\n"" + Debug.getCallers(4, ""  ""));
                wallpaper.mClient.dispatchAppVisibility(visible);
            } catch (RemoteException e) {
            }
        }
    }""",1
XlsDetectorTest.java,"""/** * * @throws Exception */""","""@Test(expected = IllegalArgumentException.class)
    public void should_not_read_null_input_stream() throws Exception {
        xlsDetector.detect(null);
    }""",1
WidgetBean.java,"""/** * We create the {@link JpaWidgetDao} */""","""@PostConstruct
    @SuppressWarnings(""unused"")
    private void initialize() {
        widgetDao = new JpaWidgetDao(em);
    }""",1
WordApiTest.java,"""/** * Test of getAudioData method, of class WordApi. */""","""@Test
    public void testGetAudioData() throws Exception {
        System.out.println(""getAudioData"");

        List<AudioFileMetadata> audio = WordApi.audio(""a"");
        assertNotNull(audio);
        assertTrue(audio.size() >= 1);

        byte[] result = WordApi.getAudioData(audio.get(0));

        assertNotNull(result);
        assertTrue(result.length > 0);
        System.out.println(""Got "" + result.length + "" bytes of data."");

        audio.get(0).setFileUrl(""http://api.wordnik.com/v4/audioFile.mp3/d7e9fd4ec39829cb61169850a4e8a9e3a8b15d7b730afbeac7c77ee558f73bfc"");
        try {
            result = WordApi.getAudioData(audio.get(0));
        } catch (Exception e) {
            assertNotNull(e);
            System.out.println(""This is testing a failure. You should see the headers in the excemption."");
            System.out.println(e);
        }
    }""",1
WBSType.java,"""/** * Gets the value of the summaryScheduleVarianceByLaborUnits property. * * @return *     possible object is *     {@link Double } * */""","""public Double getSummaryScheduleVarianceByLaborUnits()
   {
      return summaryScheduleVarianceByLaborUnits;
   }""",1
WFSPTRCAPS.java,"""/** * Specifies on which sides of the media this device can print as one of the * following values: * * @since 3.20 */""","""public PTRPrintSides getPrintSides() {
		return XfsConstants.valueOf(printSides, PTRPrintSides.class);
	}""",1
VPNPayload.java,"""/** * An MDM payload for VPN. * * @author Sylvain Pedneault */""","""class VPNPayload extends MobileConfigPayload {
  public static final String VPNTYPE_L2TP = ""L2TP"";
  public static final String VPNTYPE_PPTP = ""PPTP"";
  public static final String VPNTYPE_IP_SEC = ""IPSec"";

  public VPNPayload(final int payloadVersion, final String payloadOrganization, final String payloadIdentifier, final String payloadDisplayName, final String userDefinedName, final boolean overridePrimary, final String vpnType) throws JSONException {
    super(payloadVersion, ""com.apple.vpn.managed"", payloadOrganization, payloadIdentifier, payloadDisplayName);
    final JSONObject payload = getPayload();
    payload.put(""UserDefinedName"", userDefinedName);
    payload.put(""OverridePrimary"", overridePrimary);
    payload.put(""VPNType"", vpnType);
  }

  public JSONObject addPPP() throws JSONException {
    final JSONObject object = new JSONObject();
    getPayload().put(""PPP"", object);
    return object;
  }

  public JSONObject addIPSec() throws JSONException {
    final JSONObject object = new JSONObject();
    getPayload().put(""IPSec"", object);
    return object;
  }
}""",1
WFSPTRSTATUS.java,"""/** * Specifies the status of the printer imaging lamp as one of the following * values: {@link PTRLamp} * * @since 2.0 */""","""public PTRLamp getLamp() {
		return XfsConstants.valueOf(lamp, PTRLamp.class);
	}""",1
WidgetUtils.java,"""/** * * @param widget which parent shell should be found * @return shell which contains widget or null */""","""public static Shell getShell(Control widget) {
		while (widget != null) {
			if (widget instanceof Shell) {
				return ((Shell)widget);
			} else {
				widget = ((Control)widget).getParent();
			}
		}
		return null;
	}""",1
XhtmlMarkup.java,"""/** * List of <code>Xhtml</code> markups. * <br/> * Xhtml uses all {@link javax.swing.text.html.HTML.Tag} and {@link javax.swing.text.html.HTML.Attribute} * as markups. * * @author <a href=""mailto:vincent.siveton@gmail.com"">Vincent Siveton</a> * @version $Id$ * @since 1.0 */""","""@SuppressWarnings( ""checkstyle:interfaceistype"" )
public interface XhtmlMarkup
    extends HtmlMarkup
{
    /** XHTML namespace: ""http://www.w3.org/1999/xhtml"" */
    String XHTML_NAMESPACE = ""http://www.w3.org/1999/xhtml"";

    /** XHTML 1.0 transitional public id: ""-//W3C//DTD XHTML 1.0 Transitional//EN"" */
    String XHTML_TRANSITIONAL_PUBLIC_ID = ""-//W3C//DTD XHTML 1.0 Transitional//EN"";

    /** XHTML 1.0 transitional system id: ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"" */
    String XHTML_TRANSITIONAL_SYSTEM_ID = ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"";
}""",1
AbstractCalendarView.java,"""/* * Commands X */""","""@Override
public Object visit(Rule_cmdXorInt rule) {
    return generateCmdFromRules(rule.rules);
}""",0
ZrtpCodes.java,"""/** * Error codes according to the ZRTP specification chapter 6.9 * * GNU ZRTP uses these error codes in two ways: to fill the appropriate * field ing the ZRTP Error packet and as sub-code in * ZrtpUserCallback#showMessage(). GNU ZRTP uses these error codes also * to report received Error packtes, in this case the sub-codes are their * negative values. * * The enumeration member comments are copied from the ZRTP specification. */""","""enum ZrtpErrorCodes {
        MalformedPacket(0x10),          //!< Malformed packet (CRC OK, but wrong structure)
        CriticalSWError(0x20),          //!< Critical software error
        UnsuppZRTPVersion(0x30),        //!< Unsupported ZRTP version
        HelloCompMismatch(0x40),        //!< Hello components mismatch
        UnsuppHashType(0x51),           //!< Hash type not supported
        UnsuppCiphertype(0x52),         //!< Cipher type not supported
        UnsuppPKExchange(0x53),         //!< Public key exchange not supported
        UnsuppSRTPAuthTag(0x54),        //!< SRTP auth. tag not supported
        UnsuppSASScheme(0x55),          //!< SAS scheme not supported
        NoSharedSecret(0x56),           //!< No shared secret available, DH mode required
        DHErrorWrongPV(0x61),           //!< DH Error: bad pvi or pvr ( == 1, 0, or p-1)
        DHErrorWrongHVI(0x62),          //!< DH Error: hvi != hashed data
        SASuntrustedMiTM(0x63),         //!< Received relayed SAS from untrusted MiTM
        ConfirmHMACWrong(0x70),         //!< Auth. Error: Bad Confirm pkt HMAC
        NonceReused(0x80),              //!< Nonce reuse
        EqualZIDHello(0x90),            //!< Equal ZIDs in Hello
        GoClearNotAllowed(0x100),       //!< GoClear packet received, but not allowed
        IgnorePacket(0x7fffffff);
        
        public int value;
        ZrtpErrorCodes(int val) {
            value = val;
        }

    }""",1
WrapperPlayServerScoreboardTeam.java,"""/** * Set the current packet {@link Modes}. * <p> * This determines whether or not team information is added or removed. * @param value - new value. */""","""public void setPacketMode(byte value) {
        handle.getIntegers().write(0, (int) value);
    }""",1
AbstractCalendarView.java,"""/* This is not a feature, but a known limitation */""","""public void testSetInputFollowedByACancelInJOptionPaneReturnsTheInputValue() throws Exception {
WindowInterceptor
  .init(new Trigger() {
    public void run() throws Exception {
      assertEquals(""Result"", JOptionPane.showInputDialog(""Message""));
    }
  })
  .process(BasicHandler.init()
    .setText(""Result"")
    .triggerButtonClick(""Cancel""))
  .run();
}""",0
WikiLoader.java,"""/** * Visit a block and returns the list of substitutions that must be performed in the visited block. The returned list * can be safely modified. * * @param block the block to visit * @param currentSyntaxId the current syntax is * @return the substitution list */""","""private List<Substitution> visit(Block block, String currentSyntaxId)
   {
      return visit(block, 0, currentSyntaxId);
   }""",1
GooglePlaces.java,"""/** * Searching places * */""","""public PlacesList search(double latitude, double longitude, double radius, String types)
        throws Exception {

    this._latitude = latitude;
    this._longitude = longitude;
    this._radius = radius;

    try {

        HttpRequestFactory httpRequestFactory = createRequestFactory(HTTP_TRANSPORT);
        HttpRequest request = httpRequestFactory
                .buildGetRequest(new GenericUrl(PLACES_SEARCH_URL));
        request.getUrl().put(""key"", API_KEY);
        request.getUrl().put(""location"", _latitude + "","" + _longitude);
        request.getUrl().put(""radius"", _radius); // in meters
        request.getUrl().put(""sensor"", ""false"");
        if(types != null)
            request.getUrl().put(""types"", types);

        PlacesList list = request.execute().parseAs(PlacesList.class);
        // Check log cat for places response status
        Log.d(""Places Status"", """" + list.status);
        return list;

    } catch (HttpResponseException e) {
        Log.e(""Error:"", e.getMessage());
        return null;
    }

}""",0
WXDomStatement.java,"""/** * Create a command object for notifying {@link WXRenderManager} that the process of update * given view is finished, and put the command object in the queue. */""","""void updateFinish() {
    if (mDestroy) {
      return;
    }
    mNormalTasks.add(new IWXRenderTask() {

      @Override
      public void execute() {
        mWXRenderManager.updateFinish(mInstanceId);
      }

      @Override
      public String toString() {
        return ""updateFinish"";
      }
    });

    mDirty = true;
    WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(mInstanceId);
    if (instance != null) {
      instance.commitUTStab(WXConst.DOM_MODULE, WXErrorCode.WX_SUCCESS);
    }
  }""",1
ZMQ.java,"""/** * Get the PollItem associated with an index. * * @param index *            the desired index. * @return the PollItem associated with that index (or null). */""","""public PollItem getItem(int index)
        {
            if (index < 0 || index >= this.next) {
                return null;
            }
            return this.items[index];
        }""",1
WorldConfiguration.java,"""/** * Get an Array of String of spawnable golems * * @return golem array */""","""public String[] getSpawnableGolems() {
        return cfg.getStringArray(""natural-golems"", golems);
    }""",1
WrappedConciseBitmap.java,"""/** * Create a bitmap wrappign the given bitmap * * @param conciseSet bitmap to be wrapped */""","""public WrappedConciseBitmap(ConciseSet conciseSet)
  {
    this.bitmap = conciseSet;
  }""",1
WidgetProviderService.java,"""/** * Gets the object that represents the metadata about the widget for * the viewer in the current context * @param viewer the current logged in user * @param context the context identifier for where the widget is displayed (e.g. regionwidget id) * @param widget the default widget * @return valid widget */""","""Widget getWidget(User viewer, String context, Widget widget);
}""",1
VoidElementTest.java,"""/** * Voids of size 2 to 9 should be all header, no body */""","""@Test
  public void test2To9()
  {
    for (int i = 2; i < 10; ++i)
    {
      VoidElement voidz = new VoidElement(i);
      MockWriter mw = new MockWriter();
      voidz.writeElement(mw);
      Assert.assertEquals(i, mw.getBuff().position());
    }
  }""",1
WLocate.java,"""/** * Internal class, used for storing the position information */""","""class wloc_position
{
   wloc_position()
   {   
   }
   
   double lat,lon;
   short  quality;
   short  ccode;
}""",1
NatPMPImpl.java,"""/** * Azureus framework methods  **/""","""public void addPortMapping( 
                boolean tcp,        // false -> UDP
                int port,
                String description ) 
                throws UPnPException 
{
    try{
        /* use public port for internal port */
        natDevice.addPortMapping( tcp, port, port );
    } catch( Exception e) {
        throw( new UPnPException( ""addPortMapping failed"", e ));
    }
    
    synchronized( this ){
        /* Find and remove old mapping, if any */
        Iterator it = mappings.iterator();
        while( it.hasNext() ) {
            portMapping m = (portMapping)it.next();
                
            if (m.getExternalPort() == port && m.isTCP() == tcp) 
                it.remove() ;
        }
        /* add new port to list */   
        mappings.add(   new portMapping( port, tcp, 
                        natDevice.getLocalAddress().getHostAddress(), 
                        description) );
    }
}""",0
XMLList.java,"""/** * * @param name */""","""void setLocalName(String localName)
    {
        if (length() == 1)
        {
            getXmlFromAnnotation(0).setLocalName(localName);
        }
        else
        {
            throw ScriptRuntime.typeError(""The setLocalName method works only on lists containing one item"");
        }
    }""",1
WFSPINCAPS.java,"""/** * {@link #emvImportSchemes} */""","""public Pointer getEMVImportSchemes() {
		return emvImportSchemes;
	}""",1
ZMQ.java,"""/** * The 'ZMQ_UNSUBSCRIBE' option shall remove an existing message filter on a 'ZMQ_SUB' * socket. The filter specified must match an existing filter previously established with * the 'ZMQ_SUBSCRIBE' option. If the socket has several instances of the same filter * attached the 'ZMQ_UNSUBSCRIBE' option shall remove only one instance, leaving the rest in * place and functional. * * @param topic * @return true if the option was set, otherwise false */""","""public boolean unsubscribe(byte[] topic)
        {
            return setSocketOpt(zmq.ZMQ.ZMQ_UNSUBSCRIBE, topic);
        }""",1
ZlibExpanderProvider.java,"""/** * Create a provider which caps the number of expanded bytes that can be produced when the * compressed stream is parsed. * * @param limit max number of bytes allowed in an expanded stream. */""","""public ZlibExpanderProvider(long limit)
    {
        this.limit = limit;
    }""",1
VvrManager.java,"""/** * Constructs information for vvr manager task. * * @param operation *            The complete operation used to construct the task info */""","""public final DtxTaskInfo createTaskInfo(final RemoteOperation operation) {
        VvrManagerTaskOperation op;
        VvrManagerTargetType targetType;

        final String source = VvrRemoteUtils.fromUuid(operation.getSource()).toString();
        final String targetId = VvrRemoteUtils.fromUuid(operation.getUuid()).toString();

        switch (operation.getType()) {
        case VVR:
            targetType = VvrManagerTargetType.VVR;
            break;
        default:
            throw new AssertionError(""type="" + operation.getType());
        }

        switch (operation.getOp()) {
        case CREATE:
            op = VvrManagerTaskOperation.CREATE;
            break;
        case DELETE:
            op = VvrManagerTaskOperation.DELETE;
            break;
        case START:
            op = VvrManagerTaskOperation.START;
            break;
        case STOP:
            op = VvrManagerTaskOperation.STOP;
            break;
        default:
            throw new AssertionError(""type="" + operation.getOp());
        }
        return new VvrManagerTaskInfo(source, op, targetType, targetId);
    }""",1
WFSIDCCAPS.java,"""/** * @see #compound */""","""public void setCompound(final boolean compound) {
		this.compound.set(compound);
	}""",1
WiffPacket.java,"""/** * @return true if the packet's SYN flag is raised */""","""public boolean isSyn() {
    int offset = getEthHeaderLength() + getIpHeaderLength() + 13;

    byte[] bytes = new byte[1];
    buffer.clear().position(offset).limit(offset + 1);
    buffer.get(bytes);

    return (bytes[0] & 0x02) == 0x02;
  }""",1
ZMQ.java,"""/** * Sets the domain for ZAP (ZMQ RFC 27) authentication. * For NULL security (the default on all tcp:// connections), * ZAP authentication only happens if you set a non-empty domain. * For PLAIN and CURVE security, ZAP requests are always made, if there is a ZAP handler present. * See http://rfc.zeromq.org/spec:27 for more details. * * @param domain the domain of ZAP authentication * @return true if the option was set * @see #getZapDomain() */""","""public boolean setZapDomain(String domain)
        {
            return setSocketOpt(zmq.ZMQ.ZMQ_ZAP_DOMAIN, domain);
        }""",1
VMJobRequest.java,"""/** * * @return */""","""public String getReportingMode() {
        return (String) this.items.get(TankConstants.KEY_REPORTING_MODE);
    }""",1
VMInstanceRequest.java,"""/** * * @return */""","""public boolean getReuseStoppedInstance() {
        Boolean result = (Boolean) this.items.get(TankConstants.KEY_REUSE_STOPPED_INSTANCE);
        return result != null ? result : false;
    }""",1
WBSType.java,"""/** * Sets the value of the summaryBaselineNonLaborUnits property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryBaselineNonLaborUnits(Double value)
   {
      this.summaryBaselineNonLaborUnits = value;
   }""",1
WBSType.java,"""/** * Sets the value of the summaryCostVarianceByLaborUnits property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryCostVarianceByLaborUnits(Double value)
   {
      this.summaryCostVarianceByLaborUnits = value;
   }""",1
WFSPTRCAPS.java,"""/** * Specifies whether the logical device is part of a compound physical * device. */""","""public boolean isCompound() {
		return compound.booleanValue();
	}""",1
AggregateUI.java,"""/* * HELP STUFF */""","""private void changeHelpPanel(SubTabs subMenu) {
// change root item
rootItem.setText(subMenu + "" Help"");
rootItem.removeItems();
SubTabInterface subTabObj = getSubTab(subMenu);
if (subTabObj != null) {
  HelpSliderConsts[] helpVals = subTabObj.getHelpSliderContent();
  if (helpVals != null) {
    for (int i = 0; i < helpVals.length; i++) {
      TreeItem helpItem = new TreeItem(SafeHtmlUtils.fromString(helpVals[i].getTitle()));
      TreeItem content = new TreeItem(SafeHtmlUtils.fromString(helpVals[i].getContent()));
      helpItem.setState(false);
      helpItem.addItem(content);
      rootItem.addItem(helpItem);
    }
  }
}
rootItem.setState(true);
resize();
}""",0
WorkerManager.java,"""/** * Find the _Fields constant that matches fieldId, throwing an exception * if it is not found. */""","""public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");
        return fields;
      }""",1
WrapperPlayServerNamedEntitySpawn.java,"""/** * Retrieve the UUID of the player. * @return The UUID, or NULL if not set. */""","""public String getPlayerUUID() {
    	WrappedGameProfile profile = getProfile();
        return profile != null ? profile.getId() : null;
    }""",1
RocketMod.java,"""/** Uses player interact here to also prevent opening of inventories. * * @param evt */""","""@SubscribeEvent
public void interactRightClickBlock(PlayerInteractEvent.RightClickBlock evt)
{
    if (evt.getHand() == EnumHand.OFF_HAND || evt.getWorld().isRemote || evt.getItemStack() == null
            || !evt.getEntityPlayer().isSneaking() || evt.getItemStack().getItem() != Items.STICK)
        return;

    ItemStack stack = evt.getItemStack();
    String[] arr = stack.getDisplayName().split("","");
    BlockPos min = null;
    BlockPos max = null;
    if (arr.length == 6)
    {
        try
        {
            min = new BlockPos(Integer.parseInt(arr[0]), Integer.parseInt(arr[1]), Integer.parseInt(arr[2]));
            max = new BlockPos(Integer.parseInt(arr[3]), Integer.parseInt(arr[4]), Integer.parseInt(arr[5]));
        }
        catch (NumberFormatException e)
        {
            evt.getEntityPlayer().addChatMessage(new TextComponentString(""no good name.""));
        }
    }
    if (min != null && max != null)
    {
        IBlockEntity.BlockEntityFormer.makeBlockEntity(evt.getWorld(), min, max, evt.getPos(), EntityRocket.class);
    }
}""",0
ZrtpPacketPingAck.java,"""/** * Set the remote endpoint hash. * */""","""public final void setRemoteEpHash(final byte[] data) {
        System.arraycopy(data, 0, packetBuffer, REMOTE_EP_OFFSET, 2*ZRTP_WORD_SIZE);
    }""",1
WBSType.java,"""/** * Sets the value of the earnedValueComputeType property. * * @param value *     allowed object is *     {@link String } * */""","""public void setEarnedValueComputeType(String value)
   {
      this.earnedValueComputeType = value;
   }""",1
WikiUtil.java,"""/** * @return System administrator notification web page URL */""","""public static String getSystemAdminTokenLink() {
		return new StringBuffer(WebUtil.getHostAppURL()).append(SharedConstants.URL_PAGE).append(""#"")
		.append(GwtUtils.getCPageToken(SharedConstants.CPAGE_SYSADMIN_NOTIFY)).toString();
	}""",1
ZrtpConfigure.java,"""/** * Returns Iterable for the symmetric ciphers. * * Use this in for-each loop such as * <code>for (ZrtpConstants.SupportedHashes sh: config.symCiphers()) {</code> * * @return The symCiphers Iterable. */""","""@SuppressWarnings(""unused"")
    public Iterable<ZrtpConstants.SupportedSymCiphers> symCiphers() {
        return symCiphers;
    }""",1
WorkerMessages.java,"""/** * @param workerString * @return */""","""public static String getNullRemoteWorkerStatusChangedMessage(
			String workerString) {
		return ""The remote worker "" + workerString +
				"" changed its status to ALLOCATED FOR BROKER, but it did not provide a worker reference. "" +
				""This status change was ignored."";
	}""",1
YangIndenter.java,"""/** * Returns <code>true</code> if the next token received after calling <code>nextToken</code> is * either an equal sign or an array designator ('[]'). * * @return <code>true</code> if the next elements look like the start of an array definition */""","""private boolean looksLikeArrayInitializerIntro() {
        nextToken();
        if (fToken == Symbols.TokenEQUAL || skipBrackets()) {
            return true;
        }
        return false;
    }""",1
WFSPINCAPS.java,"""/** * {@link #powerSaveControl} */""","""public boolean isPowerSaveControl() {
		return powerSaveControl.booleanValue();
	}""",1
Grammar.java,"""/** A label on a rule is useless if the rule has no return value, no *  tree or template output, and it is not referenced in an action. */""","""protected void removeUselessLabels(Map ruleToElementLabelPairMap) {
    if ( ruleToElementLabelPairMap==null ) {
        return;
    }
    Collection labels = ruleToElementLabelPairMap.values();
    List kill = new ArrayList();
    for (Iterator labelit = labels.iterator(); labelit.hasNext();) {
        LabelElementPair pair = (LabelElementPair) labelit.next();
        Rule refdRule = getRule(pair.elementRef.getText());
        if ( refdRule!=null && !refdRule.getHasReturnValue() && !pair.actionReferencesLabel ) {
            //System.out.println(pair.label.getText()+"" is useless"");
            kill.add(pair.label.getText());
        }
    }
    for (int i = 0; i < kill.size(); i++) {
        String labelToKill = (String) kill.get(i);
        // System.out.println(""kill ""+labelToKill);
        ruleToElementLabelPairMap.remove(labelToKill);
    }
}""",0
TreatmentCategorizationWizardPresentationTest.java,"""/* * Regression test for bug #566 */""","""@Test
public void testDoNotReuseDefaultDose() {
    TreatmentCategorizationWizardPresentation pm1 = new TreatmentCategorizationWizardPresentation(TreatmentCategorization.createDefault(), d_domain);
    TreatmentCategorizationWizardPresentation pm2 = new TreatmentCategorizationWizardPresentation(TreatmentCategorization.createDefault(), d_domain);
    pm1.getDoseUnit().setScaleModifier(ScaleModifier.MEGA);
    assertFalse(pm2.getDoseUnit().equals(pm1.getDoseUnit()));
}""",0
XOMTreeBuilder.java,"""/** * @see nu.validator.htmlparser.impl.TreeBuilder#createElement(String, *      java.lang.String, org.xml.sax.Attributes, java.lang.Object) */""","""@Override
    protected Element createElement(String ns, String name,
            HtmlAttributes attributes, Element form, Element intendedParent) throws SAXException {
        try {
            Element rv = nodeFactory.makeElement(name,
 ns, form);
            for (int i = 0; i < attributes.getLength(); i++) {
                rv.addAttribute(nodeFactory.makeAttribute(
                        attributes.getLocalName(i),
                        attributes.getURINoBoundsCheck(i),
                        attributes.getValueNoBoundsCheck(i),
                        attributes.getTypeNoBoundsCheck(i) == ""ID"" ? Attribute.Type.ID
                                : Attribute.Type.CDATA));
            }
            return rv;
        } catch (XMLException e) {
            fatal(e);
            throw new RuntimeException(""Unreachable"");
        }
    }""",1
XmlTreeSaxParser.java,"""/** * @see org.xml.sax.ContentHandler#processingInstruction(java.lang.String, *      java.lang.String) */""","""public void processingInstruction(String target, String data)
			throws SAXException {
		// XmlNode pi = XmlNode.createProcessingInstruction(target, data);

	}""",1
WoTMessageList.java,"""/** * Get the USK URI of a message list with the given identity and index. * @param identity * @param index * @return */""","""public static FreenetURI generateURI(WoTIdentity identity, long index) {
		return assembleURI(identity.getRequestURI(), index);
	}""",1
WrapperPlayServerBlockAction.java,"""/** * Retrieve block Z Coordinate. * @return The current Z */""","""public int getZ() {
        return handle.getIntegers().read(2);
    }""",1
WorkspacesApi.java,"""/** * Get Workspace File * Retrieves a workspace file (the binary). * @param accountId The external account number (int) or account ID Guid. * @param workspaceId Specifies the workspace ID GUID. * @param folderId The ID of the folder being accessed. * @param fileId Specifies the room file ID GUID. * @return void */""","""public void getWorkspaceFile(String accountId, String workspaceId, String folderId, String fileId) throws ApiException {
  getWorkspaceFile(accountId, workspaceId, folderId, fileId, null);
  }""",1
Grammar.java,"""/** If someone does PLUS='+' in the parser, must make sure we get *  ""PLUS : '+' */""","""public void defineLexerRuleForAliasedStringLiteral(String tokenID,
                                                   String literal,
                                                   int tokenType)
{
    if ( getGrammarIsRoot() ) { // don't build lexers for delegates
        //System.out.println(""defineLexerRuleForAliasedStringLiteral: ""+literal+"" ""+tokenType);
        lexerGrammarST.setAttribute(""literals.{ruleName,type,literal}"",
                                    tokenID,
                                    Utils.integer(tokenType),
                                    literal);
    }
    // track this lexer rule's name
    composite.lexerRules.add(tokenID);
}""",0
WeekView.java,"""/** * Refreshes the view and loads the events again. */""","""public void notifyDatasetChanged(){
        mRefreshEvents = true;
        invalidate();
    }""",1
WrapperPlayServerScoreboardTeam.java,"""/** * Retrieve whether or not friendly fire is enabled. * <p> * A team must be created or updated. * @return The current Friendly fire */""","""public byte getFriendlyFire() {
        return handle.getIntegers().read(1).byteValue();
    }""",1
WordApiTest.java,"""/** * Test of pronunciations method, of class WordApi. */""","""@Test
    public void testPronunciations_5args() throws Exception {
        System.out.println(""pronunciations"");
        String word = ""a"";
        boolean useCanonical = false;

        // NOTE: This dictionary seems to return several results,
        //       where others may return nothing. This may change
        //       in the future.
        SourceDictionary sourceDictionary = SourceDictionary.cmu;
        TypeFormat typeFormat = null;
        int limit = 1;

        List<Pronunciation> result = WordApi.pronunciations(word, useCanonical, sourceDictionary, typeFormat, limit);

        assertNotNull(result);
        System.out.println(result.toString());
        assertEquals(1, result.size());

        sourceDictionary = null;
        typeFormat = TypeFormat.gcide_diacritical;
        result = WordApi.pronunciations(word, useCanonical, sourceDictionary, typeFormat, limit);

        assertNotNull(result);
        System.out.println(result.toString());
        assertEquals(1, result.size());
    }""",1
WebConnectionBuilder.java,"""/** * Adds a non encoded HTTP request header * * @param key   - The header key * @param value - The header value */""","""public WebConnectionBuilder addHeader(String key, String value) {
        this.headers.put(key, value);
        return this;
    }""",1
ZipArchiveOutputStream.java,"""/** * {@inheritDoc} * @throws ClassCastException if entry is not an instance of ZipArchiveEntry */""","""public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {
        if (finished) {
            throw new IOException(""Stream has already been finished"");
        }

        if (entry != null) {
            closeArchiveEntry();
        }

        entry = ((ZipArchiveEntry) archiveEntry);
        entries.add(entry);

        if (entry.getMethod() == -1) { // not specified
            entry.setMethod(method);
        }

        if (entry.getTime() == -1) { // not specified
            entry.setTime(System.currentTimeMillis());
        }

        // Size/CRC not required if RandomAccessFile is used
        if (entry.getMethod() == STORED && raf == null) {
            if (entry.getSize() == -1) {
                throw new ZipException(""uncompressed size is required for""
                                       + "" STORED method when not writing to a""
                                       + "" file"");
            }
            if (entry.getCrc() == -1) {
                throw new ZipException(""crc checksum is required for STORED""
                                       + "" method when not writing to a file"");
            }
            entry.setCompressedSize(entry.getSize());
        }

        if (entry.getMethod() == DEFLATED && hasCompressionLevelChanged) {
            def.setLevel(level);
            hasCompressionLevelChanged = false;
        }
        writeLocalFileHeader(entry);
    }""",1
WorldProviderCaves.java,"""/** * Return Vec3D with biome specific fog color */""","""@SideOnly(Side.CLIENT)
	@Override
	public Vec3 getFogColor(float par1, float par2)
	{
        float f2 = 1F;//MathHelper.cos(1F * (float)Math.PI * 2.0F) * 2.0F + 0.5F;

        if (f2 < 0.0F)
        {
            f2 = 0.0F;
        }

        if (f2 > 1.0F)
        {
            f2 = 1.0F;
        }

        float f3 = 0.7529412F;
        float f4 = 0.84705883F;
        float f5 = 1.0F;
        f3 *= f2 * 0.94F + 0.06F;
        f4 *= f2 * 0.94F + 0.06F;
        f5 *= f2 * 0.91F + 0.09F;
        return Vec3.createVectorHelper((double)f3, (double)f4, (double)f5);
	}""",1
AbstractStage.java,"""/** * May not be invoked outside of IPipe implementations */""","""@SuppressWarnings(""PMD.DataflowAnomalyAnalysis"")
public void onSignal(final ISignal signal, final InputPort<?> inputPort) {
    Class<? extends ISignal> signalClass = signal.getClass();

    Set<InputPort<?>> signalReceivedInputPorts;
    if (signalMap.containsKey(signalClass)) {
        signalReceivedInputPorts = signalMap.get(signalClass);
    } else {
        signalReceivedInputPorts = new HashSet<InputPort<?>>();
        signalMap.put(signalClass, signalReceivedInputPorts);
    }

    if (!signalReceivedInputPorts.add(inputPort)) {
        this.logger.warn(""Received more than one signal - "" + signal + "" - from input port: "" + inputPort);
        return;
    }

    if (signal.mayBeTriggered(signalReceivedInputPorts, getInputPorts())) {
        try {
            signal.trigger(this);
            checkSuperCalls(signal);
        } catch (Exception e) {
            this.logger.error(""Could not trigger signal."", e);
            this.getOwningContext().abortConfigurationRun();
        }
        for (OutputPort<?> outputPort : outputPorts.getOpenedPorts()) {
            outputPort.sendSignal(signal);
        }
    }
}""",0
WBSType.java,"""/** * Sets the value of the summaryRemainingNonLaborCost property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryRemainingNonLaborCost(Double value)
   {
      this.summaryRemainingNonLaborCost = value;
   }""",1
WBSType.java,"""/** * Sets the value of the summaryActualTotalCost property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryActualTotalCost(Double value)
   {
      this.summaryActualTotalCost = value;
   }""",1
XSwipeRefreshLayout.java,"""/** * @param loadListener */""","""public void setOnLoadListener(OnLoadListener loadListener) {
        mOnLoadListener = loadListener;
    }""",1
AggregateUI.java,"""/* *SECURITY */""","""private boolean authorizedForTab(Tabs tab) {
switch (tab) {
case SUBMISSIONS:
  return userInfo.getGrantedAuthorities().contains(GrantedAuthorityName.ROLE_DATA_VIEWER);
case MANAGEMENT:
  return userInfo.getGrantedAuthorities().contains(GrantedAuthorityName.ROLE_DATA_OWNER);
case ADMIN:
  return userInfo.getGrantedAuthorities().contains(GrantedAuthorityName.ROLE_SITE_ACCESS_ADMIN);
case ODKTABLES:
    return userInfo.getGrantedAuthorities().contains(GrantedAuthorityName.ROLE_SYNCHRONIZE_TABLES) ||
           userInfo.getGrantedAuthorities().contains(GrantedAuthorityName.ROLE_SUPER_USER_TABLES) ||
           userInfo.getGrantedAuthorities().contains(GrantedAuthorityName.ROLE_ADMINISTER_TABLES);
default:
  return false;
}
}""",0
WXSwipeLayout.java,"""/** * Callback on TouchEvent.ACTION_CANCLE or TouchEvent.ACTION_UP * handler : refresh or loading * @param child : child view of SwipeLayout,RecyclerView or Scroller */""","""@Override
  public void onStopNestedScroll(View child) {
    parentHelper.onStopNestedScroll(child);
    handlerAction();
  }""",1
XmlLexicalCategory.java,"""/** * <p>Java class for lexicalCategory. * * <p>The following schema fragment specifies the expected content contained within this class. * <p> * <pre> * &lt;simpleType name=""lexicalCategory""> *   &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}string""> *     &lt;enumeration value=""ANY""/> *     &lt;enumeration value=""SYMBOL""/> *     &lt;enumeration value=""NOUN""/> *     &lt;enumeration value=""ADJECTIVE""/> *     &lt;enumeration value=""ADVERB""/> *     &lt;enumeration value=""VERB""/> *     &lt;enumeration value=""DETERMINER""/> *     &lt;enumeration value=""PRONOUN""/> *     &lt;enumeration value=""CONJUNCTION""/> *     &lt;enumeration value=""PREPOSITION""/> *     &lt;enumeration value=""COMPLEMENTISER""/> *     &lt;enumeration value=""MODAL""/> *     &lt;enumeration value=""AUXILIARY""/> *   &lt;/restriction> * &lt;/simpleType> * </pre> * */""","""@XmlType(name = ""lexicalCategory"")
@XmlEnum
public enum XmlLexicalCategory {

    ANY,
    SYMBOL,
    NOUN,
    ADJECTIVE,
    ADVERB,
    VERB,
    DETERMINER,
    PRONOUN,
    CONJUNCTION,
    PREPOSITION,
    COMPLEMENTISER,
    MODAL,
    AUXILIARY;

    public String value() {
        return name();
    }

    public static XmlLexicalCategory fromValue(String v) {
        return valueOf(v);
    }

}""",1
WSManRemoteShellService.java,"""/** * Configures the HttpClientInputs object with the most common http parameters. * * @param httpClientInputs * @param url * @param wsManRequestInputs * @return the configured HttpClientInputs object. * @throws MalformedURLException */""","""private static HttpClientInputs setCommonHttpInputs(HttpClientInputs httpClientInputs, URL url, WSManRequestInputs wsManRequestInputs) throws MalformedURLException {
        httpClientInputs.setUrl(url.toString());
        httpClientInputs.setUsername(wsManRequestInputs.getUsername());
        httpClientInputs.setPassword(wsManRequestInputs.getPassword());
        httpClientInputs.setAuthType(wsManRequestInputs.getAuthType());
        httpClientInputs.setKerberosConfFile(wsManRequestInputs.getKerberosConfFile());
        httpClientInputs.setKerberosLoginConfFile(wsManRequestInputs.getKerberosLoginConfFile());
        httpClientInputs.setKerberosSkipPortCheck(wsManRequestInputs.getKerberosSkipPortForLookup());
        httpClientInputs.setTrustAllRoots(wsManRequestInputs.getTrustAllRoots());
        httpClientInputs.setX509HostnameVerifier(wsManRequestInputs.getX509HostnameVerifier());
        httpClientInputs.setProxyHost(wsManRequestInputs.getProxyHost());
        httpClientInputs.setProxyPort(wsManRequestInputs.getProxyPort());
        httpClientInputs.setProxyUsername(wsManRequestInputs.getProxyUsername());
        httpClientInputs.setProxyPassword(wsManRequestInputs.getProxyPassword());
        httpClientInputs.setKeystore(wsManRequestInputs.getKeystore());
        httpClientInputs.setKeystorePassword(wsManRequestInputs.getKeystorePassword());
        httpClientInputs.setTrustKeystore(wsManRequestInputs.getTrustKeystore());
        httpClientInputs.setTrustPassword(wsManRequestInputs.getTrustPassword());
        String headers = httpClientInputs.getHeaders();
        if (StringUtils.isEmpty(headers)) {
            httpClientInputs.setHeaders(CONTENT_TYPE_HEADER);
        } else {
            httpClientInputs.setHeaders(headers + NEW_LINE_SEPARATOR + CONTENT_TYPE_HEADER);
        }
        httpClientInputs.setMethod(HttpPost.METHOD_NAME);
        return httpClientInputs;
    }""",1
WaitForStackToReachStateTask.java,"""/** * Waits for the specified stack to reach the specified status. Returns true * if it does, returns false if it reaches a status with ""FAILED"", or if 30 * minutes pass without reaching the desired status. */""","""private void checkParams() {
        boolean areMissingParams = false;
        StringBuilder errors = new StringBuilder("""");

        if (stackName == null) {
            areMissingParams = true;
            errors.append(""Missing parameter: stackName is required \n"");
        }

        if (status == null) {
            areMissingParams = true;
            errors.append(""Missing parameter: stackName is required \n"");
        }

        if (areMissingParams) {
            throw new BuildException(errors.toString());
        }
    }""",1
WorkflowStateTag.java,"""/** * @return the allowedStyles */""","""public Set<String> getAllowedTypes() {
		return allowedTypes;
	}""",1
XMLReferencesInfoHoverProcessor.java,"""/** * Retrieves documentation to display in the hover help popup. * * @return String any documentation information to display <code>null</code> *         if there is nothing to display. * */""","""protected String computeHoverHelp(ITextViewer textViewer,
			int documentPosition) {
		String result = null;

		IndexedRegion treeNode = ContentAssistUtils.getNodeAt(textViewer,
				documentPosition);
		if (treeNode == null) {
			return null;
		}
		Node node = (Node) treeNode;

		while ((node != null) && (node.getNodeType() == Node.TEXT_NODE)
				&& (node.getParentNode() != null)) {
			node = node.getParentNode();
		}
		IDOMNode parentNode = (IDOMNode) node;

		IStructuredDocumentRegion flatNode = ((IStructuredDocument) textViewer
				.getDocument()).getRegionAtCharacterOffset(documentPosition);
		if (flatNode != null) {
			ITextRegion region = flatNode
					.getRegionAtCharacterOffset(documentPosition);
			if (region != null) {
				result = computeRegionHelp(treeNode, parentNode, flatNode,
						region, documentPosition);
			}
		}

		return result;
	}""",1
XposedHelpers.java,"""/** * Load an asset from a resource and return the content as byte array. */""","""public static byte[] assetAsByteArray(Resources res, String path) throws IOException {
        InputStream is = res.getAssets().open(path);

        ByteArrayOutputStream buf = new ByteArrayOutputStream();
        byte[] temp = new byte[1024];
        int read;

        while ((read = is.read(temp)) > 0) {
            buf.write(temp, 0, read);
        }
        is.close();
        return buf.toByteArray();
    }""",1
WidgetMarketplaceController.java,"""/* * Add common model attributes to the model * * @param model *            Model to add to * @param referringPageId *            Page to refer back to * @param user *            Current authenticated User */""","""private void widgetStoreModelHelper(Model model, String referringPageId,
			User user, String view) {
		model.addAttribute(ModelKeys.REFERRING_PAGE_ID, referringPageId);
		ControllerUtils.addNavItemsToModel(view, model, referringPageId, user);
	}""",1
XtextResourceFactory.java,"""/** * Factory of <code>{@link XtextResource}</code>s. * * @author alruiz@google.com (Alex Ruiz) */""","""@Singleton public class XtextResourceFactory {
  @Inject private IResourceSetProvider resourceSetProvider;
  @Inject private IProjects projects;

  /**
   * Creates a new <code>{@link XtextResource}</code>.
   * @param uri the URI of the file containing the EMF model.
   * @param contents the contents of the file.
   * @return the created {@code XtextResource}.
   * @throws IOException if something goes wrong.
   */
  public XtextResource createResource(String uri, String contents) throws IOException {
    return createResource(createURI(uri), contents);
  }""",1
XMLDocBuilder.java,"""/** * Add a namespace to the document that will be created * * @param prefix       The prefix of the namespace * @param namespaceURI The URI of the namespace * @return this */""","""public XMLDocBuilder addNamespace(String prefix, String namespaceURI) {
        definition.addNamespace(prefix, namespaceURI);
        return this;
    }""",1
WorldGrid.java,"""/** * @return the height */""","""public int getHeight() {
        return height;
    }""",1
WFSPINCAPS.java,"""/** * {@link #autoBeep} */""","""public void setAutoBeep(final Set<PINAutoBeep> autoBeep) {
		this.autoBeep.set((int) Bitmask.of(autoBeep));
	}""",1
WaitForInstanceToReachStateTask.java,"""/** * Set the ID of the instance to wait for. * * @param instanceId *            The ID of the instance to wait for. */""","""public void setInstanceId(String instanceId) {
        this.instanceId = instanceId;
    }""",1
XposedHelpers.java,"""/** * Returns the first field of the given type in a class. * Might be useful for Proguard'ed classes to identify fields with unique types. * If no matching field was not found, a {@link NoSuchFieldError} will be thrown. */""","""public static Field findFirstFieldByExactType(Class<?> clazz, Class<?> type) {
        Class<?> clz = clazz;
        do {
            for (Field field : clz.getDeclaredFields()) {
                if (field.getType() == type) {
                    field.setAccessible(true);
                    return field;
                }
            }
        } while ((clz = clz.getSuperclass()) != null);

        throw new NoSuchFieldError(""Field of type "" + type.getName() + "" in class "" + clazz.getName());
    }""",1
word-segmentation.java,"""/** * @param s: A string s * @param dict: A dictionary of words dict */""","""public boolean wordSegmentation(String s, Set<String> dict) {
        // write your code here   
        int len = s.length();
        boolean[] dp = new boolean[len + 1];
        
        
        // Last test case is SICK
        // without this validation it wont pass.
        int[] count = new int[26];
        for (String ss : dict) {
            for (int i = 0; i < ss.length(); i++) {
                count[ss.charAt(i) - 'a']++;
            }
        }
        for (int i = 0; i < s.length(); i++) {
            if (count[s.charAt(i) - 'a'] == 0) {
                return false;
            }
        }
        
        dp[0] = true;
        for (int i = 1; i <= len; i++) {
            for (int j = i - 1; j >= 0 ;j--) {
                if (!dp[j]) continue;
                String sub = s.substring(j, i);
                if (dict.contains(sub)) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[len];
    }""",1
YandexSynthesiser.java,"""/** * Finds the last word in your String (before the index of 99) by searching for spaces and ending punctuation. * Will preferably parse on punctuation to alleviate mid-sentence pausing * * @param input The String you want to search through. * @return The index of where the last word of the string ends before the index of 99. */""","""private int findLastWord(String input) {
        if (input.length() < 100)
            return input.length();
        int space = -1;
        for (int i = 99; i > 0; i--) {
            char tmp = input.charAt(i);
            if (isEndingPunctuation(tmp)) {
                return i + 1;
            }
            if (space == -1 && tmp == ' ') {
                space = i;
            }
        }
        if (space > 0) {
            return space;
        }
        return -1;
    }""",1
WeakWorldReference.java,"""/** * Gets the unique id of the world of this reference. * * @return the unique id */""","""public UUID getUniqueId() {
        return this.uniqueId;
    }""",1
VpnProfileDetailActivity.java,"""/** * Update the UI to enter credentials depending on the type of VPN currently selected */""","""private void updateCredentialView()
	{
		mUsernamePassword.setVisibility(mVpnType.has(VpnTypeFeature.USER_PASS) ? View.VISIBLE : View.GONE);
		mUserCertificate.setVisibility(mVpnType.has(VpnTypeFeature.CERTIFICATE) ? View.VISIBLE : View.GONE);
		mTncNotice.setVisibility(mVpnType.has(VpnTypeFeature.BYOD) ? View.VISIBLE : View.GONE);

		if (mVpnType.has(VpnTypeFeature.CERTIFICATE))
		{
			if (mUserCertLoading != null)
			{
				((TextView)mSelectUserCert.findViewById(android.R.id.text1)).setText(mUserCertLoading);
				((TextView)mSelectUserCert.findViewById(android.R.id.text2)).setText(R.string.loading);
			}
			else if (mUserCertEntry != null)
			{	/* clear any errors and set the new data */
				((TextView)mSelectUserCert.findViewById(android.R.id.text1)).setError(null);
				((TextView)mSelectUserCert.findViewById(android.R.id.text1)).setText(mUserCertEntry.getAlias());
				((TextView)mSelectUserCert.findViewById(android.R.id.text2)).setText(mUserCertEntry.getCertificate().getSubjectDN().toString());
			}
			else
			{
				((TextView)mSelectUserCert.findViewById(android.R.id.text1)).setText(R.string.profile_user_select_certificate_label);
				((TextView)mSelectUserCert.findViewById(android.R.id.text2)).setText(R.string.profile_user_select_certificate);
			}
		}
	}""",1
WrongArgumentsException.java,"""/** * Implements an exception thrown when the CLI is given wrong arguments. */""","""public class WrongArgumentsException
        extends AbnormalTerminationException {

    private static final long serialVersionUID = 1;

    /**
     * Creates an exception thrown when the CLI is given wrong arguments.
     */
    public WrongArgumentsException() {
        super(""Wrong arguments. Use 'Cli -help' for help."");
    }

    /**
     * Creates an exception thrown when the CLI is given wrong arguments.
     *
     * @param s A string describing the problem.
     */
    public WrongArgumentsException(String s) {
        super(s + "". Use 'Cli -help' for help."");
    }
}""",1
XmlTreeSaxParser.java,"""/** * @see org.xml.sax.ContentHandler#ignorableWhitespace(char[], int, int) */""","""public void ignorableWhitespace(char[] ch, int start, int length)
			throws SAXException {
	}""",1
ZAUtil.java,"""/** * Gets sense within range provided sense is strong enough, has random chance and doesnt always return closest sense * * @param entSource * @return */""","""public static EntityScent getSenseNearEntity(Entity entSource) {
        List<Entity> listEnts = entSource.worldObj.getEntitiesWithinAABBExcludingEntity(entSource, entSource.getEntityBoundingBox().expand((double)ZAConfig.maxPFRangeSense, (double)ZAConfig.maxPFRangeSense, (double)ZAConfig.maxPFRangeSense));
        
        EntityScent entBest = null;
        //double distBest = 999999;

        for(int i = 0; i < listEnts.size(); ++i) {
        	Entity entCheck = listEnts.get(i);

            if (entCheck instanceof EntityScent) {
            	
            	double dist = entSource.getDistanceToEntity(entCheck);
            	
            	//if (dist < distBest) {
		            if (dist < ((EntityScent)entCheck).getRange() && dist > 5.0F && entSource.worldObj.rand.nextInt(20) == 0) {
		                entBest = (EntityScent) entCheck;
		                return entBest;
		            }
            	//}
            }
        }

        return entBest;
    }""",1
VRDeepLinkHelper.java,"""/** * Checks whether any of the support oculus app is installed. * * @param context an android context * @param packageName an android app package name * @return whether an app with the given package name is installed */""","""@VisibleForTesting
  static boolean hasAppInstalled(Context context, String packageName) {
    try {
      context.getPackageManager().getPackageInfo(packageName, 0);
      return true;
    } catch (PackageManager.NameNotFoundException e) {
      return false;
    }
  }""",1
ZrtpConfigure.java,"""/** * Convenience function that sets the mandatory algorithms only. * * Mandatory algorithms are: * <ul> * <li> Hash: SHA256 </li> * <li> Symmetric Cipher: AES 128 </li> * <li> Public Key Algorithm: DH3027, Mult </li> * <li> SAS type: base 32 </li> * <li> SRTP Authentication lengths: 32, 80 </li> *</ul> */""","""@SuppressWarnings(""unused"")
    public void setMandatoryOnly() {
        clear();
        hashes.addAlgo(ZrtpConstants.SupportedHashes.S256);

        symCiphers.addAlgo(ZrtpConstants.SupportedSymCiphers.AES1);

        publicKeyAlgos.addAlgo(ZrtpConstants.SupportedPubKeys.DH3K);
        publicKeyAlgos.addAlgo(ZrtpConstants.SupportedPubKeys.MULT);

        sasTypes.addAlgo(ZrtpConstants.SupportedSASTypes.B32);

        authLengths.addAlgo(ZrtpConstants.SupportedAuthLengths.HS32);
        authLengths.addAlgo(ZrtpConstants.SupportedAuthLengths.HS80);
    }""",1
WBSType.java,"""/** * Sets the value of the parentObjectId property. * * @param value *     allowed object is *     {@link Integer } * */""","""public void setParentObjectId(Integer value)
   {
      this.parentObjectId = value;
   }""",1
VncCanvas.java,"""/** * Convert a motion event to a format suitable for sending over the wire * @param evt motion event; x and y must already have been converted from screen coordinates * to remote frame buffer coordinates. * @param downEvent True if ""mouse button"" (touch or trackball button) is down when this happens * @param useRightButton If true, event is interpreted as happening with right mouse button * @return true if event was actually sent */""","""public boolean processPointerEvent(MotionEvent evt,boolean downEvent,boolean useRightButton) {
		return processPointerEvent((int)evt.getX(),(int)evt.getY(), evt.getAction(), evt.getMetaState(), downEvent, useRightButton);
	}""",1
MessageListenerGlobals.java,"""/** *	It's called when a message is listen */""","""@Override
public void onMessage(javax.jms.Message arg0) 
{	
    //System.out.println(""MessageListenerGlobal ONMESSAGE"");
    try
    {
        //System.out.println(System.currentTimeMillis() +"",-1,onMessage"");
        MyHashMap bo = (MyHashMap)parseMessage(arg0);
        //System.out.println(System.currentTimeMillis() +"",-1,parseMessage"");
        RemoteSnap obj = (RemoteSnap)bo.get(""GLOBALS"");
        //System.out.println(System.currentTimeMillis() +"",-1,get"");
        for (DistributedField2D field : fields)
        {
            //DistributedRegionInterface obj = (DistributedRegionInterface)bo.get(field.getID());
            //field.getGlobals().put(obj.getStep(), obj);
            field.getGlobals().put(obj.step, obj);
            //System.out.println(""MessageListenerGlobal: PUT GLOBALS. STEP "" + obj.getStep());
            //System.out.println(System.currentTimeMillis() +"","" +obj.step + "",onMessage put globals"");
        }
            
    } catch (JMSException e) { 
        e.printStackTrace(); 
    }				
}""",0
WorkerMessages.java,"""/** * @param lwpc * @return */""","""public static String getNullWorkerDisposalMessage(String lwpcDID) {
		return ""The consumer ["" + lwpcDID + 
				""] disposed a null worker. This disposal was ignored."";
	}""",1
XmlTreeParserException.java,"""/** * @return the error type */""","""public XmlError getError() {
		return mError;
	}""",1
WrapperPlayClientSettings.java,"""/** * Set en_GB. * @param value - new value. */""","""public void setLocale(String value) {
        handle.getStrings().write(0, value);
    }""",1
XmlRpcMethodRegistrar.java,"""/** * Add @XmlRpc methods from this class to the default method handler. * * @param methodGroupClass */""","""public void addDefaultMethodGroup(Class<?> methodGroupClass) {
        Object methodsObject = injector.getInstance(methodGroupClass);
        methodGroups.put(defaultMethods, new XmlRpcMethodInvoker("""", methodGroupClass, methodsObject));
    }""",1
VPNConnectionState.java,"""/** * Represents the current state of a connection between a cloud VPN and a physical VPN gateway. * <p>Created by George Reese: 6/26/12 2:48 PM</p> * @author George Reese (george.reese@imaginary.com) * @since 2012-07 * @version 2012-07 initial version */""","""public enum VPNConnectionState {
    PENDING, AVAILABLE, DELETING, DELETED
}""",1
AbstractCalendarView.java,"""/* Same test as above but position of column refs in subquery where clause is reversed. */""","""@Test
public void updateReverseSubqueryColumnReferences() throws Exception {
    doUpdate(true, 6, ""update A set A.name = (select B.name from B where B.id = A.id) where A.name IS NULL"");

    ResultSet rs = methodWatcher.executeQuery(""select A.id,A.name from A"");

    assertEquals("""" +
            ""ID |NAME |\n"" +
            ""----------\n"" +
            ""10 | 10_ |\n"" +
            ""11 | 11_ |\n"" +
            ""12 | 12_ |\n"" +
            ""13 |NULL |\n"" +
            ""14 |NULL |\n"" +
            ""15 |NULL |\n"" +
            ""16 | 16_ |\n"" +
            ""17 | 17_ |\n"" +
            ""18 | 18_ |\n"" +
            ""19 |NULL |\n"" +
            ""20 |NULL |\n"" +
            ""21 |NULL |"", TestUtils.FormattedResult.ResultFactory.toString(rs));
}""",0
Zerokit.java,"""/** * Send a log message if app is in debug mode * * @param msg The message you would like logged. */""","""@SuppressWarnings(""WeakerAccess"")
    void log(@NonNull String msg) {
        if (BuildConfig.DEBUG)
            Log.d(""Zerokit"", msg);
    }

    @SuppressWarnings(""WeakerAccess"")
    void incrementIdlingResoure() {
        if (idlingResource != null) idlingResource.increment();
    }""",1
WorldPortalsApi.java,"""/** * Get the IApi implementation for World Portals. * * @return returns the IApi implementation from world portals. May be the ApiDummy if World Portals has not loaded. */""","""public static IApi getApiImpl()
    {
        return apiImpl;
    }""",1
VoiceFirebaseInstanceIDService.java,"""/** * Persist token to third-party servers. * * Modify this method to associate the user's FCM InstanceID token with any server-side account * maintained by your application. * * @param token The new token. */""","""private void sendRegistrationToServer(String token) {
        // TODO: Implement this method to send token to your app server.
    }""",1
XSLFSheet.java,"""/** * Render this sheet into the supplied graphics object * * @param graphics * @param position * @param handler * @param isCanceled */""","""public void draw(Graphics2D graphics, AtomicBoolean isCanceled, Handler handler, int position){
        XSLFSheet master = getMasterSheet();
        if(getFollowMasterGraphics() && master != null) master.draw(graphics, isCanceled, handler, position);

        graphics.setRenderingHint(XSLFRenderingHint.GROUP_TRANSFORM, new AffineTransform());
        int i = 0;
        for(XSLFShape shape : getShapeList()) {
        	if (isCanceled.get()) {
        		Log.d(""Slide"", ""Thread.Canceled"");
        		return;
        	} else {
        		handler.sendMessage(Message.obtain(handler, 1, i++, getShapeList().size(), Integer.valueOf(position)));        		
        	}
            if(!canDraw(shape)) continue;

        	// remember the initial transform and restore it after we are done with drawing
        	AffineTransform at = graphics.getTransform();

            // concrete implementations can make sense of this hint,
            // for example PSGraphics2D or PDFGraphics2D would call gsave() / grestore
            graphics.setRenderingHint(XSLFRenderingHint.GSAVE, true);

            // apply rotation and flipping
            shape.applyTransform(graphics);
            // draw stuff
            shape.draw(graphics);

            // restore the coordinate system
            graphics.setTransform(at);

            graphics.setRenderingHint(XSLFRenderingHint.GRESTORE, true);

        }
    }""",1
QuestionSet.java,"""/** * constructor */""","""public QuestionSet() {
    this.qs = new ArrayList<Question>();
}""",0
YatomataImpl.java,"""/** * Constructs the engine with the defined state */""","""public YatomataImpl(Class<T> fsmClass, T fsm, Object currentState) throws FSMException {
        this(fsmClass, fsm);
        this.currentState = currentState;
    }""",1
ZMQ.java,"""/** * Retrieve the timeout for send operation on the socket. * If the value is 0, send will return immediately, with a false and an EAGAIN error if the message cannot be sent. * If the value is -1, it will block until the message is sent. * For all other values, it will try to send the message for that amount of time before returning with false and an EAGAIN error. * * @return the Send Timeout in milliseconds. * @see #setSendTimeOut(int) */""","""public int getSendTimeOut()
        {
            return base.getSocketOpt(zmq.ZMQ.ZMQ_SNDTIMEO);
        }""",1
AbstractCalendarView.java,"""/* paint */""","""JButton but=new JButton(new AbstractAction(""Load Mutation File"")
        {
        @Override
        public void actionPerformed(ActionEvent e) {
            loadVCF();
            }
        });""",0
AbstractCalendarView.java,"""/** * fluent setter */""","""public BasicLink withBasicLinkSimpleExtension(final List<Object> basicLinkSimpleExtension) {
    this.setBasicLinkSimpleExtension(basicLinkSimpleExtension);
    return this;
}""",0
WatchDataSourceImplTest.java,"""/* * Asserts that the <code>addCalculable</code> method really works for * the current state of a given data source, that is, calculables get * into the history. The method verifies this by calling * <code>addCalculable</code> the specified number of times and * checking the history. * * @param ds    the data source to verify * @param count the required number of calls to <code>addCalculable</code> * @param works specifies whether <code>addCalculable</code> should *              work or not */""","""private void assertAddCalculableWorks(WatchDataSource ds,
                                          int count,
                                          boolean works) throws RemoteException {
        ds.clear();
        List<Calculable> expected = new ArrayList<Calculable>();
        Calculable expectedLast = null;
        for (int j = 0; j < count; j++) {
            Calculable c = new Calculable();
            ds.addCalculable(c);
            if (works) {
                expected.add(c);
                expectedLast = c;
            }
        }

        DataSourceMonitor detector = new DataSourceMonitor(ds);
        detector.waitFor(works ? count : 0);

        List calculables = Arrays.asList(ds.getCalculable());
        Utils.assertSameContents(expected, calculables);
        Assert.assertEquals(expected.size(), ds.getCurrentSize());
        Assert.assertSame(expectedLast, ds.getLastCalculable());
        ds.clear();
    }""",1
WrapperPlayServerAttachEntity.java,"""/** * Retrieve the entity being attached. * @param world - the current world of the entity. * @return The entity. */""","""public Entity getEntity(World world) {
    	return handle.getEntityModifier(world).read(1);
    }""",1
VocabularyService.java,"""/** * @summary Perform a lookup of an array of concept identifiers returning the * matching concepts with their detailed properties, using the default source. * @param identifiers an array of concept identifiers * @return collection of concepts */""","""@Path(""lookup/identifiers"")
  @POST
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  public Collection<Concept> executeIdentifierLookup(long[] identifiers) {
    String defaultSourceKey = getDefaultVocabularySourceKey();
    
    if (defaultSourceKey == null)
      throw new WebApplicationException(new Exception(""No vocabulary or cdm daimon was found in configured sources.  Search failed.""), Response.Status.SERVICE_UNAVAILABLE); // http 503      

    return executeIdentifierLookup(defaultSourceKey, identifiers);   
  }""",1
WrapperPlayServerRespawn.java,"""/** * Set the game mode of the current player. * @param mode - new value. */""","""public void setGameMode(NativeGameMode mode) {
        handle.getGameModes().write(0, mode);
    }""",1
WidgetMatcherFactory.java,"""/** * Matches a perspective with the specified id. * * @param id the id of the perspective. * @return a matcher. * @since 2.0 */""","""public static org.hamcrest.Matcher withPerspectiveId(java.lang.String id) {
    return org.eclipse.swtbot.eclipse.finder.matchers.WithPerspectiveId.withPerspectiveId(id);
  }""",1
FusionTable.java,"""/** * Helper function to create a FusionTable parameter table (missing the * not-yet-created tableId). */""","""private static final FusionTable2ParameterTable newFusionTableEntity(String ownerEmail,
  CallingContext cc) throws ODKDatastoreException {
Datastore ds = cc.getDatastore();
User user = cc.getCurrentUser();

FusionTable2ParameterTable t = ds.createEntityUsingRelation(
    FusionTable2ParameterTable.assertRelation(cc), user);
t.setOwnerEmail(ownerEmail);
return t;
}""",0
AbstractAjcCompiler.java,"""/** * Not safe and assembleArguments() must be run */""","""private boolean hasSourcesToCompile() {
    return resolvedIncludes.size() > 0;
}""",0
XmppMuc.java,"""/** * Invites the user to a room for the given contact name and number * if the user (or someone else) writes to this room, a SMS is send to the number * * @param number * @param mName * @return true if successful, otherwise false * @throws XMPPException */""","""public MultiUserChat inviteRoom(String number, String contact, int mode)
			throws XMPPException {
		MultiUserChat muc;
		if (!mRooms.containsKey(number)) {
			muc = createRoom(number, contact, mode);
			mRooms.put(number, muc);

		} else {
			muc = mRooms.get(number);
			// TODO: test if occupants contains also the sender (in case we
			// invite other people)
			if (muc != null && muc.getOccupantsCount() < 2) {
				muc.invite(mSettings.notifiedAddress, ""SMS conversation with ""
						+ contact);
			}
		}
		return muc;
	}""",1
WindowInstancesNumber.java,"""/** * <p>Constructor for WindowInstancesNumber.</p> * * @param numberOfInstances a int. * @param instanceClass a {@link lupos.datastructures.items.literal.Literal} object. */""","""public WindowInstancesNumber(final int numberOfInstances, Literal instanceClass) {
		super(instanceClass);
		if (numberOfInstances < 1) {
			System.err.println(""X must be >=1 for WINDOW TYPE SLIDINGTRIPLES X"");
			System.err.println(""Assuming WINDOW TYPE SLIDINGTRIPLES 1..."");
			this.numberOfInstances = 1;
		} else
			this.numberOfInstances = numberOfInstances;		
	}""",1
WithinCircleQueryPredicate.java,"""/** * This predicate returns {@code true} if a {@link io.sphere.sdk.models.GeoJSON} object * is within the circle given by the center and radius in meters. * * @param <T> the type for which this predicate can be instantiated */""","""class WithinCircleQueryPredicate<T> extends QueryModelQueryPredicate<T> {
    private final Point center;
    private final Double radius;

    WithinCircleQueryPredicate(final QueryModel<T> queryModel, final Point center, final Double radius) {
        super(queryModel);
        this.center = center;
        this.radius = radius;
    }

    @Override
    protected String render() {
        return String.format("" within circle(%f, %f, %f)"", center.getLongitude(), center.getLatitude(), radius);
    }
}""",1
WindowManagerService.java,"""/** * Thaw rotation changes.  (Disable ""rotation lock"".) * Persists across reboots. */""","""@Override
    public void thawRotation() {
        if (!checkCallingPermission(android.Manifest.permission.SET_ORIENTATION,
                ""thawRotation()"")) {
            throw new SecurityException(""Requires SET_ORIENTATION permission"");
        }

        if (DEBUG_ORIENTATION) Slog.v(TAG, ""thawRotation: mRotation="" + mRotation);

        long origId = Binder.clearCallingIdentity();
        try {
            mPolicy.setUserRotationMode(WindowManagerPolicy.USER_ROTATION_FREE,
                    777); // rot not used
        } finally {
            Binder.restoreCallingIdentity(origId);
        }

        updateRotationUnchecked(false, false);
    }""",1
WorldGrid.java,"""/** * @return the tile width */""","""public int getTileWidth() {
        return tileWidth;
    }""",1
OutSequenceFaultSequenceTestCase.java,"""/** * Symbol WSO2 dropped and MSFT is given in out sequence */""","""@Test(groups = ""wso2.esb"", description = ""- Custom proxy -Out sequence inline"")
public void testCustomProxyOutSequenceInline() throws Exception {

    OMElement response = axis2Client.sendSimpleStockQuoteRequest(getProxyServiceURLHttp(""StockQuoteProxyOne""), null, ""WSO2"");

    String symbol = response.getFirstElement().getFirstChildWithName(new QName(""http://services.samples/xsd"", ""symbol""))
            .getText();
    assertEquals(symbol, ""MSFT"", ""Fault: value 'symbol' mismatched"");
}""",0
VocabularyService.java,"""/** * @summary find all concepts mapped to the identifiers provided * @param sourceKey path parameter specifying the source key identifying the * source to use for access to the set of vocabulary tables * @param identifiers an array of concept identifiers * @return collection of concepts */""","""@Path(""{sourceKey}/lookup/mapped"")
  @POST
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  public Collection<Concept> executeMappedLookup(@PathParam(""sourceKey"") String sourceKey, long[] identifiers) {
    if (identifiers.length == 0) {
      return new ArrayList<>();
    }""",1
XMLFieldConfigEnumValue.java,"""/** * Gets the value of the group property. * * <p> * This accessor method returns a reference to the live list, * not a snapshot. Therefore any modification you make to the * returned list will be present inside the JAXB object. * This is why there is not a <CODE>set</CODE> method for the group property. * * <p> * For example, to add a new item, do as follows: * <pre> *    getGroup().add(newItem); * </pre> * * * <p> * Objects of the following type(s) are allowed in the list * {@link XMLFieldConfigEnumValueGroup } * * */""","""public List<XMLFieldConfigEnumValueGroup> getGroup() {
            if (group == null) {
                group = new ArrayList<XMLFieldConfigEnumValueGroup>();
            }
            return this.group;
        }""",1
AbstractCalendarView.java,"""/* * *  INFRASTRUCTURE * */""","""public BcSignedDataTest(String name)
{
    super(name);
}""",0
WrapperPlayServerBlockAction.java,"""/** * Set block Y Coordinate. * @param value - new value. */""","""public void setY(short value) {
        handle.getIntegers().write(1, (int) value);
    }""",1
CommandQueueUnitTest.java,"""/** * In PI Mode, open replies ""OK"", but then we asynchronously receive ""closed!"" */""","""@Test
public void testPIOpenSingleThreaded() throws Exception {
injectCommandAsIfWaiting(""open"", ""blah.html"", """");
expectCommand(""open"", ""blah.html"", """");
cq.handleCommandResultWithoutWaitingForACommand(""OK"");
cq.declareClosed();
assertEquals(""OK"", cq.peekAtResult());
}""",0
ZMachine.java,"""/** * Store keyboard input into the keyboard buffer (will be processed on the * next run()). * * @param input *          what the user entered. Note: this must either be a single byte or *          a newline terminated string, depending on the runstate. */""","""public void fillInputBuffer(char[] input) {
		inputBuffer = input;
		inputIndex = 0;
	}""",1
XMLStructuredOutput.java,"""/** * Creates a {@link AbstractStructuredOutput.TagBuilder} used to fluently create the root element. * * @param rootElement name of the root element * @return a tag builder which can be used to build the root element */""","""@CheckReturnValue
    public TagBuilder buildBegin(@Nonnull String rootElement) {
        if (opensCalled == 0) {
            try {
                hd.startDocument();
            } catch (SAXException e) {
                throw Exceptions.handle(e);
            }
        }""",1
WXCircleViewPager.java,"""/** * Start auto scroll. Must be called after {@link #setAdapter(PagerAdapter)} */""","""public void startAutoScroll() {
    isAutoScroll = true;
    //		mViewPager.setCurrentItem(0);
    mCircleHandler.sendEmptyMessageDelayed(0, intervalTime);
  }""",1
ZipArchiveOutputStream.java,"""/** * The encoding to use for filenames and the file comment. * * @return null if using the platform's default character encoding. */""","""public String getEncoding() {
        return encoding;
    }""",1
XMLWriter.java,"""/** * Prints to this <code>XMLWriter</code> an atomic XML tag with a single attribute. * The tag is indented by @see #indent spaces either from the beginning of the * line (if @see #relative is <code>false</code>) or relative to the current * indentation level(if @see #relative is <code>true</code>). * * @param tag the name of the XML tag. * @param attributeName the name of the attribute. * @param attributeValue the value of the attribute. * @param indent the number of spaces by which the tag needs to be indented. * @param relative specifies whether the indentation is from the beginning * of the line (if @see #relative is <code>false</code>) or from the current * level of indentation (if @see #relative is <code>true</code>). * @param newline specifies whether the line should be terminated after the tag * has been printed */""","""public void printXMLAtomicTag(String tag, String attributeName, String attributeValue, int indent,
          boolean relative, boolean newline) throws java.io.IOException {
    String attributeString = attributeName + ""=\"""" + attributeValue + ""\"""";
    String xmltag = ""<"" + tag + "" "" + attributeString + ""/>"";
    if (newline) {
      this.indentPrintln(xmltag, indent, relative);
    } else {
      this.indentPrint(xmltag, indent, relative);
    }
  }""",1
WikiUtil.java,"""/** * @param page * @return */""","""public static boolean isHomepage(AbstractPage page) {
		return page.equals(page.getSpace().getHomepage());
	}""",1
TexI.java,"""/* these may not be  entirely correct They should be corrected if oddities are * detected. */""","""public static int detectfmt(BufferedImage img) {
ColorModel cm = img.getColorModel();
if(!(img.getSampleModel() instanceof PixelInterleavedSampleModel))
    return(-1);
PixelInterleavedSampleModel sm = (PixelInterleavedSampleModel)img.getSampleModel();
int[] cs = cm.getComponentSize();
int[] off = sm.getBandOffsets();
/*
System.err.print(this + "": "" + cm.getNumComponents() + "", ("");
for(int i = 0; i < off.length; i++)
    System.err.print(((i > 0)?"" "":"""") + off[i]);
System.err.print(""), ("");
for(int i = 0; i < off.length; i++)
    System.err.print(((i > 0)?"" "":"""") + cs[i]);
System.err.print("")"");
System.err.println();
*/
if((cm.getNumComponents() == 4) && (off.length == 4)) {
    if(((cs[0] == 8) && (cs[1] == 8) && (cs[2] == 8) && (cs[3] == 8)) &&
       (cm.getTransferType() == DataBuffer.TYPE_BYTE) &&
       (cm.getTransparency() == java.awt.Transparency.TRANSLUCENT)) {
    if((off[0] == 0) && (off[1] == 1) && (off[2] == 2) && (off[3] == 3))
        return(GL.GL_RGBA);
    if((off[0] == 2) && (off[1] == 1) && (off[2] == 0) && (off[3] == 3))
        return(GL.GL_BGRA);
    }
} else if((cm.getNumComponents() == 3) && (off.length == 3)) {
    if(((cs[0] == 8) && (cs[1] == 8) && (cs[2] == 8)) &&
       (cm.getTransferType() == DataBuffer.TYPE_BYTE) &&
       (cm.getTransparency() == java.awt.Transparency.OPAQUE)) {
    if((off[0] == 0) && (off[1] == 1) && (off[2] == 2))
        return(GL.GL_RGB);
    if((off[0] == 2) && (off[1] == 1) && (off[2] == 0))
        return(GL2.GL_BGR);
    }
}
return(-1);
}""",0
XMLPersistanceHelper.java,"""/** * Load an object from XML File * * @param loadFile * @param c * @return * @throws Exception */""","""public static Object loadObjectFromFile(final File loadFile, Class c) throws Exception {
	try {
	    JAXBContext jaxbContext = JAXBContext.newInstance(c);
	    Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
	    Object result = jaxbUnmarshaller.unmarshal(loadFile);
	    LOG.info(String.format(""Loaded successfully associations from '%s'"", loadFile.getAbsoluteFile()));
	    return result;
	} catch (JAXBException ex) {
	    throw new Exception(String.format(""Could not load associations from "" + ""File '%s'"",
		    loadFile.getAbsoluteFile()), ex);
	}
    }""",1
WrapperPlayServerCustomPayload.java,"""/** * Set name of the ""channel"" used to send the data.. * @param value - new value. */""","""public void setChannel(String value) {
        handle.getStrings().write(0, value);
    }""",1
XmppBuddies.java,"""/** * retrieves the current xmpp rooster * and sends a broadcast ACTION_XMPP_PRESENCE_CHANGED * for every friend * does nothing if we are offline * * @return */""","""public ArrayList<XmppFriend> retrieveFriendList() {
        
        ArrayList<XmppFriend> friends = new ArrayList<XmppFriend>();

        if (sConnection != null && sConnection.isAuthenticated()) {
            try {
                String userID = null;
                String status = null;
                Roster roster = sConnection.getRoster();

                for (RosterEntry r : roster.getEntries()) {
                    userID = r.getUser();
                    status = retrieveStatusMessage(userID);
                    friends.add(new XmppFriend(userID, r.getName(), status, retrieveState(userID)));
                }

                sendFriendList(friends);
            } catch (Exception ex) {
                GoogleAnalyticsHelper.trackAndLogWarning(""Failed to retrieve Xmpp Friend list"", ex);
            }
        }
        
        return friends;
    }""",1
Glob.java,"""/*  have this as a known  entry-point to be forwards-compatible with compiled * resources. */""","""public static DirLight amblight(RenderList rl) {
return(((MapView)((PView.WidgetContext)rl.state().get(PView.ctx)).widget()).amb);
}""",0
WordApiTest.java,"""/** * Test of audio method, of class WordApi. */""","""@Test
    public void testAudio_String() throws Exception {
        System.out.println(""audio"");
        String word = ""a"";

        List<AudioFileMetadata> result = WordApi.audio(word);

        assertNotNull(result);
    }""",1
VncCanvas.java,"""/** * Warp the mouse to x, y in the RFB coordinates * @param x * @param y */""","""void warpMouse(int x, int y)
	{
		bitmapData.invalidateMousePosition();
		mouseX=x;
		mouseY=y;
		bitmapData.invalidateMousePosition();
		try
		{
			rfb.writePointerEvent(x, y, 0, MOUSE_BUTTON_NONE);
		}
		catch ( IOException ioe)
		{
			Log.w(TAG,ioe);
		}
	}""",1
VoldPeers.java,"""/** * Construct new list of peers for deletion of a node * * @param uuid * @param peers * @param returnList * @return */""","""private final static VoldLocation constructNewPeersListForDel(@Nonnull final UUID uuid,
            final List<VoldLocation> peers, final List<VoldLocation> returnList) {
        final List<VoldLocation> newPeers = new ArrayList<VoldLocation>();
        VoldLocation nodeToRemove = null;
        if (peers != null) {
            for (final VoldLocation oldLocation : peers) {
                if (oldLocation.getNode().equals(uuid)) {
                    // Node to remove
                    nodeToRemove = new VoldLocation(oldLocation.getNode(), oldLocation.getSockAddr());
                }
                else {
                    newPeers.add(oldLocation);
                }
            }
        }
        returnList.clear();
        returnList.addAll(newPeers);
        return nodeToRemove;
    }""",1
ResponseBody.java,"""/** * getResult */""","""@JsonIgnore
public Result getResult () throws Exception {

if (this.getType() == ResponseType.JSON) {

  return Results.ok((String)this.getContent() );
} else if (this.getType() == ResponseType.FILE) {

  return Results.ok(new FileInputStream((String)this.getContent() ) );
} else if (this.getType() == ResponseType.HTML) {
  
  return Results.ok((Content)this.getContent() );
}

throw new CodeException(
  151,
  12,
  ""Unhandled ResponseBody Type [""
  + this.getType().toString()
  + ""]"",
  ExceptionClass.TYPE);
}""",0
WrapperPlayServerRelEntityMove.java,"""/** * Set the relative movement in the x axis. * <p> * Note that this cannot exceed 4 blocks in either direction. * @param value - new value. */""","""public void setDx(double value) {
    	if (Math.abs(value) > 4)
    		throw new IllegalArgumentException(""Displacement cannot exceed 4 meters."");
        handle.getBytes().write(0, (byte) Math.min(Math.floor(value * 32.0D), 127));
    }""",1
WorkServiceCallbackHandler.java,"""/** * {@inheritDoc} */""","""@Override
    public void handle(Callback[] arg0) throws IOException, UnsupportedCallbackException {
        for (int i = 0; i < arg0.length; i++) {
            WSPasswordCallback pc = (WSPasswordCallback) arg0[i];
            String password = _passwords.get(pc.getIdentifier());
            if (password != null) {
                pc.setPassword(password);
                return;
            }
        }
    }""",1
YoutubeVideoDeserializer.java,"""/** * Because the Youtube Video object contains complex objects within its hierarchy, we have to use * a custom deserializer * * @param jsonParser jsonParser * @param deserializationContext deserializationContext * @return The deserialized {@link com.google.api.services.youtube.YouTube.Videos} object * @throws java.io.IOException IOException * @throws com.fasterxml.jackson.core.JsonProcessingException JsonProcessingException */""","""@Override
  public Video deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
    JsonNode node = jsonParser.getCodec().readTree(jsonParser);
    Video video = new Video();

    try {
      video.setId(node.get(""id"").asText());
      video.setEtag(node.get(""etag"").asText());
      video.setKind(node.get(""kind"").asText());

      video.setSnippet(buildSnippet(node));
      video.setStatistics(buildStatistics(node));
    } catch (Exception ex) {
      LOGGER.error(""Exception while trying to deserialize a Video object: {}"", ex);
    }

    return video;
  }""",1
WelcomeFile.java,"""/** * Sets the value of the value property. * * @param value *     allowed object is *     {@link String } * */""","""public void setvalue(String value) {
        try {
            support.fireVetoableChange(""value"",value, value);
        } catch (PropertyVetoException _x) {
            return;
        }
        this.value = value;
    }""",1
AbstractAccess.java,"""/** * Methods */""","""@Override
public List<Method> getMethods() {
    List<Method> methods = new ArrayList<>();

    if (forceAccess) {
        methods.addAll(getAllMethods(this.clazz));
    } else {
        methods.addAll(getMethods(this.clazz));
    }

    return methods;
}""",0
WinProxySearchStrategy.java,"""/************************************************************************* * getProxySelector * * @see com.github.markusbernhardt.proxy.ProxySearchStrategy#getProxySelector() ************************************************************************/""","""@Override
	public ProxySelector getProxySelector() throws ProxyException {
		// TODO Rossi 08.05.2009 Implement this by using Win API calls.
		// new Win32ProxyUtils().winHttpGetDefaultProxyConfiguration()
		// Current fallback is to use the IE settings. This is better
		// because the registry settings are most of the time not set.
		// Some Windows server installations may use it though.
		return new IEProxySearchStrategy().getProxySelector();
	}""",1
WrapperPlayServerUpdateSign.java,"""/** * Retrieve block Y Coordinate. * @return The current Y */""","""public short getY() {
        return handle.getIntegers().read(1).shortValue();
    }""",1
WebSessionTrackingTelemetryModule.java,"""/** * End request processing. * This method checks if the session cookie should be updated before sent back to the client. * The session cookie is updated when the session is new or current session already expired. * * @param req The request to process * @param res The response to modify */""","""@Override
    public void onEndRequest(ServletRequest req, ServletResponse res) {
    }""",1
X509Certificate.java,"""/** * Gets an immutable collection of issuer alternative names from the * <code>IssuerAltName</code> extension, (OID = 2.5.29.18). * <p> * The ASN.1 definition of the <code>IssuerAltName</code> extension is: * <pre> * IssuerAltName ::= GeneralNames * </pre> * The ASN.1 definition of <code>GeneralNames</code> is defined * in {@link #getSubjectAlternativeNames getSubjectAlternativeNames}. * <p> * If this certificate does not contain an <code>IssuerAltName</code> * extension, <code>null</code> is returned. Otherwise, a * <code>Collection</code> is returned with an entry representing each * <code>GeneralName</code> included in the extension. Each entry is a * <code>List</code> whose first entry is an <code>Integer</code> * (the name type, 0-8) and whose second entry is a <code>String</code> * or a byte array (the name, in string or ASN.1 DER encoded form, * respectively). For more details about the formats used for each * name type, see the <code>getSubjectAlternativeNames</code> method. * <p> * Note that the <code>Collection</code> returned may contain more * than one name of the same type. Also, note that the returned * <code>Collection</code> is immutable and any entries containing byte * arrays are cloned to protect against subsequent modifications. * <p> * This method was added to version 1.4 of the Java 2 Platform Standard * Edition. In order to maintain backwards compatibility with existing * service providers, this method is not <code>abstract</code> * and it provides a default implementation. Subclasses * should override this method with a correct implementation. * * @return an immutable <code>Collection</code> of issuer alternative * names (or <code>null</code>) * @throws CertificateParsingException if the extension cannot be decoded * @since 1.4 */""","""public Collection<List<?>> getIssuerAlternativeNames()
        throws CertificateParsingException {
        return X509CertImpl.getIssuerAlternativeNames(this);
    }""",1
WaitForNatTablePopupMenu.java,"""/** * Get popupMenuAction from ui Binding Registry of NatTable by creating * MouseDown event. The private variable menu is obtained by using Java * reflection. * * @return Menu of NatTable for the given cell */""","""private Menu getNatTableMenu() {
		Event event = NatTableContextMenuFinder.createMouseEvent(control, x, y, 3, SWT.NONE, 1);
		MouseEvent mouseevent = new MouseEvent(event);
		IMouseAction action = ((NatTable) control).getUiBindingRegistry().getMouseDownAction(mouseevent);
		if (action instanceof PopupMenuAction) {
			PopupMenuAction popupMenuAction = (PopupMenuAction) action;
			Field privateMenu = null;
			try {
				privateMenu = PopupMenuAction.class.getDeclaredField(""menu"");
			} catch (NoSuchFieldException e) {
				return null;
			} catch (SecurityException e) {
				return null;
			}
			privateMenu.setAccessible(true);
			try {
				return (Menu) privateMenu.get(popupMenuAction);
			} catch (IllegalArgumentException e) {
				return null;
			} catch (IllegalAccessException e) {
				return null;
			}
		}
		return null;
	}""",1
WorkerControlResource.java,"""/** * @param controllerId the controller acquiring the lock; must be the one who acquired the lock * @return 204 on success, 412 on failure */""","""@POST
    @Path(""releaseLock/{controllerId}"")
    public synchronized Response releaseLock(@PathParam(""controllerId"") UUID controllerId) {
        synchronized (this) {
            Response response = expectLockStatus(true);
            if (response != null) {
                return response;
            }

            if (!controllerId.equals(lockingControllerId)) {
                logger.info(
                    ""Attempt to unlock with controllerId <"" + controllerId + ""> but locked by <"" + lockingControllerId +
                        "">"");
                return Response.status(Response.Status.PRECONDITION_FAILED).build();
            }

            logger.info(""controllerId <"" + controllerId + ""> released lock"");
            lockingControllerId = null;
            locked = false;
        }""",1
weapontype_t.java,"""/** The defined weapons, * including a marker indicating *  user has not changed weapon. */""","""public enum weapontype_t
{
    wp_fist,
    wp_pistol,
    wp_shotgun,
    wp_chaingun,
    wp_missile,
    wp_plasma,
    wp_bfg,
    wp_chainsaw,
    wp_supershotgun,

    NUMWEAPONS,
    
    // No pending weapon change.
    wp_nochange;
    
    public String toString(){
        return this.name();
    }
    
}""",1
WebUserTelemetryInitializer.java,"""/** * Initializes the properties of the given telemetry. * * @param telemetry The {@link com.microsoft.applicationinsights.telemetry.Telemetry} to initialize. */""","""@Override
    protected void onInitializeTelemetry(Telemetry telemetry) {
        UserContext userContext = telemetry.getContext().getUser();

        if (!CommonUtils.isNullOrEmpty(userContext.getId())) {
            return;
        }

        RequestTelemetry requestTelemetry = ThreadContext.getRequestTelemetryContext().getHttpRequestTelemetry();
        UserContext requestUserContext = requestTelemetry.getContext().getUser();
        if (requestUserContext == null) {
            return;
        }

        userContext.setId(requestUserContext.getId());

        Date requestUserAcquisitionDate = requestUserContext.getAcquisitionDate();
        userContext.setAcquisitionDate(requestUserAcquisitionDate);
    }""",1
WebsockifyServer.java,"""/** * Validates that a keystore with the given parameters exists and can be used for an SSL context. * @param keystore - path to the keystore file * @param password - password to the keystore file * @param keyPassword - password to the private key in the keystore file * @return null if valid, otherwise a string describing the error. */""","""public void validateKeystore ( String keystore, String password, String keyPassword )
		throws KeyManagementException, UnrecoverableKeyException, IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException
	{
		WebsockifySslContext.validateKeystore(keystore, password, keyPassword);
	}""",1
WebPageImpl.java,"""/** * Get a new Infobox but do not add it to the page. Can be used for putting Infoboxes inside Infoboxes. * @param title The title of the desired Infobox * @return the contentNode of the newly created Infobox */""","""protected final HTMLNode getContentBox(String title) {
		InfoboxNode infobox = mPM.getInfobox(title);
		return infobox.outer;
	}""",1
ZMQ.java,"""/** * Get the index for the next position in the poll set size. * * @return the index for the next position in the poll set size. */""","""public int getNext()
        {
            return this.next;
        }""",1
SMConfigurationAdapterImpl.java,"""/** * Don't call this method. */""","""public int[][] getSegments() {
        return new int[0][];
    }""",0
WorkerMessages.java,"""/** * @param brokerPublicKey * @return */""","""public static String getUnknownConsumerDisposingWorkerMessage(
			String brokerPublicKey) {
		return ""Ignoring an unknown consumer which disposed a worker. Consumer public key: "" + 
				brokerPublicKey;
	}""",1
FirefoxChromeLauncher.java,"""/** * Wrapper to allow for stubbed-out testing * */""","""protected void killFirefoxProcess() {
log.info(""Killing Firefox..."");
int exitValue = process.destroy();
if (exitValue == 0) {
  log.warning(""Firefox seems to have ended on its own (did we kill the real browser???)"");
}""",0
ZMQ.java,"""/** * Check whether the specified element in the poll set was signaled for output. * * @param index * * @return true if the element was signaled. */""","""public boolean pollout(int index)
        {
            if (index < 0 || index >= this.next) {
                return false;
            }

            return items[index].isWritable();
        }""",1
WAStorageClientUploadIT.java,"""/** * Test of validateStorageAccount method, of class WAStorageClient. */""","""@Test(expected = WAStorageException.class)
    public void testInvalidateStorageAccount2() throws Exception {
        System.out.println(""Testing Invalid StorageAccount"");
        AzureUtils.validateStorageAccount(new StorageAccountInfo(""rfguthio123"", testEnv.azureStorageAccountKey2, testEnv.blobURL));
        testEnv.container.deleteIfExists();
    }""",1
WrapperPlayClientUpdateSign.java,"""/** * Set the lines of text represented by a four-element String array.. * @param value - new value. */""","""public void setLines(@Nonnull String[] lines) {
    	if (lines == null)
    		throw new IllegalArgumentException(""Array cannot be NULL."");
    	if (lines.length != 4)
    		throw new IllegalArgumentException(""The lines array must be four elements long."");
        handle.getStringArrays().write(0, lines);
    }
}""",1
WorldConfiguration.java,"""/** * Get whether experience is enabled * * @return true when enabled, false otherwise. Default is true. */""","""public boolean isExperienceEnabled() {
        return getBoolean(""enable-experience"", true);
    }""",1
WorldConfigStore.java,"""/** * Gets the World Configuration of the main world * * @return Main world configuration */""","""public static WorldConfig getMain() {
		return get(MyWorlds.getMainWorld());
	}""",1
XmlRpcResponse.java,"""/** * Writes an XML-RPC error response to the XML writer. */""","""void writeError(int code, String message, XmlWriter writer) {
        Map<String, Object> map = new HashMap<>();
        map.put(""faultCode"", code);
        map.put(""faultString"", message);
        writer.startElement(""methodResponse"");
        writer.startElement(""fault"");
        writeObject(map, writer);
        writer.endElement(""fault"");
        writer.endElement(""methodResponse"");
    }""",1
YarnRMConnector.java,"""/** * YARN only allows one resource size per priority, so map resource sizes * to priorities. * Should be able to remove this when YARN-314 is fixed and choose purely on * locality. */""","""static Priority getRequestPriority(int mbs, int vcores,
      com.cloudera.llama.am.api.Resource.Locality locality) {
    // Lower values mean higher priority
    // More restrictive localities should get higher priority because they are
    // harder to satisfy
    // Higher values should get higher priority because they are harder to satisfy
    // Giving memory priority over CPU isn't ideal, but the alternative isn't any better
    int priority;
    switch (locality) {
      case MUST:
        priority = 1000000;
        break;
      case PREFERRED:
        priority = 2000000;
        break;
      default:
        priority = 3000000;
        break;
    }

    priority -= mbs;
    priority -= vcores;
    return Priority.newInstance(priority);
  }""",1
WBSType.java,"""/** * Gets the value of the isBaseline property. * * @return *     possible object is *     {@link Boolean } * */""","""public Boolean isIsBaseline()
   {
      return isBaseline;
   }""",1
WebViews.java,"""/** * Indicates whether the specified DOM event can be converted to a {@link HyperlinkEvent}. * * @param domEvent *            the DOM-{@link Event} * @return true if the event's {@link Event#getType() type} has an equivalent {@link EventType EventType} */""","""public static boolean canConvertToHyperlinkEvent(Event domEvent) {
		return StaticDomEventConverter.canConvertToHyperlinkEvent(domEvent);
	}""",1
XScrollView.java,"""/** * Set last refresh time * * @param time */""","""public void setRefreshTime(String time) {
        mHeaderTime.setText(time);
    }""",1
ErrorsTest.java,"""/** * Regression test for Selenium RC issue 363. */""","""@JavascriptEnabled
@Ignore(value = {IE, MARIONETTE}, reason = ""IE does not support onerror"")
@Test
public void testShouldNotGenerateErrorsWhenOpeningANewPage() {
driver.get(pages.errorsPage);
Object result = ((JavascriptExecutor) driver).
    executeScript(""return window.ERRORS.join('\\n');"");
assertEquals(""Should have no errors"", """", result);
}""",0
UPnPPlugin.java,"""/** * Provided for use by other plugins. */""","""public void refreshMappings() {
    refreshMappings(false);
}""",0
ZParams.java,"""/** * Set weights. * @param weights weights. */""","""public ZParams weights(final double... weights) {
    params.add(WEIGHTS.raw);
    for (final double weight : weights) {
      params.add(Protocol.toByteArray(weight));
    }

    return this;
  }""",1
ZrtpPacketError.java,"""/** * Set the error code in the Error packet. * * Refer to the ZRTP specification about the error code semantics. * * @param code the error code. */""","""public final void setErrorCode(final int code) {
        ZrtpUtils.int32ToArrayInPlace(code, packetBuffer, CODE_OFFSET);
    }""",1
WidgetBean.java,"""/** * @param id *        the Widget id * @return the found Widget */""","""public final Widget findById(final int id) {
        return widgetDao.findById(id);
    }""",1
VmstaxServiceImpl.java,"""/** * @param p_oContent * @param p_sFormat * @param p_sFileName * @return * @throws IOException * @throws VmstaxParseException * @throws Exception */""","""private List<VmstaxData> parseLogFile(byte[] p_oContent, String p_sFormat,
			String p_sFileName, VmstaxContext p_oVmstaxContext ) throws IOException, VmstaxParseException,
			Exception {

		InputStream oIs = new ByteArrayInputStream(p_oContent);
		List<String> listLines = null;
		try {
			listLines = IOUtils.readLines(oIs);
		} finally {
			oIs.close();
		}

		List<VmstaxData> r_listVmstaxData = new ArrayList<VmstaxData>();
		VmstaxParser oVmstaxParser = (VmstaxParser) this.vmstaxParsers
				.get(p_sFormat);
		if (oVmstaxParser != null) {
			r_listVmstaxData.addAll(oVmstaxParser.parse(listLines, p_oVmstaxContext));
			for( VmstaxData oVmstaxData : r_listVmstaxData ) {
				oVmstaxData.setFileName(p_sFileName);
			}
		} else {
			throw new Exception(""Can't find parser for format : "" + p_sFormat);
		}

		return r_listVmstaxData;
	}""",1
WidgetUpdater.java,"""/** * update only the app widgets associated with the given id * @param context * @param dbHelper * @param appWidgetId */""","""public static void updateWidget(Context context, AppHistoryDbHelper dbHelper, int appWidgetId) {
		
		log.d(""updating widget for appWidgetId: "" + appWidgetId);
		
		AppWidgetManager manager = AppWidgetManager.getInstance(context);
		RemoteViews updateViews = buildUpdate(context, dbHelper, appWidgetId);
		if (updateViews != null) {
			manager.updateAppWidget(appWidgetId, updateViews);
		}
	}""",1
YangDiagramEditor.java,"""/** * Enables selection of source code element that corresponds to the selected diagram shape. */""","""public void startSourceSelectionUpdater() {
        GraphicalViewer graphicalViewer = getGraphicalViewer();
        if (graphicalViewer != null)
            graphicalViewer.addSelectionChangedListener(sourceSelectionUpdater);
    }""",1
WampConnection.java,"""/** * Subscribe to topic to receive events for. * * @param topicUri         URI or CURIE of topic to subscribe to. * @param meta             Subscription metadata. */""","""private void subscribe(String topicUri, SubMeta meta) {

      String uri = mOutgoingPrefixes.resolveOrPass(topicUri);

      if (!mSubs.containsKey(uri)) {

         mSubs.put(uri, meta);

         WampMessage.Subscribe msg = new WampMessage.Subscribe(mOutgoingPrefixes.shrink(topicUri));
         mWriter.forward(msg);
      }
   }""",1
IniPreferences.java,"""/** * Implements the childrenNamesSpi method as per the specification in *  java.util.prefs.AbstractPreferences#childrenNamesSpi(). */""","""@Override protected String[] childrenNamesSpi() throws BackingStoreException
{
    List<String> names = new ArrayList<String>();

    for (String name : _ini.keySet())
    {
        if (name.indexOf(_ini.getPathSeparator()) < 0)
        {
            names.add(name);
        }
    }

    return names.toArray(EMPTY);
}""",0
Wizard.java,"""/** * Introduction */""","""protected JPanel step1_setup()
{
    JTextArea introText = new JTextArea();
        introText.setLineWrap(true);
        introText.setWrapStyleWord(true);
        introText.setEditable(false);
        introText.setMargin(new Insets(10, 10, 10, 10));
        introText.setAutoscrolls(true);
        introText.setText(
            ""Welcome to D-Mason.\n""
            + ""\n""
            + ""This wizard will help you launching D-Mason on a single ""
            + ""machine for testing purposes. D-Mason is made of four ""
            + ""\""components\"" that must be executed in order to run a ""
            + ""simulation.\n""
            + ""\n""
            + ""Please hit the \""Next\"" button below to continue.""
        );
        
    JScrollPane sclIntroText = new JScrollPane(introText);
    
    JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.add(sclIntroText);
    
    return panel;
}""",0
WaveDrawable.java,"""/** * Set customised animator for wave loading animation * @param animator */""","""public void setIndeterminateAnimator(ValueAnimator animator) {
        if (mAnimator == animator) {
            return;
        }

        if (mAnimator != null) {
            mAnimator.removeUpdateListener(this);
            mAnimator.cancel();
        }

        mAnimator = animator;
        if (mAnimator != null) {
            mAnimator.addUpdateListener(this);
        }
    }""",1
WeaveCryptoUtil.java,"""/** * This code basically inlines usage of the BouncyCastle private API and is equivalent to the following code. * <pre> * {@code * PBEParametersGenerator generator = new PKCS5S2ParametersGenerator(); * generator.init(PBEParametersGenerator.PKCS5PasswordToBytes(secret), salt, 4096); * CipherParameters keyParam = generator.generateDerivedParameters(256); * return ((KeyParameter)keyParam).getKey(); * } * </pre> */""","""private static byte[] derivePKCS5S2(char[] secret, byte[] salt) throws GeneralSecurityException {
    byte[] secretBytes = passwordPKCS5ToBytes(secret);
    int keySizeInBytes = 256 / 8;
    final int iterations = 4096;
    Mac hMac = Mac.getInstance(""HMACSHA1"");
    int hLen = hMac.getMacLength();
    int l = (keySizeInBytes + hLen - 1) / hLen;
    byte[] iBuf = new byte[4];
    byte[] dKey = new byte[l * hLen];
    for (int i = 1; i <= l; i++) {
      intToOctet(iBuf, i);
      derivePKCS5S2Helper(hMac, secretBytes, salt, iterations, iBuf, dKey, (i - 1) * hLen);
    }
    byte[] retval = new byte[keySizeInBytes];
    System.arraycopy(dKey, 0, retval, 0, keySizeInBytes);
    return retval;
  }""",1
XtextResourceFactory.java,"""/** * Creates a new <code>{@link XtextResource}</code>. * @param uri the URI of the file containing the EMF model. * @param contents the contents of the file. * @return the created {@code XtextResource}. * @throws IOException if something goes wrong. */""","""public XtextResource createResource(URI uri, String contents) throws IOException {
    // TODO get project from URI.
    ResourceSet resourceSet = resourceSetProvider.get(projects.activeProject());
    XtextResource resource = (XtextResource) resourceSet.createResource(uri, UNSPECIFIED_CONTENT_TYPE);
    resource.load(new StringInputStream(contents), singletonMap(OPTION_ENCODING, UTF_8));
    resolveLazyCrossReferences(resource, NullImpl);
    return resource;
  }""",1
ZongPlatformUtils.java,"""/** * Initializes this class with the given platform-specific implementations. */""","""public static void init(ZongPlatformUtils zongPlatformUtils) {
		checkArgsNotNull(zongPlatformUtils);
		ZongPlatformUtils.zongPlatformUtils = zongPlatformUtils;
	}""",1
WebTelemetryTests.java,"""/** * Sends GET requests to server and expects that will telemetry from app insights and it will include the correct information about the request * @throws Exception */""","""@Test
    public void testHttpRequestCommonProperties() throws Exception {
        List<TelemetryItem> expectedTelemetriesForRunId = getExpectedTelemetriesForRunId(testRequestCommonPropertiesRunId);
        List<TelemetryItem> realTelemetries = applicationTelemetryManager.getApplicationTelemetries(testRequestCommonPropertiesRunId, 1);

        Assert.assertEquals(1, realTelemetries.size());
        Assert.assertEquals(expectedTelemetriesForRunId.get(0), realTelemetries.get(0));
    }""",1
ZMQ.java,"""/** * @return Major version number of the ZMQ library. */""","""public static int getMajorVersion()
    {
        return zmq.ZMQ.ZMQ_VERSION_MAJOR;
    }""",1
WrapperPlayServerOpenWindow.java,"""/** * Set the entity horse's entity ID. * <p> * Only sent when window type is equal to 11 * @param value - new value of the unknown field. */""","""public void setEntityId(int value) {
        handle.getIntegers().write(3, value);
    }""",1
WrapperPlayServerSpawnEntityExperienceOrb.java,"""/** * Set the x position of the object. * @param value - new value. */""","""public void setX(double value) {
        handle.getIntegers().write(1, (int) Math.floor(value * 32.0D));
    }""",1
Win.java,"""/** * Indicates that the annotated code is win. For example: * <p/> * <pre> *   &#064;Win(Outcome.INCONCEIVABLE) *   public class BaconExplosion { * </pre> */""","""@Documented
@Retention(RetentionPolicy.RUNTIME)
@Visionary(""Hanneli"")
public @interface Win {
    Outcome value() default Outcome.EPIC;
}""",1
IniPreferences.java,"""/** * Implements the childSpi method as per the specification in *  java.util.prefs.AbstractPreferences#childSpi(String). */""","""@Override protected SectionPreferences childSpi(String name)
{
    Ini.Section sec = _ini.get(name);
    boolean isNew = sec == null;

    if (isNew)
    {
        sec = _ini.add(name);
    }

    return new SectionPreferences(this, sec, isNew);
}""",0
WrapperLoginServerSuccess.java,"""/** * Retrieve the UUID and player name of the connected client. * @return The current client profile. */""","""public WrappedGameProfile getProfile() {
        return handle.getGameProfiles().read(0);
    }""",1
WBSMilestoneType.java,"""/** * Sets the value of the isTemplate property. * * @param value *     allowed object is *     {@link Boolean } * */""","""public void setIsTemplate(Boolean value)
   {
      this.isTemplate = value;
   }""",1
WrapperPlayServerTransaction.java,"""/** * Set the id of the window that the action occurred in.. * @param value - new value. */""","""public void setWindowId(byte value) {
        handle.getIntegers().write(0, (int) value);
    }""",1
WritableBerkeleyDBWiktionaryEdition.java,"""/** Returns the setting if {@link IWiktionaryEntry}s should be ordered *  alphabetically. */""","""public boolean getEntryIndexByTitle() {
		return entryIndexByTitle;
	}""",1
XsdAnnotationProcessorTest.java,"""/** * {@inheritDoc} */""","""@Override
    protected List<Class<?>> getJaxbAnnotatedClassesForJaxbContext() {
        return Arrays.<Class<?>>asList(SomewhatNamedPerson.class, ExampleXmlWrapper.class);
    }""",1
VpnService.java,"""/** * Returns the daemons management class for this service object. */""","""protected VpnDaemons getDaemons() {
        return mDaemons;
    }""",1
XliffReader.java,"""/** * Get current statement name * @return * @throws EOFException * @throws MifParseException ; */""","""private String getStatmentName() throws EOFException, MifParseException{
		StringBuffer bf = new StringBuffer();
		char a = r.getCharAfterIgnore();
		while (true) {
			if(a == ' ' || a == '\n' || a == '<' || a == '\r' || a == '\t' ){
				break;
			}
			bf.append(a);
			a = r.getChar();
		}
		sos--;
		if(bf.length() == 0){
			throw new MifParseException(Messages.getString(""mif.Mif2Xliff.mismatchStartOrEndTag"")
					+ formatLineNumber());
		}
		return bf.toString().toLowerCase();
	}""",1
WithEntityManager.java,"""/** * Use this annotation when not using the default entity manager. If there are more than one, * CDI Query needs to know which one to use for a specific DAO. * * @author thomashug */""","""@Target(TYPE)
@Retention(RUNTIME)
@Documented
@Inherited
public @interface WithEntityManager {
    Class<? extends Annotation>[] value();
}
}""",1
WidgetMatcherFactory.java,"""/** * Matches a perspective with the specified label. * * @param label the label of the perspective. * @return a matcher. * @since 2.0 */""","""public static org.hamcrest.Matcher withPerspectiveLabel(java.lang.String label) {
    return org.eclipse.swtbot.eclipse.finder.matchers.WithPerspectiveLabel.withPerspectiveLabel(label);
  }""",1
WordListApiTest.java,"""/** * Test adding one word. * This should be followed by updating one word and deleting one word. * * @throws Exception */""","""@Test
    public void testAddWordToList() throws Exception {
        System.out.println(""addWordToList"");
        String permalink = testList.getPermalink();
        WordListApi.addWordToList(token, permalink, ""test"");
    }""",1
WXListComponent.java,"""/** * Recycle viewHolder and its underlying view. This may because the view is removed or reused. * Either case, this method will be called. * * @param holder The view holder to be recycled. */""","""@Override
    public void onViewRecycled(ListBaseViewHolder holder) {
        long begin=System.currentTimeMillis();
        holder.setComponentUsing(false);
        recycleViewList.add(holder);
        WXLogUtils.d(TAG, ""Recycle holder "" +(System.currentTimeMillis()-begin)+""  Thread:""+Thread.currentThread().getName());
    }""",1
XmlaHandler.java,"""/** * Gets a Connection given a catalog (and implicitly the catalog's data * source) and the name of a user role. * * <p>If you want to pass in a role object, and you are making the call * within the same JVM (i.e. not RPC), register the role using * {@code mondrian.olap.MondrianServer.getLockBox()} and pass in the moniker * for the generated lock box entry. The server will retrieve the role from * the moniker. * * @param catalog Catalog name * @param schema Schema name * @param role User role name * @param props Properties to pass down to the native driver. * @return Connection * @throws XmlaException If error occurs */""","""protected OlapConnection getConnection(
        String catalog,
        String schema,
        final String role,
        Properties props)
        throws XmlaException
    {
        try {
            return
                connectionFactory.getConnection(
                    catalog, schema, role, props);
        } catch (SecurityException e) {
            throw new XmlaException(
                CLIENT_FAULT_FC,
                HSB_ACCESS_DENIED_CODE,
                HSB_ACCESS_DENIED_FAULT_FS,
                e);
        } catch (SQLException e) {
            throw new XmlaException(
                CLIENT_FAULT_FC,
                HSB_CONNECTION_DATA_SOURCE_CODE,
                HSB_CONNECTION_DATA_SOURCE_FAULT_FS,
                e);
        }
    }""",1
WrapperPlayServerUpdateAttributes.java,"""/** * Set the entity's ID. * @param value - new value. */""","""public void setEntityId(int value) {
        handle.getIntegers().write(0, value);
    }""",1
ATKScriptParser.java,"""/* * SECTION 4 - THE GRAMMAR */""","""final public ASTStart start() throws ParseException {
                       /*@bgen(jjtree) Start */
ASTStart jjtn000 = new ASTStart(JJTSTART);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
  parseFile();
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return jjtn000;}
} catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
} finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
}
throw new Error(""Missing return statement in function"");
}""",0
VOGeoServerContrastEnhancementNormalizeGreyTest.java,"""/** * Creates the channel selection error object. * * @param styleFactory the style factory * @param contrastMethod the contrast method * @return the channel selection */""","""private ChannelSelection createChannelSelectionError(StyleFactoryImpl styleFactory,
            ContrastMethod contrastMethod) {
        ContrastEnhancement contrastEnhancement = (ContrastEnhancement) styleFactory
                .contrastEnhancement(null, contrastMethod.name());

        FilterFactory ff = CommonFactoryFinder.getFilterFactory();

        Map<String, Expression> options = contrastEnhancement.getOptions();
        options.put(""algorithm"", ff.literal(""TestStretchToMinimumMaximum""));
        options.put(""minValue"", ff.literal(""1.0""));
        options.put(""maxValue"", ff.literal(""5.0""));

        SelectedChannelType channelType = styleFactory.createSelectedChannelType(""channel name"",
                contrastEnhancement);
        SelectedChannelType[] channels = new SelectedChannelType[3];
        channels[0] = channelType;
        channels[1] = channelType;
        channels[2] = channelType;
        ChannelSelection channelSelection = styleFactory.createChannelSelection(channels);
        return channelSelection;
    }""",1
WebURL.java,"""/** * @return unique document id assigned to this Url. */""","""public int getDocid() {
        return docid;
    }""",1
WiffPacket.java,"""/** * @return the source ip */""","""public int getSourceIPAsInt() {
    return getUInt(source());
  }""",1
WrapperPlayServerAnimation.java,"""/** * Retrieve the player's entity object. * @param event - the packet event. * @return The player's entity. */""","""public Entity getEntity(PacketEvent event) {
    	return getEntity(event.getPlayer().getWorld());
    }""",1
WordMean.java,"""/** * Only valuable after run() called. * * @return Returns the mean value. */""","""public double getMean() {
    return mean;
  }""",1
WorkerMessages.java,"""/** * @param recoveredWorkerID * @return */""","""public static String getExistentWorkerRecoveryMessage(String recoveredWorkerAddress) {
		return ""Receiving an already existent worker: "" + recoveredWorkerAddress;
	}""",1
XInputDeviceType.java,"""/** * Enumerates all XInput device types. * * @author Ivan ""StrikerX3"" Oliveira */""","""public enum XInputDeviceType {
    GAMEPAD(XInputConstants.XINPUT_DEVTYPE_GAMEPAD);

    private byte deviceTypeValue;

    XInputDeviceType(final byte deviceTypeValue) {
        this.deviceTypeValue = deviceTypeValue;
    }

    public byte getDeviceTypeValue() {
        return deviceTypeValue;
    }

    /**
     * Retrieves the appropriate enum value from the native value.
     *
     * @param value the native value
     * @return the corresponding enum constant
     * @throws IllegalArgumentException if the given native value does not correspond
     * to an enum value
     */
    public static XInputDeviceType fromNative(final byte value) {
        switch (value) {
            case XInputConstants.XINPUT_DEVTYPE_GAMEPAD:
                return GAMEPAD;
            default:
                throw new IllegalArgumentException(""Invalid native value "" + value);
        }
    }
}""",1
XstreamOidConverter.java,"""/** * @author toddf * @since Feb 16, 2011 */""","""public class XstreamOidConverter
implements SingleValueConverter
{
	@SuppressWarnings(""rawtypes"")
    @Override
	public boolean canConvert(Class aClass)
	{
		return ObjectId.class.isAssignableFrom(aClass);
	}

	@Override
	public Object fromString(String value)
	{
		return (ObjectId) Identifiers.MONGOID.parse(value).primaryKey();
	}

	@Override
	public String toString(Object objectId)
	{
		return ((ObjectId) objectId).toString();
	}
}""",1
AbstractCalendarView.java,"""/** * Getter methods */""","""public int getFirstDayOfWeek() {
    return mFirstDayOfWeek;
}""",0
_Application.java,"""/** * Set a default profile if it has not been set */""","""private static void addDefaultProfile(SpringApplication app, SimpleCommandLinePropertySource source) {
        if (!source.containsProperty(""spring.profiles.active"")) {
            app.setAdditionalProfiles(Constants.SPRING_PROFILE_DEVELOPMENT);
        }
    }<% if (databaseType == 'sql') { %>

    /**
     * Set the liquibases.scan.packages to avoid an exception from ServiceLocator.
     */
    private static void addLiquibaseScanPackages() {
        System.setProperty(""liquibase.scan.packages"", Joiner.on("","").join(
            ""liquibase.change"", ""liquibase.database"", ""liquibase.parser"",
            ""liquibase.precondition"", ""liquibase.datatype"",
            ""liquibase.serializer"", ""liquibase.sqlgenerator"", ""liquibase.executor"",
            ""liquibase.snapshot"", ""liquibase.logging"", ""liquibase.diff"",
            ""liquibase.structure"", ""liquibase.structurecompare"", ""liquibase.lockservice"",
            ""liquibase.ext"", ""liquibase.changelog""));
    }<% } %>""",1
ZrtpPacketDHPart.java,"""/** * Constructor for a new DHPart message with DH part type. * * @param pkt type of DH key agreement to use */""","""@SuppressWarnings(""unused"")
    public ZrtpPacketDHPart(final ZrtpConstants.SupportedPubKeys pkt) {
        super(null);
        setPubKeyType(pkt);
    }""",1
WrappedStringIdEntity.java,"""/** * @return the id */""","""public WrappedStringId getId() {
		return id;
	}""",1
ZMQ.java,"""/** * Unregister a Socket for polling on the specified events. * * @param socket the Socket to be unregistered */""","""private void unregisterInternal(Object socket)
        {
            for (int i = 0; i < next; ++i) {
                PollItem item = items[i];
                if (item == null) {
                    continue;
                }
                if (item.socket == socket || item.getRawSocket() == socket) {
                    items[i] = null;

                    freeSlots.add(i);
                    --used;

                    break;
                }
            }
        }""",1
AbstractCalendarView.java,"""/* ** Methods of UUID */""","""public boolean equals(Object otherObject)
{
    if (!(otherObject instanceof BasicUUID))
        return false;

    BasicUUID other = (BasicUUID) otherObject;

    return (this.sequence == other.sequence)
        && (this.timemillis == other.timemillis)
        && (this.majorId == other.majorId);
}""",0
WhtsExtension.java,"""/** * * @param object */""","""private void readData() {

		if (mManager == null)
			return;
		
		dashIcon=R.drawable.ic_extension_whts;

		int mCount = mManager.getmCount();
		LOGD(TAG,""count=""+mCount);

		if (mCount > 0) {
			dashVisible = true;

			dashStatus = """" + mCount;
			
			Resources res = getResources();
			String book = res.getQuantityString(R.plurals.notifications,
					mCount, mCount);
			dashTitle = book;
		
			ArrayList<MessageWht> msgs = mManager.getmMsgs();
			if (msgs != null) {
				StringBuilder sb = new StringBuilder();
				String and = """";
				
				for (MessageWht msg:msgs) {
						sb.append(and);
						sb.append(msg.getText());
						and=""\n"";
				}
				
				dashSubtitle=sb.toString();
			}

		} else {
			dashVisible = false;
		}

	}""",1
WeekView.java,"""/** * Set corner radius for event rect. * * @param eventCornerRadius the radius in px. */""","""public void setEventCornerRadius(int eventCornerRadius) {
        mEventCornerRadius = eventCornerRadius;
    }""",1
WifiDirectHandler.java,"""/** * Initiates a service discovery. This has a 2 minute timeout. To continuously * discover services use continuouslyDiscoverServices */""","""public void discoverServices(){
        // Initiates service discovery. Starts to scan for services we want to connect to
        wifiP2pManager.discoverServices(channel, new WifiP2pManager.ActionListener() {
            @Override
            public void onSuccess() {
                Log.i(TAG, ""Service discovery initiated"");
            }

            @Override
            public void onFailure(int reason) {
                Log.e(TAG, ""Failure initiating service discovery: "" + FailureReason.fromInteger(reason).toString());
            }
        });
    }""",1
WorkerMessages.java,"""/** * @param remoteWorkerID * @return */""","""public static String getUnknownOrDisposedPreemptedRemoteWorkerMessage(String remoteWorkerPublicKey) {
		return ""Preemption of an unknown or already disposed remote Worker "" +
				""with public key["" + remoteWorkerPublicKey  + ""]. This notification was ignored."";
	}""",1
YammerReplyActivity.java,"""/** * If the edit box is empty, the reply button must be grayed out. * If text is present in the edit box, the reply button must be * clickable. */""","""private OnKeyListener onReplyEditKeyListener = new OnKeyListener() {
		public boolean onKey(View v, int keyCode, KeyEvent event) {
			// Reply button only enabled, when something written in the edit box
			setReplyButtonState();
			return false;
		}
	};""",1
WBSMilestoneType.java,"""/** * Sets the value of the projectId property. * * @param value *     allowed object is *     {@link String } * */""","""public void setProjectId(String value)
   {
      this.projectId = value;
   }""",1
WBSType.java,"""/** * Sets the value of the summaryVarianceAtCompletionByLaborUnits property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryVarianceAtCompletionByLaborUnits(Double value)
   {
      this.summaryVarianceAtCompletionByLaborUnits = value;
   }""",1
WifiDirectHandler.java,"""/** * Removes a registered local service. */""","""public void removeService() {
        if(wifiP2pServiceInfo != null) {
            Log.i(TAG, ""Removing local service"");
            wifiP2pManager.removeLocalService(channel, wifiP2pServiceInfo, new WifiP2pManager.ActionListener() {
                @Override
                public void onSuccess() {
                    wifiP2pServiceInfo = null;
                    Intent intent = new Intent(Action.SERVICE_REMOVED);
                    localBroadcastManager.sendBroadcast(intent);
                    Log.i(TAG, ""Local service removed"");
                }

                @Override
                public void onFailure(int reason) {
                    Log.e(TAG, ""Failure removing local service: "" + FailureReason.fromInteger(reason).toString());
                }
            });
            wifiP2pServiceInfo = null;
        } else {
            Log.w(TAG, ""No local service to remove"");
        }
    }""",1
ZookeeperCacheTest.java,"""/** * Verifies that blocking call on zkCache-callback will not introduce deadlock because zkCache completes * future-result with different thread than zookeeper-client thread. * * @throws Exception */""","""@Test(timeOut = 2000)
    void testZkCallbackThreadStuck() throws Exception {
        OrderedSafeExecutor executor = new OrderedSafeExecutor(1, ""test"");
        ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(2);
        ExecutorService zkExecutor = Executors.newSingleThreadExecutor(new DefaultThreadFactory(""mockZk""));
        // add readOpDelayMs so, main thread will not serve zkCacahe-returned future and let zkExecutor-thread handle
        // callback-result process
        MockZooKeeper zkClient = MockZooKeeper.newInstance(zkExecutor, 100);
        ZooKeeperCache zkCacheService = new LocalZooKeeperCache(zkClient, executor, scheduledExecutor);
        ZooKeeperDataCache<String> zkCache = new ZooKeeperDataCache<String>(zkCacheService) {
            @Override
            public String deserialize(String key, byte[] content) throws Exception {
                return new String(content);
            }
        };

        String value = ""test"";
        String key = ""/"" + UUID.randomUUID().toString().substring(0, 8);
        String key1 = ""/"" + UUID.randomUUID().toString().substring(0, 8);
        String key2 = ""/"" + UUID.randomUUID().toString().substring(0, 8);
        zkClient.create(key, value.getBytes(), null, null);
        zkClient.create(key1, value.getBytes(), null, null);
        zkClient.create(key2, value.getBytes(), null, null);

        CountDownLatch latch = new CountDownLatch(1);

        zkCache.getAsync(key).thenAccept(val -> {
            try {
                zkCache.get(key1);
            } catch (Exception e) {
                fail(""failed to get "" + key2, e);
            }
            latch.countDown();
        });

        latch.await();
        executor.shutdown();
        zkExecutor.shutdown();
        scheduledExecutor.shutdown();
    }""",1
WrapperPlayServerEntityVelocity.java,"""/** * Retrieve the velocity in the x axis. * @return The current velocity X */""","""public double getVelocityX() {
        return handle.getIntegers().read(1) / 8000.0D;
    }""",1
WrapperPlayServerPosition.java,"""/** * Retrieve absolute position. * @return The current X */""","""public double getX() {
        return handle.getDoubles().read(0);
    }""",1
WikipediaExample.java,"""/** * this will lazily continue searches, making new http calls as necessary. * * @param wikipedia used to search * @param query     see {@link Wikipedia#search(String)}. */""","""static Iterator<Page> lazySearch(final Wikipedia wikipedia, final String query) {
    final Response<Page> first = wikipedia.search(query);
    if (first.nextOffset == null) {
      return first.iterator();
    }
    return new Iterator<Page>() {
      Iterator<Page> current = first.iterator();
      Long nextOffset = first.nextOffset;

      @Override
      public boolean hasNext() {
        while (!current.hasNext() && nextOffset != null) {
          System.out.println(""Wow.. even more results than "" + nextOffset);
          Response<Page> nextPage = wikipedia.resumeSearch(query, nextOffset);
          current = nextPage.iterator();
          nextOffset = nextPage.nextOffset;
        }
        return current.hasNext();
      }

      @Override
      public Page next() {
        return current.next();
      }

      @Override
      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }""",1
Volley.java,"""/** * Creates a default instance of the worker pool and calls {@link RequestQueue#start()} on it. * * @param context A {@link Context} to use for creating the cache dir. * @param stack An {@link HttpStack} to use for the network, or null for default. * @return A started {@link RequestQueue} instance. */""","""public static RequestQueue newRequestQueue(Context context, HttpStack stack)
    {
    	return newRequestQueue(context, stack, -1);
    }""",1
X509Encryption.java,"""/** * The private key for decryption. */""","""public PrivateKey getPrivateKey()
  {
    return _privateKey;
  }""",1
WrapperPlayServerBlockAction.java,"""/** * Set block Z Coordinate. * @param value - new value. */""","""public void setZ(int value) {
        handle.getIntegers().write(2, value);
    }""",1
WorkerManager.java,"""/** * Performs a deep copy on <i>other</i>. */""","""public add_worker_result(add_worker_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.is_set_ne()) {
        this.ne = new NebuException(other.ne);
      }
    }""",1
WrapperPlayServerRelEntityMove.java,"""/** * Retrieve the relative movement in the z axis. * <p> * Note that this cannot exceed 4 blocks in either direction. * @return The current dZ */""","""public double getDz() {
        return handle.getBytes().read(2) / 32.0D;
    }""",1
WrapperPlayServerBlockChange.java,"""/** * Set block Z Coordinate. * @param value - new value. */""","""public void setZ(int value) {
        handle.getIntegers().write(2, value);
    }""",1
YangFormattingPreferences.java,"""/** * @return the formatComment */""","""public boolean isFormatComment() {
        return formatComment;
    }""",1
ZoomPanel.java,"""/** * Adds an action listener that will be notified when the zoom level changes. */""","""public void addActionListener(ActionListener listener) {
        if (listener == null) {
            return;
        }
        
        this.listeners.add(listener);
    }""",1
WorkerState.java,"""/** * It presents the states of {@link Worker}. */""","""public enum WorkerState {
  /** New worker */
  NEW,

  /** Running worker */
  RUNNING,

  /** Worker is unhealthy */
  UNHEALTHY,

  /** worker is out of service */
  DECOMMISSIONED,

  /** worker has not sent a heartbeat for some configured time threshold */
  LOST;

  @SuppressWarnings(""unused"")
  public boolean isUnusable() {
    return (this == UNHEALTHY || this == DECOMMISSIONED || this == LOST);
  }
}""",1
AbstractCalendarView.java,"""/** * fluent setter */""","""public BasicLink withHref(final String href) {
    this.setHref(href);
    return this;
}""",0
YeastGenerator.java,"""/** * Determines if the given item stack can be replicated as a yeast item * * @param stack - item stack to test * @return true, it can be replicated, false otherwise */""","""public boolean canReplicateYeast(ItemStack stack)
	{
		// prevent production if the stack size is currently maxed
		if (stack.stackSize >= stack.getMaxStackSize()) return false;
		// prevent item pointless ticking with invalid items
		if (!CellarRegistry.instance().yeast().isYeast(stack)) return false;
		return true;
	}""",1
Xcss2EcssConverter.java,"""/** * Create the SAX parser */""","""private void create() throws SAXException, ParserConfigurationException {
            // Obtain a new instance of a SAXParserFactory.
            SAXParserFactory factory = SAXParserFactory.newInstance();
            // Specifies that the parser produced by this code will provide support for XML namespaces.
            factory.setNamespaceAware(true);
            // Specifies that the parser produced by this code will validate documents as they are parsed.
            // factory.setValidating(true);
            // Creates a new instance of a SAXParser using the currently configured factory parameters.
            saxParser = factory.newSAXParser();
        }""",1
WordApiTest.java,"""/** * Test of hyphenation method, of class WordApi. */""","""@Test
    public void testHyphenation_4args() throws Exception {
        System.out.println(""hyphenation"");
        String word = ""computer"";
        boolean useCanonical = false;
        SourceDictionary sourceDictionary = null;
        int limit = 0;

        List<Syllable> result = WordApi.hyphenation(word, useCanonical, sourceDictionary, limit);

        assertNotNull(result);
        assertEquals(result.size(), 3);
    }""",1
ZoomPanel.java,"""/** * Returns the current zoom level. 1.0 means 100% */""","""public double getCurrentZoomLevel() {
        return currentZoomLevel;
    }""",1
XposedBridge.java,"""/** * Try to load all modules defined in <code>BASE_DIR/conf/modules.list</code> */""","""private static void loadModules(String startClassName) throws IOException {
        BufferedReader apks = new BufferedReader(new FileReader(BASE_DIR + ""conf/modules.list""));
        String apk;
        log("">>>load modules"");
        while ((apk = apks.readLine()) != null) {
            log(""load modules: ""+apk);
            loadModule(apk, startClassName);
        }
        log(""<<<load modules"");
        apks.close();
    }""",1
X509KeyUsage.java,"""/** * A holding class for constructing an X509 Key Usage extension. * * <pre> *    id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 } * *    KeyUsage ::= BIT STRING { *         digitalSignature        (0), *         nonRepudiation          (1), *         keyEncipherment         (2), *         dataEncipherment        (3), *         keyAgreement            (4), *         keyCertSign             (5), *         cRLSign                 (6), *         encipherOnly            (7), *         decipherOnly            (8) } * </pre> */""","""public class X509KeyUsage
    extends ASN1Encodable
{
    public static final int        digitalSignature = 1 << 7; 
    public static final int        nonRepudiation   = 1 << 6;
    public static final int        keyEncipherment  = 1 << 5;
    public static final int        dataEncipherment = 1 << 4;
    public static final int        keyAgreement     = 1 << 3;
    public static final int        keyCertSign      = 1 << 2;
    public static final int        cRLSign          = 1 << 1;
    public static final int        encipherOnly     = 1 << 0;
    public static final int        decipherOnly     = 1 << 15;

    private int usage = 0;

    /**
     * Basic constructor.
     * 
     * @param usage - the bitwise OR of the Key Usage flags giving the
     * allowed uses for the key.
     * e.g. (X509KeyUsage.keyEncipherment | X509KeyUsage.dataEncipherment)
     */
    public X509KeyUsage(
        int usage)
    {
        this.usage = usage;
    }

    public DERObject toASN1Object()
    {
        return new KeyUsage(usage);
    }
}""",1
AAbout.java,"""/** * Final Strings variables. */""","""private String ABOUT_APP = null;

@Override
public void onCreate(Bundle bundle) {
    super.onCreate(bundle);
    ABOUT_APP = "" AIO video downloader [ "" + ""Version - "" + versionName + "" ]\n"" +
            "" Powered by SoftC Software LLC."";

    context = AAbout.this;

    setContentView(R.layout.about_activity);

    initViews();
    initOnClick();
}""",0
XTraceLoggerImpl.java,"""/** * XTrace logger is only valid if the current execution has an X-Trace Task * ID * * @return true if the current execution is valid and can log, false *         otherwise */""","""public boolean valid() {
        return XTraceSettings.discoveryMode() || XTraceBaggageInterface.hasTaskID();
    }""",1
WBSType.java,"""/** * Gets the value of the summaryActivityCount property. * * @return *     possible object is *     {@link Integer } * */""","""public Integer getSummaryActivityCount()
   {
      return summaryActivityCount;
   }""",1
WizPurchase.java,"""/** * Convert a List of Purchase objects in Java-land to an array of JSON Purchase objects to be returned to JS-land * * @param purchase List of purchases to transform to a JSON array **/""","""JSONArray convertToJSONArray(List<Purchase> purchaseList) throws JSONException {
		// Convert the java list to JSON
		JSONArray jsonPurchaseList = new JSONArray();
		// Iterate all products
		for (Purchase p : purchaseList) {
			jsonPurchaseList.put(convertToJSONObject(p));
		}
		// Return the JSON list
		return jsonPurchaseList;
	}""",1
ZMQ.java,"""/** * @see #setTCPKeepAlive(int) * * @return the keep alive setting. */""","""public int getTCPKeepAlive()
        {
            return base.getSocketOpt(zmq.ZMQ.ZMQ_TCP_KEEPALIVE);
        }""",1
VoterConfig.java,"""/** * Used for RPC IPC example  */""","""@Bean
public DirectExchange directExchange() {
    return new DirectExchange(""voter.rpc"");
}""",0
WifiDirectHandler.java,"""/** * Unregisters the WifiDirectBroadcastReceiver and IntentFilter */""","""public void unregisterP2pReceiver() {
        if (p2pBroadcastReceiver != null) {
            unregisterReceiver(p2pBroadcastReceiver);
            p2pBroadcastReceiver = null;
            Log.i(TAG, ""P2P BroadcastReceiver unregistered"");
        }
    }""",1
XMLList.java,"""/** * * @return */""","""QName name()
    {
        if (length() == 1)
        {
            return getXmlFromAnnotation(0).name();
        }
        else
        {
            throw ScriptRuntime.typeError(""The name method works only on lists containing one item"");
        }
    }""",1
WXBaseCircleIndicator.java,"""/** * @param context * @param attrs */""","""public WXBaseCircleIndicator(Context context, AttributeSet attrs) {
    super(context, attrs);
    getAttrs(context);
    init();
  }""",1
XMLFieldConfigMapUnit.java,"""/** * *                 Configuration for a drop down list of map units * * * <p>Java class for XMLFieldConfigMapUnit complex type. * * <p>The following schema fragment specifies the expected content contained within this class. * * <pre> * &lt;complexType name=""XMLFieldConfigMapUnit""&gt; *   &lt;complexContent&gt; *     &lt;extension base=""{}XMLFieldConfigData""&gt; *     &lt;/extension&gt; *   &lt;/complexContent&gt; * &lt;/complexType&gt; * </pre> * * */""","""@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""XMLFieldConfigMapUnit"")
public class XMLFieldConfigMapUnit
    extends XMLFieldConfigData
{


}""",1
WrapperPlayServerAbilities.java,"""/** * Set the current flying speed. * @param value - new value. */""","""public void setFlyingSpeed(float value) {
        handle.getFloat().write(0, value);
    }""",1
Volta.java,"""/** * Gets the index of the measure, where this volta ends (inclusive). */""","""public int getEndMeasureIndex() {
		return getMP().measure + length - 1;
	}""",1
AbstractCalendarView.java,"""/* * a bug was introduced where the RenderContext in BasicVisualizationServer was reassigned. */""","""public void testRenderContextNotOverridden() {
SparseGraph<Object, Object> graph = new SparseGraph<Object, Object>();
CircleLayout<Object, Object> layout = new CircleLayout<Object, Object>(graph);

BasicVisualizationServer<Object, Object> server = new BasicVisualizationServer<Object, Object>(layout);

PickedState<Object> pickedVertexState = server.getRenderContext().getPickedVertexState();
assertNotNull(pickedVertexState);
}""",0
WrapperPlayClientAbilities.java,"""/** * Set whether or not the current player is in creative mode. * @param value - new value. */""","""public void setCreativeMode(boolean value) {
        handle.getSpecificModifier(boolean.class).write(0, value);
    }""",1
Znc.java,"""/** * * @param plugin the PurpleIRC plugin */""","""public Znc(PurpleIRC plugin) {
        this.plugin = plugin;
    }""",1
WidgetMarketplaceController.java,"""/** * Views the marketplace tab with category results * @param model * @param referringPageId * @param category * @param offset * @return */""","""@RequestMapping(value = { ""category/{category}"" }, method = RequestMethod.GET)
	public String viewCategory(Model model,
			@RequestParam String referringPageId,
			@PathVariable String category,
			@RequestParam(required = false, defaultValue = ""0"") int offset) {

		final String view = ViewNames.ADD_WIDGET_MARKETPLACE;

		User user = userService.getAuthenticatedUser();
		widgetStoreModelHelper(model, referringPageId, user, view);

        try {
            if(category.equals(""0"")){
                model.addAttribute(ModelKeys.WIDGETS, marketplaceService
                    .getWidgetsByFreeTextSearch("""", offset, getPageSize()));
                model.addAttribute(ModelKeys.CATEGORIES, marketplaceService.getCategories());
            }else{
                model.addAttribute(ModelKeys.WIDGETS, marketplaceService.getWidgetsByCategory(category, offset, getPageSize()));
                model.addAttribute(ModelKeys.CATEGORIES, marketplaceService.getCategories());
                model.addAttribute(ModelKeys.SELECTED_CATEGORY, category);
            }
		} catch (Exception e) {
			model.addAttribute(ModelKeys.ERROR_MESSAGE, ""Marketplace not available"");
		}""",1
AbstractCalendarView.java,"""/** * stepFailWithLongException will throw an exception with very long message, and the exception should be truncated and stored in job repository STEP_EXECUTION table . */""","""@Test
public void testStepFailWithLongException() throws Exception {
    final Properties params = Batchlet1Test.createParams(Batchlet1.ACTION, Batchlet1.ACTION_LONG_EXCEPTION);
    System.out.printf(""Start with params %s%n"", params);
    final long jobExecutionId = jobOperator.start(jobName4, params);
    final JobExecutionImpl jobExecution = (JobExecutionImpl) jobOperator.getJobExecution(jobExecutionId);
    jobExecution.awaitTermination(waitTimeoutMinutes, TimeUnit.MINUTES);
    Assert.assertEquals(BatchStatus.FAILED, jobExecution.getBatchStatus());
    final StepExecutionImpl stepExecution = (StepExecutionImpl) jobExecution.getStepExecutions().get(0);
    Assert.assertEquals(BatchStatus.FAILED, stepExecution.getBatchStatus());
    Assert.assertEquals(Batchlet1.ACTION_LONG_EXCEPTION, stepExecution.getExitStatus());

    final Exception exception = stepExecution.getException();
    Assert.assertNotNull(exception);
    final String message = exception.getMessage();
    //System.out.printf(""Step exception message: %s%n"", message.substring(0, Math.min(message.length(), 1000)));
    Assert.assertEquals(true, message.startsWith(Batchlet1.ACTION_LONG_EXCEPTION));
}""",0
ZanExtract.java,"""/** * @param shuoshuo_id * @return zan url */""","""private static String getZanUrl(int index) {
		return zan_url.replace(""zanurl"", shuoshuoid_list.get(index));
	}""",1
WBSType.java,"""/** * Gets the value of the summaryLaborCostPercentComplete property. * * @return *     possible object is *     {@link Double } * */""","""public Double getSummaryLaborCostPercentComplete()
   {
      return summaryLaborCostPercentComplete;
   }""",1
MasterServer.java,"""/** * From simulation configuration field division */""","""private HashMap<String/*idtopic*/, List<CellType>> divideForUniform(int rows,int cols,HashMap<String, Integer> slots,HashMap<String/*idtopic*/, List<CellType>> workerlist, int assignedLP){
    ArrayList<String> workerID=new ArrayList<String>(slots.keySet());
    int w=0;
    int lastIndex=-1;
    boolean goNext=false;
    for(int i=0; i < rows; i++){
        goNext=false; lastIndex=-1;
        for(int j=0; j < cols;){

            if(slots.get(workerID.get(w)) > 0)
            {
                slots.put(workerID.get(w), slots.get(workerID.get(w))-1);
                List<CellType> cells=workerlist.get(workerID.get(w))==null?new ArrayList<CellType>():workerlist.get(workerID.get(w));
                cells.add(new CellType(i,j));
                workerlist.put(workerID.get(w),cells);
                assignedLP--;
                goNext=true;

            }
            if(goNext){
                j++;
                goNext=false;
                lastIndex=-1;
            }
            else{
                if(lastIndex==w)
                    System.err.println(""errore""); 
                //	throw new DMasonException(""Error! Not enough slots on the workers for the given partitioning."");

                if(lastIndex==-1) lastIndex=w;
            }
            w=(w+1)%slots.size();
            if(assignedLP < 1) break;
        }
    }
    return workerlist;
}""",0
AbstractAxis3D.java,"""/** * Provides serialization support. */""","""private void readObject(ObjectInputStream stream)
    throws IOException, ClassNotFoundException {
    stream.defaultReadObject();
    this.lineStroke = SerialUtils.readStroke(stream);
}""",0
WBSType.java,"""/** * Sets the value of the projectId property. * * @param value *     allowed object is *     {@link String } * */""","""public void setProjectId(String value)
   {
      this.projectId = value;
   }""",1
ZMQ.java,"""/** * The ZMQ_BACKLOG option shall set the maximum length * of the queue of outstanding peer connections for the specified socket; * this only applies to connection-oriented transports. * For details refer to your operating system documentation for the listen function. * * @param value the maximum length of the queue of outstanding peer connections. * @return true if the option was set, otherwise false. * @see #getBacklog() */""","""public boolean setBacklog(int value)
        {
            return setSocketOpt(zmq.ZMQ.ZMQ_BACKLOG, value);
        }""",1
BulkRowObjWrapper.java,"""/** * Should only be called if the request didn't specify a rowFilterScope  */""","""public void setRowFilterScope(RowFilterScope rowFilterScope) {
if ( !nullIncomingScope ) {
  throw new IllegalStateException(""Should not be called"");
}
this.rowFilterScope = rowFilterScope;
row.setRowFilterScope(rowFilterScope);
}""",0
TestApk.java,"""/** * Black Box Test  Method */""","""public void testDisplayBlackBox() throws Throwable {  
   String exitCommand="""";
    //getting commands from remote service  and execute them
    do {
        if(remoteConnection!=null) {
            try  {
                 cmd=serviceb.getEvent();
                 if(cmd!=null){
                     exitCommand=cmd[0];
                     if(!cmd[0].equalsIgnoreCase(""ExitSolo"")) {
                         executeSoloCommand.execute(cmd);
                         Log.d(logTag, cmd[0]);
                        }
                 }
                
            } catch (RemoteException e) {
                Log.d(logTag,e.getMessage(),e);	
            }
        }
    } while(!exitCommand.equalsIgnoreCase(""ExitSolo""));


}""",0
WrapperPlayServerSpawnEntityWeather.java,"""/** * Retrieve the y coordinate of the thunderbolt. * @return The current y */""","""public double getY() {
        return handle.getIntegers().read(2) / 32.0D;
    }""",1
WrapperPlayServerSpawnEntityPainting.java,"""/** * Set center X coordinate. * @param value - new value. */""","""public void setX(int value) {
        handle.getIntegers().write(1, value);
    }""",1
WireMillRecipes.java,"""/** * Adds a drawing recipe. * * @param input *            As an ItemStack * @param output *            As an ItemStack * @param ticks *            The ticks required for the recipe, seconds * 20. */""","""public void addProcessing(ItemStack input, ItemStack output, int ticks)
    {
        try
        {
            if (input != null && output != null && ticks > 0)
            {
                int nextRecipeID = this.recipeToOutput.size();
                this.inputToRecipe.put(stackSizeToOne(input) + """", nextRecipeID);
                this.recipeToInput.put(nextRecipeID, stackSizeToOne(input));
                this.recipeToOutput.put(nextRecipeID, output);
                this.recipeToTicks.put(nextRecipeID, ticks);
                this.recipeToInputQTY.put(nextRecipeID, input.stackSize);
            }
            else if (input == null)
                throw new IOException(""Error: Input cannot be null."");
            else if (output == null)
                throw new IOException(""Error: Output cannot be null."");
            else if (ticks <= 0)
                throw new IOException(""Error: Ticks must be greater than 0."");
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }""",1
WBSType.java,"""/** * Gets the value of the summaryActualFinishDate property. * * @return *     possible object is *     {@link String } * */""","""public Date getSummaryActualFinishDate()
   {
      return summaryActualFinishDate;
   }""",1
Win32PrintJob.java,"""/** * updates a Paper object to reflect the current printer's selected * paper size and imageable area for that paper size. * Default implementation copies settings from the original, applies * applies some validity checks, changes them only if they are * clearly unreasonable, then sets them into the new Paper. * Subclasses are expected to override this method to make more * informed decisons. */""","""protected void validatePaper(Paper origPaper, Paper newPaper) {
        if (origPaper == null || newPaper == null) {
            return;
        } else {
            double wid = origPaper.getWidth();
            double hgt = origPaper.getHeight();
            double ix = origPaper.getImageableX();
            double iy = origPaper.getImageableY();
            double iw = origPaper.getImageableWidth();
            double ih = origPaper.getImageableHeight();

            /* Assume any +ve values are legal. Overall paper dimensions
             * take precedence. Make sure imageable area fits on the paper.
             */
            Paper defaultPaper = new Paper();
            wid = ((wid > 0.0) ? wid : defaultPaper.getWidth());
            hgt = ((hgt > 0.0) ? hgt : defaultPaper.getHeight());
            ix = ((ix > 0.0) ? ix : defaultPaper.getImageableX());
            iy = ((iy > 0.0) ? iy : defaultPaper.getImageableY());
            iw = ((iw > 0.0) ? iw : defaultPaper.getImageableWidth());
            ih = ((ih > 0.0) ? ih : defaultPaper.getImageableHeight());
            /* full width/height is not likely to be imageable, but since we
             * don't know the limits we have to allow it
             */
            if (iw > wid) {
                iw = wid;
            }
            if (ih > hgt) {
                ih = hgt;
            }
            if ((ix + iw) > wid) {
                ix = wid - iw;
            }
            if ((iy + ih) > hgt) {
                iy = hgt - ih;
            }
            newPaper.setSize(wid, hgt);
            newPaper.setImageableArea(ix, iy, iw, ih);
        }
    }""",1
WidgetHistogramXaxisType.java,"""/** * Checks if the axis mode is ""normal"" or ""locked center"" * * @return    True if the axis mode is ""locked center"" */""","""public boolean isAxisCentered() {
		
		return axisTypeCombobox.getSelectedItem().toString().equals(""Locked Center"");
		
	}""",1
ResponseBody.java,"""/** * getBadRequestResult * @return bad request response * @throws Exception */""","""@JsonIgnore
public Result getBadRequestResult (
VangavException vangavException,
UUID requestId) throws Exception {

try {
  
  ResponseBodyError responseBodyError =
    new ResponseBodyError(vangavException, requestId);
  
  return Results.badRequest((String)responseBodyError.getContent() );
} catch (Exception e) {
  
  try {
    
    ResponseBodyError responseBodyError =
      new ResponseBodyError(vangavException);
    
    return Results.badRequest((String)responseBodyError.getContent() );
  } catch (Exception e2) {
    
    try {

      ResponseBodyError responseBodyError =
        new ResponseBodyError(requestId);
      
      return Results.badRequest((String)responseBodyError.getContent() );
    } catch (Exception e3) {

      ResponseBodyError responseBodyError =
        new ResponseBodyError();
      
      return Results.badRequest((String)responseBodyError.getContent() );
    }
  }
}
}""",0
WookiModule.java,"""/** * Allow to return error code instance. * * @param componentInstanceProcessor * @param configuration */""","""public void contributeComponentEventResultProcessor(
            @Traditional @ComponentInstanceProcessor ComponentEventResultProcessor componentInstanceProcessor,
            MappedConfiguration<Class, ComponentEventResultProcessor> configuration)
    {
        configuration.addInstance(HttpError.class, HttpErrorResultProcessor.class);
    }""",1
WordsApiTest.java,"""/** * Test of wordOfTheDay method, of class WordsApi. */""","""@Test
	public void testWordOfTheDay() throws Exception {
		System.out.println(""wordOfTheDay"");
		WordOfTheDay result = WordsApi.wordOfTheDay();
		assertNotNull(result);
		assertTrue(result.getDefinitions().size() > 0);
		assertTrue(result.getExamples().size() > 0);
	}""",1
WrapperPlayServerEntityMetadata.java,"""/** * Set the list of the watchable objects (meta data). * @param value - new value. */""","""public void setEntityMetadata(List<WrappedWatchableObject> value) {
        handle.getWatchableCollectionModifier().write(0, value);
    }""",1
WorkspaceHomeProperty.java,"""/** * Get the home directory for the given node. * * @param node *            The node * @return The home directory */""","""public static FilePath get(Node node) {
	// Get the potential properties
	WorkspaceHomeProperty[] properties = new WorkspaceHomeProperty[] {
		node.getNodeProperties().get(WorkspaceHomeProperty.class),
		Jenkins.getInstance().getGlobalNodeProperties().get(WorkspaceHomeProperty.class) };
	// Go threw the properties
	for (WorkspaceHomeProperty property : properties)
	    // Check if exists
	    if (property != null)
		// Check if valid
		if (Util.fixEmpty(property.getHome()) != null)
		    // Return the home folder
		    return new FilePath(node.getChannel(), property.getHome());
	// Else relative to root
	return node.getRootPath().child(Workspace.BASENAME).child(""jobs"");
    }""",1
CTarget.java,"""/** * Overrides the standard grammar analysis so we can prepare the analyser * a little differently from the other targets. */""","""@Override
protected void performGrammarAnalysis(CodeGenerator generator, Grammar grammar) {

    // Check to see if the maximum inline DFA states is still set to
    // the default size. If it is then whack it all the way up to the maximum that
    // we can sensibly get away with.
    //
    if (CodeGenerator.MAX_ACYCLIC_DFA_STATES_INLINE == CodeGenerator.MADSI_DEFAULT) {

        CodeGenerator.MAX_ACYCLIC_DFA_STATES_INLINE = 65535;
    }

    // Check to see if the maximum switch size is still set to the default
    // and bring it up much higher if it is. Modern C compilers can handle
    // much bigger switch statements than say Java can and if anyone finds a compiler
    // that cannot deal with such big switches, all the need do is generate the
    // code with a reduced -Xmaxswitchcaselabels nnn
    //
    if  (CodeGenerator.MAX_SWITCH_CASE_LABELS == CodeGenerator.MSCL_DEFAULT) {

        CodeGenerator.MAX_SWITCH_CASE_LABELS = 3000;
    }

    // Check to see if the number of transitions considered a miminum for using
    // a switch is still at the default. Because a switch is still generally faster than
    // an if even with small sets, and given that the optimizer will do the best thing with it
    // anyway, then we simply want to generate a switch for any number of states.
    //
    if (CodeGenerator.MIN_SWITCH_ALTS == CodeGenerator.MSA_DEFAULT) {

        CodeGenerator.MIN_SWITCH_ALTS = 1;
    }

    // Now we allow the superclass implementation to do whatever it feels it
    // must do.
    //
    super.performGrammarAnalysis(generator, grammar);
}""",0
WorldChunkManagerTofu.java,"""/** * Gets the list of valid biomes for the player to spawn in. */""","""@Override
    public List getBiomesToSpawnIn()
    {
        return this.biomesToSpawnIn;
    }""",1
WorkspacesApi.java,"""/* * Set to **true** to return extended details about the user. The default is **false**. */""","""public void setIncludeUserDetail(String includeUserDetail) {
		this.includeUserDetail = includeUserDetail;
	}""",1
WallPostFragment.java,"""/** * Delete a post, along with a confirmation * * @param selectedWallId The id of the post to delete */""","""private void deletePost(final String selectedWallId) {

        final AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getActivity());

        // set title
        alertDialogBuilder.setTitle(""Confirm"");

        // set dialog message
        alertDialogBuilder.setMessage(getResources().getString(R.string.delete_wall_alert_message)).setCancelable(false).setPositiveButton(""Yes"", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(final DialogInterface dialog, final int id) {

                callDeleteApi(selectedWallId);
                dialog.dismiss();
            }
        }).setNegativeButton(""No"", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(final DialogInterface dialog, final int id) {
                // if this button is clicked, just close
                // the dialog box and do nothing
                dialog.cancel();
            }
        });

        // create alert dialog
        final AlertDialog alertDialog = alertDialogBuilder.create();

        // show it
        alertDialog.show();
    }""",1
WifiDirectHandler.java,"""/** * Initiates a connection to a service * @param service The service to connect to */""","""public void initiateConnectToService(DnsSdService service) {
        // Device info of peer to connect to
        WifiP2pConfig wifiP2pConfig = new WifiP2pConfig();
        wifiP2pConfig.deviceAddress = service.getSrcDevice().deviceAddress;
        wifiP2pConfig.wps.setup = WpsInfo.PBC;

        // Starts a peer-to-peer connection with a device with the specified configuration
        wifiP2pManager.connect(channel, wifiP2pConfig, new WifiP2pManager.ActionListener() {
            // The ActionListener only notifies that initiation of connection has succeeded or failed

            @Override
            public void onSuccess() {
                Log.i(TAG, ""Initiating connection to service"");
            }

            @Override
            public void onFailure(int reason) {
                Log.e(TAG, ""Failure initiating connection to service: "" + FailureReason.fromInteger(reason).toString());
            }
        });
    }""",1
YoutubeActivityUtil.java,"""/** * Add the Youtube extensions to the Activity object that we're building. * @param activity Activity * @param video Video */""","""private static void addYoutubeExtensions(Activity activity, Video video) {
    Map<String, Object> extensions = ExtensionUtil.getInstance().ensureExtensions(activity);

    extensions.put(""youtube"", video);

    if (video.getStatistics() != null) {
      Map<String, Object> likes = new HashMap<>();
      likes.put(""count"", video.getStatistics().getCommentCount());
      extensions.put(""likes"", likes);
    }
  }""",1
XContentBuilder.java,"""/** * Returns the actual stream used. */""","""public BytesStream bytesStream() throws IOException {
        close();
        return (BytesStream) bos;
    }""",1
WorkQueueFrontier.java,"""/** * @param w Where to write to. */""","""@Override
    public void shortReportLineTo(PrintWriter w) {
        if (!isRunning()) return; //???
        
        if (this.allQueues == null) {
            return;
        }
        int allCount = allQueues.size();
        int inProcessCount = inProcessQueues.size();
        int readyCount = readyClassQueues.size();
        int snoozedCount = getSnoozedCount();
        int activeCount = inProcessCount + readyCount + snoozedCount;
        int inactiveCount = getTotalEligibleInactiveQueues();
        int ineligibleCount = getTotalIneligibleInactiveQueues();
        int retiredCount = getRetiredQueues().size();
        int exhaustedCount = 
            allCount - activeCount - inactiveCount - retiredCount;
        State last = lastReachedState;
        w.print(last);
        w.print("" - "");
        w.print(allCount);
        w.print("" URI queues: "");
        w.print(activeCount);
        w.print("" active ("");
        w.print(inProcessCount);
        w.print("" in-process; "");
        w.print(readyCount);
        w.print("" ready; "");
        w.print(snoozedCount);
        w.print("" snoozed); "");
        w.print(inactiveCount);
        w.print("" inactive; "");
        w.print(ineligibleCount);
        w.print("" ineligible; "");
        w.print(retiredCount);
        w.print("" retired; "");
        w.print(exhaustedCount);
        w.print("" exhausted"");        
        w.flush();
    }""",1
WrapperPlayServerEntityMoveLook.java,"""/** * Set the relative movement in the y axis. * <p> * Note that this cannot exceed 4 blocks in either direction. * @param value - new value. */""","""public void setDy(double value) {
    	if (Math.abs(value) > 4)
    		throw new IllegalArgumentException(""Displacement cannot exceed 4 meters."");
        handle.getBytes().write(1, (byte) Math.min(Math.floor(value * 32.0D), 127));
    }""",1
WalletPrecheckoutDataRequest.java,"""/** * Sets the value of the pairingDataType property. * * @param value *     allowed object is *     {@link WalletPrecheckoutDataRequest.PairingDataTypes.PairingDataType } * */""","""public void setPairingDataType(WalletPrecheckoutDataRequest.PairingDataTypes.PairingDataType value) {
            this.pairingDataType = value;
        }""",1
WaveformAnalysis.java,"""/** * This function sums up over a series of intensity/time values. * @param list A list of intensity/time points. * @return A point of summed intensities with the time set to the start of the list. */""","""private static XZ sumIntensityAndTimeList(List<XZ> list) {
    // We use the first value's time as a period over which the intensities are summed over. This is a conscious
    // choice to standardize the summation analysis. The trade offs are that the final output will
    // not have an accurate time period and will always underestimate the actual time, but since
    // the time period over which it is the summed is small (< 1 second), the underestimation is within comfortable
    // bounds.
    Double time = list.get(START_INDEX).getTime();
    Double intensitySum = 0.0;
    for (XZ point : list) {
      intensitySum += point.getIntensity();
    }

    return new XZ(time, intensitySum);
  }""",1
WorldGenDeadTree.java,"""/** * Returns a boolean indicating whether or not the current location for the tree, spanning basePos to to the height * limit, is valid. */""","""private boolean validTreeLocation()
    {
        BlockPos down = this.blockPosOrigin.down();
        net.minecraft.block.state.IBlockState state = this.world.getBlockState(down);
        boolean isSoil = state.getBlock().canSustainPlant(this.world, down, net.minecraft.util.EnumFacing.UP, ((net.minecraft.block.BlockSapling)Blocks.sapling));

        if (!isSoil)
        {
            return false;
        }
        else
        {
            int i = this.func_175936_a(this.blockPosOrigin, this.blockPosOrigin.up(this.heightLimit - 1));

            if (i == -1)
            {
                return true;
            }
            else if (i < 6)
            {
                return false;
            }
            else
            {
                this.heightLimit = i;
                return true;
            }
        }
    }""",1
WatsAgentStatusResponse.java,"""/** * @return SkipGroups */""","""public int getSkipGroups() {
        return skipGroups;
    }""",1
WorldGenVolcano.java,"""/** * Give an existing volcano formation a caldera * @param start beginning point * @param amount number of blocks to excise */""","""private void genCaldera(BlockCoord start, int amount)
        {

        }""",1
WordCram.java,"""/** * Use the given WordNudger to pick angles for each word. * You can make your own, or use a pre-fab one. * * @see WordNudger * @see SpiralWordNudger * @see RandomWordNudger * @see PlottingWordNudger * @param nudger the WordNudger to use. * @return The WordCram, for further setup or drawing. */""","""public WordCram withNudger(WordNudger nudger) {
		this.nudger = nudger;
		return this;
	}""",1
WXListComponent.java,"""/** * ViewType will be classified into {HashMap<Integer,ArrayList<Integer>> mViewTypes} * @param component */""","""private void bindViewType(WXComponent component) {
        int id = generateViewType(component);

        if (mViewTypes == null) {
            mViewTypes = new SparseArray<>();
        }

        ArrayList<WXComponent> mTypes = mViewTypes.get(id);

        if (mTypes == null) {
            mTypes = new ArrayList<>();
            mViewTypes.put(id,mTypes);
        }
        mTypes.add(component);
    }""",1
XmlBeanFactory.java,"""/** * Configures the object by parsing the provided XML.<br/> * The underlying XmlBean will start at the root of the XML and will access * private fields as needed. * @param file The file containing the XML document to configure the object * @param obj The object instance to configure * @see XmlBean#configure(java.io.File, java.lang.Object) */""","""static public void configure(File file, Object obj) throws XmlBeanException, IOException, SAXException {
        createXmlBean().configure(file, obj);
    }""",1
WrapperPlayServerTransaction.java,"""/** * Retrieve whether or not the action was accepted. * @return The current Accepted? */""","""public boolean getAccepted() {
        return handle.getSpecificModifier(boolean.class).read(0);
    }""",1
WSManUtils.java,"""/** * Checks if a string is a valid UUID or not. * * @param string The UUID value. * @return true if input is a valid UUID or false if input is empty or an invalid UUID format. */""","""public static boolean isUUID(String string) {
        try {
            if (string != null) {
                UUID.fromString(string);
                return true;
            } else {
                return false;
            }
        } catch (IllegalArgumentException ex) {
            return false;
        }
    }""",1
WorkerStatusChange.java,"""/** * @param lastModified the lastModified to set */""","""public void setLastModified(Long lastModified) {
		this.lastModified = lastModified;
	}""",1
VOGeoServerContrastEnhancementNormalizeGreenTest.java,"""/** * Creates the channel selection error object. * * @param styleFactory the style factory * @param contrastMethod the contrast method * @return the channel selection */""","""private ChannelSelection createChannelSelectionError(StyleFactoryImpl styleFactory,
            ContrastMethod contrastMethod) {
        ContrastEnhancement contrastEnhancement = (ContrastEnhancement) styleFactory
                .contrastEnhancement(null, contrastMethod.name());

        FilterFactory ff = CommonFactoryFinder.getFilterFactory();

        Map<String, Expression> options = contrastEnhancement.getOptions();
        options.put(""algorithm"", ff.literal(""TestStretchToMinimumMaximum""));
        options.put(""minValue"", ff.literal(""1.0""));
        options.put(""maxValue"", ff.literal(""5.0""));

        SelectedChannelType channelType = styleFactory.createSelectedChannelType(""channel name"",
                contrastEnhancement);
        SelectedChannelType[] channels = new SelectedChannelType[3];
        channels[0] = channelType;
        channels[1] = channelType;
        channels[2] = channelType;
        ChannelSelection channelSelection = styleFactory.createChannelSelection(channels);
        return channelSelection;
    }""",1
WrapperPlayServerTabComplete.java,"""/** * Retrieve the tab-completed text alternatives. * @return The current Text */""","""public String[] getText() {
        return handle.getStringArrays().read(0);
    }""",1
YangGeneratorConfiguration.java,"""/** * @param resourceBaseDir the resourceBaseDir to set */""","""public void setResourceBaseDir(File resourceBaseDir) {
        this.resourceBaseDir = resourceBaseDir;
    }""",1
WBSType.java,"""/** * Sets the value of the summaryAtCompletionDuration property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryAtCompletionDuration(Double value)
   {
      this.summaryAtCompletionDuration = value;
   }""",1
WBSType.java,"""/** * Sets the value of the summaryNonLaborCostVariance property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryNonLaborCostVariance(Double value)
   {
      this.summaryNonLaborCostVariance = value;
   }""",1
AbstractApplicationsAggregate.java,"""/** *  Handler */""","""private PlatformData createPlatformFromExistingPlatformHandler(final PlatformData platform,
                                                               final PlatformData originPlatform,
                                                               final Map<String, PropertiesData> originProperties){
    final PlatformCreatedFromExistingCommand hc = new PlatformCreatedFromExistingCommand(getPlatformRegistry(),
            getPropertiesRegistry(), platform, originPlatform, originProperties);

    this.tryAtomic(platform.getKey().getEntityName(), hc);

    //We return the platform from get method, this way we are sure to get the platform from the registry, ie the way it has been modified.
    return getPlatform(platform.getKey()).orElseThrow(() -> new MissingResourceException(""Cannot get the created platform. This is not expected and should be reported""));
}""",0
AggregateUI.java,"""/* NAVIGATION */""","""public void redirectToSubTab(SubTabs subTab) {
for (Tabs tab : tabPosition) {

  AggregateTabBase tabObj = tabMap.get(tab);
  if (tabObj == null) {
    continue;
  }

  SubTabInterface subTabObj = tabObj.getSubTab(subTab);
  if (subTabObj != null) {
    // found the tab
    int index = tabPosition.indexOf(tab);
    mainNav.selectTab(index);
    tabObj.selectTab(tabObj.findSubTabIndex(subTab));

  }
}
resize();
}""",0
WrapperPlayServerRemoveEntityEffect.java,"""/** * Retrieve the entity. * @param event - the packet event. * @return The entity. */""","""public Entity getEntity(PacketEvent event) {
    	return getEntity(event.getPlayer().getWorld());
    }""",1
XmlRpcResponse.java,"""/** * Writes an XML-RPC response to the XML writer. */""","""void writeResponse(Object param, XmlWriter writer) {
        writer.startElement(""methodResponse"");
        writer.startElement(""params"");
        writer.startElement(""param"");
        writeObject(param, writer);
        writer.endElement(""param"");
        writer.endElement(""params"");
        writer.endElement(""methodResponse"");
    }""",1
XMLObjectImpl.java,"""/** * Generic reference to implement x::ns, x.@ns::y, x..@ns::y etc. */""","""public Ref memberRef(Context cx, Object namespace, Object elem,
                         int memberTypeFlags)
    {
        XMLName xmlName = lib.toQualifiedName(cx, namespace, elem);
        if ((memberTypeFlags & Node.ATTRIBUTE_FLAG) != 0) {
            if (!xmlName.isAttributeName()) {
                xmlName.setAttributeName();
            }
        }
        if ((memberTypeFlags & Node.DESCENDANTS_FLAG) != 0) {
            xmlName.setIsDescendants();
        }
        xmlName.initXMLObject(this);
        return xmlName;
    }""",1
ZonePeerManager.java,"""/** * Creates an uninitialized peer manager. */""","""@Inject public ZonePeerManager (Lifecycle cycle)
    {
        super(cycle);
    }""",1
AEThread2.java,"""/** * entry 0 is debug object, 1 is Long mono-time it was set */""","""public static Object[] getDebug(
        Thread t) {
    if (t instanceof threadWrapper) {

        return (((threadWrapper) t).getDebug());
    }

    return (null);
}""",0
WorldConfiguration.java,"""/** * Get whether structures must be generated * * @return true or false */""","""public boolean generatesStructures() {
        return getBoolean(""generate-structures"", true);
    }""",1
WBSType.java,"""/** * Gets the value of the totalBenefitPlan property. * * @return *     possible object is *     {@link Double } * */""","""public Double getTotalBenefitPlan()
   {
      return totalBenefitPlan;
   }""",1
XMLPersistanceHelper.java,"""/** * Saves an object to XML File. * * @param saveFile */""","""public static void saveObjectToFile(File saveFile, final Object object) throws Exception {
	try {
	    JAXBContext jaxbContext = JAXBContext.newInstance(object.getClass());
	    Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
	    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
	    jaxbMarshaller.marshal(object, saveFile);
	    LOG.info(String.format(""Saved successfully config to '%s'"", saveFile.getAbsoluteFile()));
	} catch (JAXBException ex) {
	    throw new Exception(String.format(""Could not save config to File '%s'"", saveFile.getAbsoluteFile()), ex);
	}
    }""",1
WBSType.java,"""/** * Gets the value of the udf property. * * <p> * This accessor method returns a reference to the live list, * not a snapshot. Therefore any modification you make to the * returned list will be present inside the JAXB object. * This is why there is not a <CODE>set</CODE> method for the udf property. * * <p> * For example, to add a new item, do as follows: * <pre> *    getUDF().add(newItem); * </pre> * * * <p> * Objects of the following type(s) are allowed in the list * {@link UDFAssignmentType } * * */""","""public List<UDFAssignmentType> getUDF()
   {
      if (udf == null)
      {
         udf = new ArrayList<UDFAssignmentType>();
      }
      return this.udf;
   }""",1
XhtmlParserModule.java,"""/** * <p>XhtmlParserModule class.</p> * * @since 1.6 */""","""@Component( role = ParserModule.class, hint = ""xhtml"" )
public class XhtmlParserModule
    extends AbstractParserModule
{
    /**
     * Default constructor.
     */
    public XhtmlParserModule()
    {
        super( ""xhtml"" );
    }
}""",1
WpadProxySearchStrategyWithDHPC.java,"""/************************************************************************* * Loads the settings and stores them in a properties map. * * @return the settings. ************************************************************************/""","""public Properties readSettings() {
		try {
			String pacScriptUrl = detectScriptUrlPerDHCP();
			if (pacScriptUrl == null) {
				pacScriptUrl = detectScriptUrlPerDNS();
			}
			if (pacScriptUrl == null) {
				return null;
			}
			Properties result = new Properties();
			result.setProperty(""url"", pacScriptUrl);
			return result;
		} catch (IOException e) {
			// Ignore and return empty properties.
			return new Properties();
		}
	}""",1
XMLList.java,"""/** * * @param index */""","""private void internalRemoveFromList (int index)
    {
        _annos.remove(index);
    }""",1
WrapperPlayServerEntityTeleport.java,"""/** * Set the yaw of the current entity. * @param value - new yaw. */""","""public void setYaw(float value) {
        handle.getBytes().write(0, (byte) (value * 256.0F / 360.0F));
    }""",1
WorkbenchShellHandler.java,"""/** * Closes all opened {@link Shell}s except the workbench shell. */""","""public void closeAllNonWorbenchShells(){
		this.closeAllNonWorbenchShells(null);
	}""",1
VoidValueReader.java,"""/** * {@inheritDoc} */""","""@Override
	public Void read(InputStream inputStream) throws IOException {
		final String content = IOUtils.toString(inputStream, ENCODING);
		log.debug(""Parsing: {}"", content);

		return null;
	}""",1
WizardExportResourcesPage2.java,"""/** * Returns whether the extension of the given resource name is an extension that has been specified for export by * the user. * @param resourceName *            the resource name * @return <code>true</code> if the resource name is suitable for export based upon its extension */""","""protected boolean hasExportableExtension(String resourceName) {
		if (selectedTypes == null) {
			return true;
		}

		int separatorIndex = resourceName.lastIndexOf("".""); //$NON-NLS-1$
		if (separatorIndex == -1) {
			return false;
		}

		String extension = resourceName.substring(separatorIndex + 1);

		Iterator it = selectedTypes.iterator();
		while (it.hasNext()) {
			if (extension.equalsIgnoreCase((String) it.next())) {
				return true;
			}
		}

		return false;
	}""",1
WrapperPlayServerSpawnEntityExperienceOrb.java,"""/** * Set the entity ID of the experience orb to spawn. * @param value - new value. */""","""public void setEntityId(int value) {
        handle.getIntegers().write(0, value);
    }""",1
WBSType.java,"""/** * Sets the value of the summaryDurationVariance property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryDurationVariance(Double value)
   {
      this.summaryDurationVariance = value;
   }""",1
WeekView.java,"""/** * Get the interpreter which provides the text to show in the header column and the header row. * @return The date, time interpreter. */""","""public DateTimeInterpreter getDateTimeInterpreter() {
        if (mDateTimeInterpreter == null) {
            mDateTimeInterpreter = new DateTimeInterpreter() {
                @Override
                public String interpretDate(Calendar date) {
                    try {
                        SimpleDateFormat sdf = mDayNameLength == LENGTH_SHORT ? new SimpleDateFormat(""EEEEE M/dd"", Locale.getDefault()) : new SimpleDateFormat(""EEE M/dd"", Locale.getDefault());
                        return sdf.format(date.getTime()).toUpperCase();
                    } catch (Exception e) {
                        e.printStackTrace();
                        return """";
                    }
                }

                @Override
                public String interpretTime(int hour) {
                    Calendar calendar = Calendar.getInstance();
                    calendar.set(Calendar.HOUR_OF_DAY, hour);
                    calendar.set(Calendar.MINUTE, 0);

                    try {
                        SimpleDateFormat sdf = DateFormat.is24HourFormat(getContext()) ? new SimpleDateFormat(""HH:mm"", Locale.getDefault()) : new SimpleDateFormat(""hh a"", Locale.getDefault());
                        return sdf.format(calendar.getTime());
                    } catch (Exception e) {
                        e.printStackTrace();
                        return """";
                    }
                }
            };
        }
        return mDateTimeInterpreter;
    }""",1
VomsAuthorisationStrategy.java,"""/** * @return the usersDN */""","""public List<String> getUsersDN() {
			return usersDN;
		}""",1
YoutubeHooker.java,"""/** * Find class call inflate() in constructor */""","""private static String findControlOverlayClassName(StackTraceElement[] traces) {
        String obfuscatedClsName = """";

        for (int k = 0; k < traces.length; k++) {
            StackTraceElement trace = traces[k];

            String s = trace.toString();
            if (!s.contains(""blueberry"") && !s.contains(""de.robv"")) {
                int i = s.indexOf("".<init>"");
                if (i < 0) continue;
                if (k > 0 && traces[k - 1].toString().contains("".inflate"")) {
                    obfuscatedClsName = s.substring(0, i);
                }

                // If we reach a constructor but it doesn't invoke inflate(), jump out
                break;
            }
        }
        if (DEBUG && !TextUtils.isEmpty(obfuscatedClsName)) log(TAG + "": found control overlay class name: "" + obfuscatedClsName);
        return obfuscatedClsName;
    }""",1
VSphere.java,"""/** * Find Distributed Virtual Switch from the provided Distributed Virtual Portgroup * @param distributedVirtualPortgroup - DistributedVirtualPortgroup object for the provided vDS PortGroup * @return returns DistributedVirtualSwitch object that represents the vDS Switch * @throws VSphereException If an error occurred. */""","""public DistributedVirtualSwitch getDistributedVirtualSwitchByPortGroup(
			DistributedVirtualPortgroup distributedVirtualPortgroup) throws VSphereException
	{
		try
		{
			ManagedObjectReference managedObjectReference = new ManagedObjectReference();
			managedObjectReference.setType(""DistributedVirtualSwitch"");
			managedObjectReference.setVal(distributedVirtualPortgroup.getConfig().getDistributedVirtualSwitch().getVal());
			return new DistributedVirtualSwitch(getServiceInstance().getServerConnection(), managedObjectReference);
		}
		catch (Exception e)
		{
			throw new VSphereException(e);
		}
	}""",1
Utils.java,"""/* These are not actually correct */""","""public static int floordiv(float a, float b) {
float q = a / b;
return((q < 0)?(((int)q) - 1):((int)q));
}""",0
VorbisCommentChapter.java,"""/** * Get the string that comes after 'CHAPTERxxx', for example 'name' or * 'url'. */""","""public static String getAttributeTypeFromKey(String key) {
        if (key.length() > CHAPTERXXX_LENGTH) {
            return key.substring(CHAPTERXXX_LENGTH, key.length());
        }
        return null;
    }""",1
Row.java,"""/** * Expects a string as generated by org.opendatakit.common.utils.WebUtils#iso8601Date(Date). */""","""public void setSavepointTimestamp(String savepointTimestamp) {
this.savepointTimestamp = savepointTimestamp;
}""",0
WindowCompat.java,"""/** * Flag for specifying the behavior of action modes when an Action Bar is not present. * If overlay is enabled, the action mode UI will be allowed to cover existing window content. */""","""public static final int FEATURE_ACTION_MODE_OVERLAY = 10;
}
}""",1
Zip4jUtil.java,"""/** * Detects the encoding charset for the input string * @param str * @return String - charset for the String * @throws ZipException - if input string is null. In case of any other exception * this method returns default System charset */""","""public static String detectCharSet(String str) throws ZipException {
		if (str == null) {
			throw new ZipException(""input string is null, cannot detect charset"");
		}
		
		try {
			byte[] byteString = str.getBytes(InternalZipConstants.CHARSET_CP850);
			String tempString = new String(byteString, InternalZipConstants.CHARSET_CP850);
			
			if (str.equals(tempString)) {
				return InternalZipConstants.CHARSET_CP850;
			}
			
			byteString = str.getBytes(InternalZipConstants.CHARSET_UTF8);
			tempString = new String(byteString, InternalZipConstants.CHARSET_UTF8);
			
			if (str.equals(tempString)) {
				return InternalZipConstants.CHARSET_UTF8;
			}
			
			return InternalZipConstants.CHARSET_DEFAULT;
		} catch (UnsupportedEncodingException e) {
			return InternalZipConstants.CHARSET_DEFAULT;
		} catch (Exception e) {
			return InternalZipConstants.CHARSET_DEFAULT;
		}
	}""",1
WBSType.java,"""/** * Sets the value of the summaryBaselineFinishDate property. * * @param value *     allowed object is *     {@link String } * */""","""public void setSummaryBaselineFinishDate(Date value)
   {
      this.summaryBaselineFinishDate = value;
   }""",1
ZMQ.java,"""/** * The ZMQ_CONNECT_RID option sets the peer id of the next host connected via the connect() call, * and immediately readies that connection for data transfer with the named id. * This option applies only to the first subsequent call to connect(), * calls thereafter use default connection behavior. * Typical use is to set this socket option ahead of each connect() attempt to a new host. * Each connection MUST be assigned a unique name. Assigning a name that is already in use is not allowed. * Useful when connecting ROUTER to ROUTER, or STREAM to STREAM, as it allows for immediate sending to peers. * Outbound id framing requirements for ROUTER and STREAM sockets apply. * The peer id should be from 1 to 255 bytes long and MAY NOT start with binary zero. * * @param rid the peer id of the next host. * @return true if the option was set, otherwise false. */""","""public boolean setConnectRid(String rid)
        {
            return setSocketOpt(zmq.ZMQ.ZMQ_CONNECT_RID, rid);
        }""",1
WorkerMessages.java,"""/** * @param workerPubKey * @return */""","""public static String getUnknownWorkerChangingStatusMessage(String workerPubKey, WorkerStatus newState) {
		return ""Unknown worker changed status: "" + workerPubKey +""/""+ newState;
	}""",1
WebSocketNativeEncoderImpl.java,"""/** * Performs an in-situ masking of the readable buf bytes. * Preserves the position of the buffer whilst masking all the readable bytes, * such that the masked bytes will be readable after this invocation. * * @param buf   the buffer containing readable bytes to be masked. * @param mask  the mask to apply against the readable bytes of buffer. */""","""public static void mask(WrappedByteBuffer buf, int mask) {
        // masking is the same as unmasking due to the use of bitwise XOR.
        unmask(buf, mask);
    }""",1
WithLongPressFragment.java,"""/** * create a view from resource Xml file, and hold the view that may be used in displaying data. * * @param layoutInflater */""","""@Override
        public View createView(LayoutInflater layoutInflater) {
            View view = layoutInflater.inflate(R.layout.with_long_press_list_view_item, null);
            mImageView = (CubeImageView) view.findViewById(R.id.with_long_press_list_image);
            return view;
        }""",1
SiteStructureGenerator.java,"""/** Takes Block Coordinates */""","""public boolean shouldBeDoor(Site site, int x, int z, int scale)
    {
        getBounds(site, scale);

        int midx = (bounds[0][0] + bounds[1][0]) / 2;
        int midz = (bounds[0][1] + bounds[1][1]) / 2;

        // middle of a wall
        if ((x == midx && (z == bounds[0][1] || z == bounds[1][1]))
                || (z == midz && (x == bounds[0][0] || x == bounds[1][0])))
        {
            SiteStructures structs = WorldGenerator.instance.structureGen.getStructuresForSite(site);
            EnumFacing dir = getDoorDirection(site, x, z, scale, structs).getOpposite();
            StructureSpace other = structs.getStructure(x + dir.getFrontOffsetX(), z + dir.getFrontOffsetZ(),
                    scale);
            if (other != null && other.getFloor(site, scale) != getFloor(site, scale)) return false;
            return true;
        }
        return false;
    }""",0
VMLaunchOptions.java,"""/** * Identifies a specific, existing volume to attach post-launch. This call is accretive, meaning that you can * call it multiple times to add additional volumes (order matters) * @param existingVolumeId the cloud provider volume ID for the volume to attach * @param withDeviceId the device ID to use in making the attachment * @return this */""","""public @Nonnull VMLaunchOptions withAttachment(@Nonnull String existingVolumeId, @Nonnull String withDeviceId) {
        VolumeAttachment a = new VolumeAttachment();
        
        a.deviceId = withDeviceId;
        a.existingVolumeId = existingVolumeId;
        if( volumes == null || volumes.length < 1 ) {
            volumes = new VolumeAttachment[] { a };
        }""",1
ApplicationConfig.java,"""/** * It is automatically generated by NetBeans REST support. */""","""private Set<Class<?>> getRestResourceClasses() {
    Set<Class<?>> resources = new java.util.HashSet<Class<?>>();
    resources.add(org.javaee7.websocket.websocket.vs.rest.MyRestEndpoint.class);
    return resources;
}""",0
X509CertSelector.java,"""/** * Returns a copy of the subjectAlternativeNames criterion. * The <code>X509Certificate</code> must contain all or at least one * of the specified subjectAlternativeNames, depending on the value * of the matchAllNames flag (see {@link #getMatchAllSubjectAltNames * getMatchAllSubjectAltNames}). If the value returned is * <code>null</code>, no subjectAlternativeNames check will be performed. * <p> * If the value returned is not <code>null</code>, it is a * <code>Collection</code> with * one entry for each name to be included in the subject alternative name * criterion. Each entry is a <code>List</code> whose first entry is an * <code>Integer</code> (the name type, 0-8) and whose second * entry is a <code>String</code> or a byte array (the name, in * string or ASN.1 DER encoded form, respectively). * There can be multiple names of the same type.  Note that the * <code>Collection</code> returned may contain duplicate names (same name * and name type). * <p> * Each subject alternative name in the <code>Collection</code> * may be specified either as a <code>String</code> or as an ASN.1 encoded * byte array. For more details about the formats used, see * {@link #addSubjectAlternativeName(int type, String name) * addSubjectAlternativeName(int type, String name)} and * {@link #addSubjectAlternativeName(int type, byte [] name) * addSubjectAlternativeName(int type, byte [] name)}. * <p> * Note that a deep copy is performed on the <code>Collection</code> to * protect against subsequent modifications. * * @return a <code>Collection</code> of names (or <code>null</code>) * @see #setSubjectAlternativeNames */""","""public Collection<List<?>> getSubjectAlternativeNames() {
        if (subjectAlternativeNames == null) {
            return null;
        }
        return cloneNames(subjectAlternativeNames);
    }""",1
ZMQ.java,"""/** * If in conflate mode, a socket shall keep only one message in its inbound/outbound queue, * this message being the last message received/the last message to be sent. * Ignores ZMQ_RCVHWM and ZMQ_SNDHWM options. * Does not support multi-part messages, in particular, * only one part of it is kept in the socket internal queue. * * @return true to keep only one message, false for standard behaviour. * @see #setConflate(boolean) */""","""public boolean isConflate()
        {
            return base.getSocketOpt(zmq.ZMQ.ZMQ_CONFLATE) != 0;
        }""",1
XMultiColumnListView.java,"""/** * Set listener. * * @param listener */""","""public void setXListViewListener(IXListViewListener listener) {
        mListener = listener;
    }""",1
GridNodeConfiguration.java,"""/** * add config, but overwrite capabilities. */""","""private void loadFromJSON(String resource) {
try {
  JSONObject base = JSONConfigurationUtils.loadJSON(resource);

  if (base.has(""capabilities"")) {
    capabilities = new ArrayList<DesiredCapabilities>();
    JSONArray a = base.getJSONArray(""capabilities"");
    for (int i = 0; i < a.length(); i++) {
      JSONObject cap = a.getJSONObject(i);
      DesiredCapabilities c = new DesiredCapabilities();
      for (Iterator iterator = cap.keys(); iterator.hasNext();) {
        String name = (String) iterator.next();
        c.setCapability(name, cap.get(name));
      }
    }
  }

  JSONObject o = base.getJSONObject(""configuration"");
  for (Iterator iterator = o.keys(); iterator.hasNext();) {
    String key = (String) iterator.next();
    Object value = o.get(key);
    if (value instanceof JSONArray) {
      JSONArray a = (JSONArray) value;
      List<String> as = new ArrayList<String>();
      for (int i = 0; i < a.length(); i++) {
        as.add(a.getString(i));
      }
      configuration.put(key, as);
    } else {
      configuration.put(key, o.get(key));
    }
  }

} catch (Throwable e) {
  throw new GridConfigurationException(""Error with the JSON of the config : "" + e.getMessage(),
      e);
}
}""",0
ZMQQueue.java,"""/** * Class constructor. * * @param context *            a 0MQ context previously created. * @param inSocket *            input socket * @param outSocket *            output socket */""","""public ZMQQueue(Context context, Socket inSocket, Socket outSocket)
    {
        this.inSocket = inSocket;
        this.outSocket = outSocket;
    }""",1
SiteStructureGenerator.java,"""/** Takes Block Coordinates */""","""public boolean isInWall(Site site, int x, int y, int scale)
    {
        int width = (scale / SITETOBLOCK);
        int pixelX = (x - site.corners[0][0] * scale - scale / 2 - width / 2) / width;
        int pixelY = (y - site.corners[0][1] * scale - scale / 2 - width / 2) / width;
        boolean ret = pixels.contains(pixelX + 2048 * pixelY);
        if (width <= 1)
        {
            pixelX = (x - 1 - site.corners[0][0] * scale - scale / 2 - width / 2) / width;
            pixelY = (y - 1 - site.corners[0][1] * scale - scale / 2 - width / 2) / width;
            ret = ret || pixels.contains(pixelX + 2048 * pixelY);
            pixelX = (x + 1 - site.corners[0][0] * scale - scale / 2 - width / 2) / width;
            pixelY = (y + 1 - site.corners[0][1] * scale - scale / 2 - width / 2) / width;
            ret = ret || pixels.contains(pixelX + 2048 * pixelY);
        }
        return ret;
    }""",0
AbstractApplicationsAggregate.java,"""/* * REPLAY LISTENERS */""","""@Subscribe
@Override
public void replayPlatformCreatedEvent(final PlatformCreatedEvent event) {
    try {
        final PlatformData platform = event.getPlatform();
        this.createPlatform(platform);
    } catch (Exception e) {
        LOGGER.error(""Error while replaying platform created event {}"", e.getMessage());
    }
}""",0
WriteConcern.java,"""/** * Write operations wait until flush journa to disk. */""","""public static WriteConcern journal() {
    return new IntWriteConcern(SyncMode.JOURNAL, 0, 0);
  }""",1
AbstractAccess.java,"""/** * Utility methods */""","""protected static List<Class<?>> getAllSuperClasses(final Class<?> clazz) {
    List<Class<?>> result = new ArrayList<>();
    if (clazz != null && (INCLUDE_OBJECT || !clazz.equals(Object.class))) {
        result.add(clazz);
        result.addAll(getAllSuperClasses(clazz.getSuperclass()));
        for (Class<?> iface : clazz.getInterfaces()) {
            result.addAll(getAllSuperClasses(iface));
        }
    }""",0
ZipArchiveOutputStream.java,"""/** * Whether to create Unicode Extra Fields. * * <p>Defaults to NEVER.</p> */""","""public void setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy b) {
        createUnicodeExtraFields = b;
    }""",1
XmlUtilities.java,"""/** * * @param contentType the content type * @return <code>true</code> if the content is printable or <code>false</code> if it is not */""","""private boolean isContentPrintable( String contentType ) {

        if( contentType == null ) {
            return false;
        }

        contentType = contentType.toLowerCase();
        for( String printableContentType : PRINTABLE_CONTENT_TYPES ) {
            if( contentType.startsWith( printableContentType ) ) {
                return true;
            }
        }

        // the content is not printable
        return false;
    }""",1
YoutubeProvider.java,"""/** * Sets and overwrite the user info from the configuaration file.  Uses the defaults before and after dates. * @param userIds Set of String userIds */""","""public void setUserInfoWithDefaultDates(Set<String> userIds) {
    List<UserInfo> youtubeUsers = new LinkedList<>();

    for (String userId : userIds) {
      UserInfo user = new UserInfo();
      user.setUserId(userId);
      user.setAfterDate(this.config.getDefaultAfterDate());
      user.setBeforeDate(this.config.getDefaultBeforeDate());
      youtubeUsers.add(user);
    }

    this.config.setYoutubeUsers(youtubeUsers);
  }""",1
WorkloadScripts.java,"""/** * persists the workload in the database */""","""public void save() {
        // this.workload = new WorkloadDao().saveOrUpdate(workload);
        if (tabIndex >= projectBean.getWorkload().getTestPlans().size()) {
            tabIndex = 0;
        }
        this.setCurrentTestPlan(projectBean.getWorkload().getTestPlans().get(tabIndex));
    }""",1
WebScenarioObject.java,"""/** * Gets nextcheck. * * @return Value of nextcheck. */""","""public Long getNextcheck() {
        return nextcheck;
    }""",1
WorkerStatusChange.java,"""/** * @param worker *            the worker to set */""","""public void setWorker(Worker worker) {
		this.worker = worker;
	}""",1
WBSType.java,"""/** * Gets the value of the summaryActualValueByCost property. * * @return *     possible object is *     {@link Double } * */""","""public Double getSummaryActualValueByCost()
   {
      return summaryActualValueByCost;
   }""",1
Xml2JsonUtils.java,"""/** * Print the XML with indentation * * @param xml * @return pretty xml * @throws TransformerFactoryConfigurationError * @throws ParserConfigurationException * @throws SAXException * @throws IOException * @throws TransformerException */""","""public String prettyPrintXml(String xml)
			throws TransformerFactoryConfigurationError, ParserConfigurationException, SAXException, IOException, TransformerException {
		Transformer transformer = TransformerFactory.newInstance().newTransformer();
		transformer.setOutputProperty(OutputKeys.INDENT, ""yes"");
		transformer.setOutputProperty(""{http://xml.apache.org/xslt}indent-amount"", ""2"");
		StreamResult result = new StreamResult(new StringWriter());
		DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		Document doc = dBuilder.parse(new InputSource(new StringReader(xml)));
		DOMSource source = new DOMSource(doc);
		transformer.transform(source, result);
		return result.getWriter().toString();
	}""",1
WifiDirectHandler.java,"""/** * Registers a WifiDirectBroadcastReceiver with an IntentFilter listening for P2P Actions */""","""public void registerP2pReceiver() {
        p2pBroadcastReceiver = new WifiDirectBroadcastReceiver();
        IntentFilter intentFilter = new IntentFilter();

        // Indicates a change in the list of available peers
        intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);
        // Indicates a change in the Wi-Fi P2P status
        intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);
        // Indicates the state of Wi-Fi P2P connectivity has changed
        intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);
        // Indicates this device's details have changed.
        intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);

        registerReceiver(p2pBroadcastReceiver, intentFilter);
        Log.i(TAG, ""P2P BroadcastReceiver registered"");
    }""",1
WordApiTest.java,"""/** * Test of examples method, of class WordApi. */""","""@Test
    public void testExamples_String() throws Exception {
        System.out.println(""examples"");
        String word = ""computer"";

        SearchResults results = WordApi.examples(word);
        assertNotNull(results);
        assertEquals(results.getSearchResults().size(), 0);
        for (Example e : results.getExamples()) {
            assertEquals(e.getWord(), word);
        }
    }""",1
WorkerGroup.java,"""/** * Changes the event loop used to process IO for all workers.  When a worker group is in use by a SSConnection, * backend connections held by its workers should share the same event loop as the client connection, * so that passing IO between frontend and backend sockets doesn't require any locking or context switching. * * @param preferredEventLoop */""","""public void bindToClientThread(EventLoopGroup preferredEventLoop) {
        if (preferredEventLoop == null)
            this.clientEventLoop = SharedEventLoopHolder.getLoop();
        else
            this.clientEventLoop = preferredEventLoop;

        if (workerMap != null){
            for (Worker worker : workerMap.values()){
                try {
                    worker.bindToClientThread(preferredEventLoop);
                } catch (PESQLException e) {
                    logger.warn(this+"" encountered problem binding worker to client event loop"",e);
                }
            }
        }
    }""",1
XfsAPI.java,"""/** * Makes the specified application handle invalid. * * @param hApp *            The application handle to be made invalid. * @throws XfsException */""","""public void wfsDestroyAppHandle(final HAPP hApp) throws XfsException {
		final String method = ""wfsDestroyAppHandle(HAPP)"";
		if (LOG.isDebugEnabled()) {
			LOG.debug(method, ""hApp="" + hApp);
		}
		if (hApp == null) {
			throw new IllegalArgumentException(""hApp must not be null"");
		}
		final int errorCode = wfsDestroyAppHandle0(hApp);
		if (LOG.isDebugEnabled()) {
			LOG.debug(method, ""errorCode="" + errorCode);
		}
		XfsException.throwFor(errorCode);
	}""",1
WBSType.java,"""/** * Gets the value of the currentVariance property. * * @return *     possible object is *     {@link Double } * */""","""public Double getCurrentVariance()
   {
      return currentVariance;
   }""",1
AbstractCalendarView.java,"""/** * only update/insert/delete sql can be wrapped in an execute batch. */""","""@Test(expected = EqlExecuteException.class)
public void test3() {
    EqlTran eqlTran = new Eql().newTran();
    eqlTran.start();
    EqlBatch eqlBatch = new EqlBatch(5);

    for (int i = 0; i < 10; ++i) {
        new Eql().useBatch(eqlBatch).useTran(eqlTran).id(""test"").limit(1).execute();
        String orderNo = randLetters(10);
        String userId = randLetters(10);
        int prizeItem = randInt(10);
        int ret = new Eql().useBatch(eqlBatch).useTran(eqlTran).insert(""insertPrizeBingoo"")
                .params(orderNo, ""Olympic"", """" + prizeItem, userId)
                .execute();

        assertThat(ret, is(0));
    }

    eqlBatch.executeBatch();
    Closes.closeQuietly(eqlTran);
}""",0
WorldConfiguration.java,"""/** * Get the block types banned. * * @return An integer array containing the block types. */""","""public int[] getBannedBlocks() {
        return cfg.getIntArray(""disallowed-blocks"", disallowedblocks);
    }""",1
YangFormattingPreferences.java,"""/** * @param formatComment the formatComment to set */""","""public void setFormatComment(boolean formatComment) {
        this.formatComment = formatComment;
    }""",1
WFSPTRCAPS.java,"""/** * Specifies the number of seconds before the device will automatically * retract the presented media. If the command that generated the media is * still active when the media is automatically retracted, the command will * complete with a WFS_ERR_PTR_MEDIARETRACTED error. If the device does not * retract media automatically this value will be zero. * * @since 3.10 */""","""public int getAutoRetractPeriod() {
		return autoRetractPeriod.intValue();
	}""",1
VMUpdateStateRequest.java,"""/** * Get the array of instance ids * * @return The array of instance ids */""","""public String[] getInstances() {
        return (String[]) this.items.get(""instances"");
    }""",1
ZoneNodeObject.java,"""/** * Requests that the <code>hostedZones</code> field be set to the * specified value. Generally one only adds, updates and removes * entries of a distributed set, but certain situations call for a * complete replacement of the set value. The local value will be * updated immediately and an event will be propagated through the * system to notify all listeners that the attribute did * change. Proxied copies of this object (on clients) will apply the * value change when they received the attribute changed notification. */""","""@Generated(value={""com.threerings.presents.tools.GenDObjectTask""})
    public void setHostedZones (DSet<HostedZone> value)
    {
        requestAttributeChange(HOSTED_ZONES, value, this.hostedZones);
        DSet<HostedZone> clone = (value == null) ? null : value.clone();
        this.hostedZones = clone;
    }""",1
WFSIDCCARDDATA.java,"""/** * @param pCardData *            pointer to card data structure */""","""public WFSIDCCARDDATA(final XfsVersion xfsVersion, final Pointer pCardData) {
		this(xfsVersion);
		assignBuffer(pCardData);
	}""",1
ByteFormatter.java,"""/** * Note this has a truncation limit at 1024 chars.... */""","""public static String
encodeString(
  byte[]		bytes )
{
  return( nicePrint( bytes, true ));
}""",0
XcoreResource.java,"""/** * finds the EObject of the given type and the given {@link QualifiedName}. * * TODO optimize */""","""protected EObject findEObject(EClass eClass, QualifiedName name, String uriFragment)
	{
		if (eClass == TypesPackage.Literals.JVM_ENUMERATION_TYPE || eClass == GenModelPackage.Literals.GEN_CLASS
		    || eClass == GenModelPackage.Literals.GEN_DATA_TYPE || eClass == GenModelPackage.Literals.GEN_ENUM
		    || eClass == TypesPackage.Literals.JVM_GENERIC_TYPE)
		{
			IScope scope = scopeProvider.getScope(getContents().get(0),
			    eClass.getEPackage() == GenModelPackage.eINSTANCE ? XcorePackage.Literals.XGENERIC_TYPE__TYPE : TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE);
			final IEObjectDescription desc = scope.getSingleElement(name);
			if (desc != null)
			{
				URI uri = desc.getEObjectURI();
				if (!uriFragment.equals(uri.fragment()) || !uri.trimFragment().equals(getURI()))
					return desc.getEObjectOrProxy();
			}
		}
		TreeIterator<EObject> iterator = EcoreUtil.getAllContents(this, false);
		while (iterator.hasNext())
		{
			EObject candidate = iterator.next();
			if (eClass.isInstance(candidate))
			{
				QualifiedName qualifiedName = nameProvider.getFullyQualifiedName(candidate);
				if (name.equals(qualifiedName))
					return candidate;
			}
		}
		return null;
	}""",1
ZipArchiveOutputStream.java,"""/** * Write bytes to output or random access file. * @param data the byte array to write * @throws IOException on error */""","""protected final void writeOut(byte[] data) throws IOException {
        writeOut(data, 0, data.length);
    }""",1
WBSType.java,"""/** * Sets the value of the summaryAtCompletionNonLaborCost property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryAtCompletionNonLaborCost(Double value)
   {
      this.summaryAtCompletionNonLaborCost = value;
   }""",1
VMTrackerImpl.java,"""/** * @{inheritDoc */""","""@Override
    public void publishEvent(JobEvent event) {
        try {
            jobEventProducer.fire(event);
        } catch (Exception e) {
            LOG.error(""Error firing Event: "" + e, e);
        }
    }""",1
ZStreamRef.java,"""/** * A reference to the native zlib's z_stream structure. */""","""class ZStreamRef {

    private long address;
    ZStreamRef (long address) {
        this.address = address;
    }

    long address() {
        return address;
    }

    void clear() {
        address = 0;
    }
}""",1
AbstractCalendarView.java,"""/** * Creates a new instance */""","""public BasicBinder(boolean includeBuiltInBindings) {

    initExtendedBinders();
    
    if (includeBuiltInBindings) {

        initJdkBindings();

        // Before we load other configuration, load the binding
        // configuration from
        // jadira-bindings' jar to ensure no-one overrides our built-in
        // mappings.
        initBuiltInBindings();

        // Init bindings registered from other jars
        initRegisteredBindings();
    }
}""",0
WpadProxySearchStrategy.java,"""/************************************************************************* * Uses DHCP to find the script URL. * * @return the URL, null if not found. ************************************************************************/""","""private String detectScriptUrlPerDHCP() {
    Logger.log(getClass(), LogLevel.DEBUG, ""Searching per DHCP not supported yet."");
    // TODO Rossi 28.04.2009 Not implemented yet.
    return null;
  }""",1
WorkflowTypeAPI.java,"""/** * This method calls proc InsertWorkflowType and adds in record in the database. It also validates the values * of the record passed. * * @param workflowType  Instance of WorkflowType. * @param bindingResult * @return restWrapper Instance of WorkflowType passed. */""","""@RequestMapping(value = {""/"", """"}, method = RequestMethod.PUT)


    @ResponseBody
    public RestWrapper insert(@ModelAttribute(""processtype"")
                       @Valid WorkflowType workflowType, BindingResult bindingResult, Principal principal) {

        RestWrapper restWrapper = null;
        if (bindingResult.hasErrors()) {
            BindingResultError bindingResultError = new BindingResultError();
            return bindingResultError.errorMessage(bindingResult);
        }""",1
WorldConfiguration.java,"""/** * Get the block types allowed for enderman to move. * * @return An integer array containing the block types. */""","""public int[] getEnderBlocks() {
        return cfg.getIntArray(""ender-blocks"", enderblocks);
    }""",1
WifiDirectHandler.java,"""/** * Calls initial services discovery call and submits the first * Discover task. This will continue until stopDiscoveringServices is called */""","""public void continuouslyDiscoverServices(){
        Log.i(TAG, ""Continuously Discover services called"");

        if (serviceDiscoveryRegistered == false) {
            Log.i(TAG, ""Setting up service discovery"");
            registerServiceDiscoveryListeners();
            serviceDiscoveryRegistered = true;
        }

        // TODO Change this to give some sort of status
        if (isDiscovering){
            Log.w(TAG, ""Services are still discovering, do not need to make this call"");
        } else {
            addServiceDiscoveryRequest();
            isDiscovering = true;
            // List to track discovery tasks in progress
            serviceDiscoveryTasks = new ArrayList<>();
            // Make discover call and first discover task submission
            discoverServices();
            submitServiceDiscoveryTask();
        }
    }""",1
WebdavServlet.java,"""/** * Returns the resource configuration to be applied * * @return the resource configuration. */""","""private ResourceConfig getResourceConfig() {
        // fallback if no config present
        if (config == null) {
            config = new ResourceConfig();
        }
        return config;
    }""",1
WoTMessageManager.java,"""/** * Get the highest index of a not fetched message list of the given identity. * * Notice that this uses a cached number from the IdentityStatistics object and it is possible that there are message lists with * higher index numbers which HAVE been fetched already. This function is for being used in scheduling message list fetches so this is * not a problem. */""","""public synchronized long getUnavailableNewMessageListIndex(Identity identity) {
		try {
			return getIdentityStatistics(identity).getIndexOfLatestAvailableMessageList() + 1;
		} catch(NoSuchObjectException e) {
			return 0;
		}
	}""",1
WindowFunctions.java,"""/** * Creates a Blackman Window. * Code from https://www.ee.columbia.edu/~ronw/code/MEAPsoft/doc/html/FFT_8java-source.html * All credit goes to the original authors! * * @param ntabs number of samples * @return window samples */""","""public static float[] makeBlackmanWindow(int ntabs) {
		// Make a blackman window:
		// w(n)=0.42-0.5cos{(2*PI*n)/(N-1)}+0.08cos{(4*PI*n)/(N-1)};
		float[] window = new float[ntabs];
		for (int i = 0; i < window.length; i++)
			window[i] = 0.42f - 0.5f * (float)Math.cos(2 * Math.PI * i / (ntabs - 1))
					+ 0.08f * (float)Math.cos(4 * Math.PI * i / (ntabs - 1));
		return window;
	}""",1
XtnInfo.java,"""/** * @return the isFromReplication */""","""public boolean isFromReplication() {
        return _isFromReplication;
    }""",1
ZkUtils.java,"""/** * Update the value of a persistent node with the given path and data. create parent directory if * necessary. Never throw NodeExistException. Return the updated path zkVersion */""","""public static void updatePersistentPath(ZkClient client, String path, String data) {
    try {
      client.writeData(path, data);
    } catch (ZkNoNodeException nne) {
      createParentPath(client, path);
      try {
        client.createPersistent(path, data);
      } catch (ZkNodeExistsException nee) {
        client.writeData(path, data);
      }
    }
  }""",1
WorkerManager.java,"""/** * Find the _Fields constant that matches fieldId, or null if its not found. */""","""public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NE
            return NE;
          default:
            return null;
        }
      }""",1
WBSMilestoneType.java,"""/** * Gets the value of the projectId property. * * @return *     possible object is *     {@link String } * */""","""public String getProjectId()
   {
      return projectId;
   }""",1
ZipArchiveOutputStream.java,"""/** * Flushes this output stream and forces any buffered output bytes * to be written out to the stream. * * @exception  IOException  if an I/O error occurs. */""","""public void flush() throws IOException {
        if (out != null) {
            out.flush();
        }
    }""",1
WintInnerHackBase64.java,"""/** * Discards any characters outside of the base64 alphabet, per * the requirements on page 25 of RFC 2045 - ""Any characters * outside of the base64 alphabet are to be ignored in base64 * encoded data."" * * @param data The base-64 encoded data to groom * @return The data, less non-base64 characters (see RFC 2045). */""","""static byte[] discardNonBase64(byte[] data) {
        byte groomedData[] = new byte[data.length];
        int bytesCopied = 0;

        for (int i = 0; i < data.length; i++) {
            if (isBase64(data[i])) {
                groomedData[bytesCopied++] = data[i];
            }
        }

        byte packedData[] = new byte[bytesCopied];

        System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);

        return packedData;
    }""",1
WidgetTextfieldInteger.java,"""/** * @return    The specified value. */""","""public int getValue() {
		
		return Integer.parseInt(textfield.getText());
		
	}""",1
AbstractExternalService.java,"""/** * Helper function for constructors. */""","""protected static final <T extends CommonFieldsBase> T newEntity(T parameterTableRelation, CallingContext cc) throws ODKDatastoreException {
Datastore ds = cc.getDatastore();
User user = cc.getCurrentUser();
return ds.createEntityUsingRelation(parameterTableRelation, user);
}""",0
WrapperPlayServerSpawnEntityExperienceOrb.java,"""/** * Set the y position of the object. * @param value - new value. */""","""public void setY(double value) {
        handle.getIntegers().write(2, (int) Math.floor(value * 32.0D));
    }""",1
WorkflowStateTag.java,"""/** * @return the stateIds */""","""public List<String> getStateIds() {
		return stateIds;
	}""",1
WrapperPlayServerMapChunkBulk.java,"""/** * Set the size of the data field. * @param value - new value. */""","""public void setDataLength(int value) {
        handle.getIntegers().write(0, value);
    }""",1
WindowCache.java,"""/** * Returns the size of the {@link #sWindows} cache. * * @param cls The class of the implementation of the window. * @return True if the cache corresponding to this class is empty, false if * it is not empty. */""","""public int getCacheSize(Class<? extends StandOutWindow> cls) {
        SparseArray<Window> l2 = sWindows.get(cls);
        if (l2 == null) {
            return 0;
        }

        return l2.size();
    }""",1
ZergPositionFinder.java,"""/** * Returns true if given position (treated as building position for our <b>UnitType building</b>) has all * necessary requirements like: doesn't collide with another building, isn't too close to minerals etc. */""","""public static boolean doesPositionFulfillAllConditions(AUnit builder, AUnitType building, APosition position) {

        // Check for CREEP
        if (!isCreepConditionFulfilled(building, position)) {
            _CONDITION_THAT_FAILED = ""CREEP"";
            return false;
        }

        // =========================================================
        // If it's not physically possible to build here (e.g. rocks, other buildings etc)
        if (!canPhysicallyBuildHere(builder, building, position)) {
//            System.out.println(builder + "" / "" + ConstructionBuildPositionFinder.building + "" / "" + position);
            _CONDITION_THAT_FAILED = ""CAN'T PHYSICALLY BUILD"";
            return false;
        }

        // If other buildings too close
        if (isOtherConstructionTooClose(builder, building, position)) {
//            _CONDITION_THAT_FAILED = ""BUILDINGS TOO CLOSE"";
            return false;
        }

        // Can't be too close to minerals or to geyser, because would slow down production
        if (isTooCloseToMineralsOrGeyser(building, position)) {
            _CONDITION_THAT_FAILED = ""TOO CLOSE TO MINERALS OR GEYSER"";
            return false;
        }

        // All conditions are fullfilled, return this position
        _CONDITION_THAT_FAILED = null;
        return true;
    }""",1
EntityUtil.java,"""/** * Assumes that the key in <key, value> pairs is an Object to which a regular equals() is applicable. */""","""public static boolean deepEqual(Map<?, ? extends Entity> o1, Map<?, ? extends Entity> o2) {
    if (o1.keySet().size() != o2.keySet().size()) return false;
    for (Entry<?,? extends Entity> entry : o1.entrySet()) {
        Object actualKey = findMatchingKey(entry.getKey(), o2.keySet());
        if (actualKey == null) return false;
        if (!deepEqual(entry.getValue(), o2.get(actualKey)))
            return false;
    }
    return true;
}""",0
VorbisCommentReader.java,"""/** * Looks for an identification header in the first page of the file. If an * identification header is found, it will be skipped completely and the * method will return true, otherwise false. * * @throws IOException */""","""private boolean findIdentificationHeader(InputStream input)
            throws IOException {
        byte[] buffer = new byte[FIRST_PAGE_LENGTH];
        IOUtils.readFully(input, buffer);
        int i;
        for (i = 6; i < buffer.length; i++) {
            if (buffer[i - 5] == 'v' && buffer[i - 4] == 'o'
                    && buffer[i - 3] == 'r' && buffer[i - 2] == 'b'
                    && buffer[i - 1] == 'i' && buffer[i] == 's'
                    && buffer[i - 6] == PACKET_TYPE_IDENTIFICATION) {
                return true;
            }
        }
        return false;
    }""",1
WallImageActivity.java,"""/** * Loads the {@link red.yelo.fragments.ImageViewFragment} into the fragment container * and opens the image through the url supplied */""","""public void loadWallImageScreen(String wall_image) {


        Bundle args = new Bundle();
        args.putString(AppConstants.Keys.WALL_IMAGES, wall_image);
        loadFragment(R.id.frame_content, (AbstractYeloFragment) Fragment
                        .instantiate(this, ImageViewFragment.class
                                .getName(), args), AppConstants.FragmentTags.SEARCH, false,
                null
        );

    }""",1
XtnInfo.java,"""/** * Constructs a new Xtn info. */""","""public XtnInfo(ServerTransaction xtn) {
        m_Transaction = xtn;
        setStatus(XtnStatus.UNINITIALIZED);
        m_Readonly = true;
        m_Active = true;
        m_startTime = SystemTime.timeMillis();
        _usage = 1;
        _lastUsageTime = m_startTime;
        _onlyEmbeddedJoins = true;
    }""",1
WXBaseCircleIndicator.java,"""/** * Get attribute of xml */""","""private void getAttrs(Context context) {
    radius = WXViewUtils.dip2px(5);
    circlePadding = WXViewUtils.dip2px(5);
    pageColor = Color.parseColor(""#ffffff"");
    //		strokeWidth= WAViewUtils.dip2px((float)1.5);
    //		strokeColor = Color.parseColor(""#FFDDDDDD"");
    fillColor = Color.parseColor(""#ffd545"");
  }""",1
TreatmentCategorizationWizardPresentation.java,"""/** *  TreatmentCategorization#splitRange(RangeEdge, double, boolean) */""","""public Pair<RangeEdge> splitRange(final RangeEdge range, final double value, final boolean lowerRangeOpen) {
    ObservableList<DecisionTreeNode> options1 = getOptionsForEdge(range);
    Pair<RangeEdge> ranges = getBean().splitRange(range, value, lowerRangeOpen);
    
    // Ensure options list is preserved for first range
    d_optionsForEdge.remove(range);
    d_optionsForEdge.put(ranges.getFirst(), options1);
    
    // Ensure exclude-node for second range is in the options list
    DecisionTree tree = getBean().getDecisionTree();
    ObservableList<DecisionTreeNode> options2 = createOptionsForChildrenOfNode((ChoiceNode) tree.getEdgeSource(ranges.getSecond()));
    d_optionsForEdge.put(ranges.getSecond(), options2);
    getModelForEdge(ranges.getSecond()).setValue(findLeafNode(options2, null));
    
    return ranges;
}""",0
WBSType.java,"""/** * Sets the value of the summaryActivityCount property. * * @param value *     allowed object is *     {@link Integer } * */""","""public void setSummaryActivityCount(Integer value)
   {
      this.summaryActivityCount = value;
   }""",1
ZMQ.java,"""/** * Sets the ROUTER socket behavior when an unroutable message is encountered. * A value of false is the default and discards the message silently * when it cannot be routed or the peers SNDHWM is reached. * A value of true returns an EHOSTUNREACH error code if the message cannot be routed * or EAGAIN error code if the SNDHWM is reached and ZMQ_DONTWAIT was used. * Without ZMQ_DONTWAIT it will block until the SNDTIMEO is reached or a spot in the send queue opens up. * * @param mandatory A value of false is the default and discards the message silently when it cannot be routed. *                  A value of true returns an EHOSTUNREACH error code if the message cannot be routed. * @return true if the option was set, otherwise false. */""","""public boolean setRouterMandatory(boolean mandatory)
        {
            return setSocketOpt(zmq.ZMQ.ZMQ_ROUTER_MANDATORY, mandatory);
        }""",1
WebappManager.java,"""/** * Writes the data from the List to the file. * * @param file * @param list * @throws IOException */""","""private static void writeData(final List<String> list, final File file)
            throws IOException {
        FileWriter fileWriter = new FileWriter(file);
        for (String str : list) {
            fileWriter.write(str + ""\n"");
        }
        fileWriter.flush();
        fileWriter.close();
    }""",1
ZeroOrOneFactory.java,"""/** * converts a zero ore one of zero or ones * to a zero ore one of zero or ones * <p/> */""","""public static <Z> ZeroOrOne<ZeroOrOne<Z>> zeroOrOnes(
  final ZeroOrOne<ZeroOrOne<Z>> nmz
 ) {
  return nmz.traverseZeroOrOnes(
   () -> ZeroOrOneFactory.<Z>zero(),
   (ZeroOrOne<Z> mz) -> mz
  ).apply(lift1(ZeroOrOneFactory::one));
 }""",1
WorkerMessages.java,"""/** * @param lwpcOID * @return */""","""public static String getUnknownWorkerDisposalMessage(String lwpcOID) {
		return ""The consumer ["" + lwpcOID + 
				""] disposed an unknown worker. This disposal was ignored."";
	}""",1
WebsocketRequestBuilderDefault.java,"""/** * The ExecutorService to use to * send events to the client. */""","""protected ExecutorService getThreadExecutorForClientEvents() {

        if(this.threadExecutorForClientEvents == null) {
            ThreadFactory threadFactory = getThreadExecutorForClientEventsThreadThreadFactory();
            if(threadFactory != null) {
                this.threadExecutorForClientEvents =
                        Executors.newFixedThreadPool(getThreadExecutorForClientEventsThreadNumber(), threadFactory);
            } else {
                this.threadExecutorForClientEvents = Executors.newFixedThreadPool(getThreadExecutorForClientEventsThreadNumber());
            }
        }

        return this.threadExecutorForClientEvents;
    }""",1
WrapperPlayServerScoreboardTeam.java,"""/** * Set only if Mode = 0 or 2. This will be after before the name of each team member. * <p> * A team must be created or updated. * @param value - new value. */""","""public void setTeamSuffix(String value) {
        handle.getStrings().write(3, value);
    }""",1
WXSReduceAgent.java,"""/** * This invokes the ReduceAgent for each key as efficiently as possible and reduces the results. * * @param <K> *            The key type * @param <A> *            The agent type * @param <X> *            The result of the ReduceGridAgent * @param batch *            The key/agent map * @param bmap *            The map containing the keys * @return The reduced value for all agents */""","""static private <A extends ReduceGridAgent, K extends Serializable, X> X callReduceAgentAll(WXSUtils utils, Map<K, A> batch, BackingMap bmap) {
		if (batch.size() > 0) {
			try {
				Map<Integer, SortedMap<K, A>> pmap = convertToPartitionEntryMap(bmap, batch);
				ArrayList<Future<X>> results = new ArrayList<Future<X>>(pmap.size());

				for (SortedMap<K, A> perPartitionEntries : pmap.values()) {
					// we need one key for partition routing
					// so get the first one
					K key = perPartitionEntries.keySet().iterator().next();

					// invoke the agent to add the batch of records to the grid
					ReduceAgentExecutor<A, K> ia = new ReduceAgentExecutor<A, K>();
					ia.batch = perPartitionEntries;
					// only call if work to go
					if (ia.batch.size() > 0) {
						Future<X> fv = utils.getExecutorService().submit(new CallReduceAgentThread<X>(utils, bmap.getName(), key, ia));
						results.add(fv);
					}
				}

				List<X> r = collectResultsAsList(results, ConfigProperties.getAgentTimeout(utils.getConfigProperties()));
				A agent = batch.values().iterator().next();
				X retVal = (X) agent.reduceResults(r);

				return retVal;
			} catch (Exception e) {
				logger.log(Level.SEVERE, ""Exception"", e);
				throw new ObjectGridRuntimeException(e);
			}
		}

		return null;
	}""",1
XmlBeanFactory.java,"""/** * Configures the object by parsing the provided XML.<br/> * The underlying XmlBean will start at the root of the XML and will access * private fields as needed. * @param is The InputStream containing the XML document to configure the object * @param obj The object instance to configure * @see XmlBean#configure(java.io.InputStream, java.lang.Object) */""","""static public void configure(InputStream is, Object obj) throws XmlBeanException, IOException, SAXException {
        createXmlBean().configure(is, obj);
    }""",1
WebResourcesBrowserInformationControl.java,"""/** * Browser information control for Web Resources. * */""","""public class WebResourcesBrowserInformationControl extends
		BrowserInformationControl {

	public WebResourcesBrowserInformationControl(Shell parent,
			String symbolicFontName, ToolBarManager toolBarManager) {
		super(parent, symbolicFontName, toolBarManager);
	}

	@Override
	public IInformationControlCreator getInformationPresenterControlCreator() {
		// Hack: We don't wan't to have auto-enrichment when the mouse moves
		// into the hover,
		// but we do want F2 to persist the hover. The framework has no way to
		// distinguish the
		// two requests, so we have to implement this aspect.
		for (StackTraceElement element : Thread.currentThread().getStackTrace()) {
			if (""canMoveIntoInformationControl"".equals(element.getMethodName()) //$NON-NLS-1$
					&& ""org.eclipse.jface.text.AbstractHoverInformationControlManager"".equals(element.getClassName())) //$NON-NLS-1$
				return null; // do not enrich bracket hover
		}
		return super.getInformationPresenterControlCreator();
	}

}""",1
ZrcListView.java,"""/** * @return Whether the views created by the ListAdapter can contain *         focusable items. */""","""public boolean getItemsCanFocus() {
        return mItemsCanFocus;
    }""",1
WBSType.java,"""/** * Sets the value of the summaryAccountingVarianceByLaborUnits property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryAccountingVarianceByLaborUnits(Double value)
   {
      this.summaryAccountingVarianceByLaborUnits = value;
   }""",1
BaseRemoteProxy.java,"""/** * Internal use only */""","""public void forceSlotCleanerRun() {
cleanUpThread.cleanUpAllSlots();
}""",0
WinstoneResponse.java,"""/** * @deprecated */""","""@Deprecated
	@Override
	public String encodeUrl(final String url) {
		return encodeURL(url);
	}""",1
WebdavServlet.java,"""/** * This is a cheesy way to set the value of the hadoop config * @param config */""","""public static void setConf(Configuration config) {
        hadoopConfig = config;   
    }""",1
XTraceGCUtils.java,"""/** * Ask each GC bean for its elapsed collection time */""","""public static long calculateElapsedGC() {
        long timeMillis = 0;
        for (GarbageCollectorMXBean gcbean : gcbeans) {
            timeMillis += gcbean.getCollectionTime();
        }
        return timeMillis;
    }""",1
WSBaseActivity.java,"""/** * Initialize the view. * * This has to be done after onCreate() because the various drawer resources need to exist * already, so this is called explicitly in the constructor of child objects. * * @return *   true if the caller should continue processing *   false if authentication is needed and the caller should finish() */""","""protected boolean initView() {
        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        mLeftDrawerList = (ListView) mDrawerLayout.findViewById(R.id.left_drawer);
        mLeftDrawerList.setChoiceMode(ListView.CHOICE_MODE_SINGLE);

        mToolbar = (Toolbar) findViewById(R.id.toolbar);
        mNavDrawerListAdapter = new NavDrawerListAdapter(this, mNavRowList, mCurrentActivity);
        mLeftDrawerList.setAdapter(mNavDrawerListAdapter);
        mLeftDrawerList.setOnItemClickListener(this);

        if (mToolbar != null) {
            mToolbar.setTitle(mActivityFriendly);
            setSupportActionBar(mToolbar);
        }

        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout, mToolbar, R.string.drawer_open, R.string.drawer_close) {

            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
            }

            @Override
            public void onDrawerOpened(View drawerView) {
                super.onDrawerOpened(drawerView);
            }
        };
        mDrawerLayout.setDrawerListener(mDrawerToggle);

        // Make sure we have an active account, or go to authentication screen
        if (!setupCredentials()) {
            return(false);
        }
        initDrawer();

        return true;
    }""",1
WindowManagerService.java,"""/** * Starts the view server on the specified port. * * @param port The port to listener to. * * @return True if the server was successfully started, false otherwise. * * @see com.android.server.wm.ViewServer * @see com.android.server.wm.ViewServer#VIEW_SERVER_DEFAULT_PORT */""","""@Override
    public boolean startViewServer(int port) {
        if (isSystemSecure()) {
            return false;
        }

        if (!checkCallingPermission(Manifest.permission.DUMP, ""startViewServer"")) {
            return false;
        }

        if (port < 1024) {
            return false;
        }

        if (mViewServer != null) {
            if (!mViewServer.isRunning()) {
                try {
                    return mViewServer.start();
                } catch (IOException e) {
                    Slog.w(TAG, ""View server did not start"");
                }
            }
            return false;
        }

        try {
            mViewServer = new ViewServer(this, port);
            return mViewServer.start();
        } catch (IOException e) {
            Slog.w(TAG, ""View server did not start"");
        }
        return false;
    }""",1
WholeColumnFamilyIterator.java,"""/** * @param currentRow All keys have this in their row portion (do not modify!). * @param keys       One key for each key in the row, ordered as they are given by the source iterator (do not modify!). * @param values     One value for each key in keys, ordered to correspond to the ordering in keys (do not modify!). * @return true if we want to keep the row, false if we want to skip it */""","""protected boolean filter(Text currentRow, Collection<Map.Entry<Key,Value>> keysValues) {
        return true;
    }""",1
WcmCommandHandler.java,"""/** * Activates provided asset * * @param assetPath path to asset * @throws IOException if response doesn't contain desired message */""","""public void activatePage(String assetPath) throws IOException {
    triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String, String>()
        .put(PATH_PROPERTY, assetPath)
        .put(CMD_PROPERTY, ACTIVATE)
        .put(CHARSET_PROPERTY, UTF_8).build()), REPLICATE_URL,
        REPLICATION_STARTED_MESSAGE + assetPath);
  }""",1
WsFrameEncodingSupport.java,"""/** * Performs an in-situ unmasking of the readable buf bytes. * Preserves the position of the buffer whilst unmasking all the readable bytes, * such that the unmasked bytes will be readable after this invocation. * * @param buf   the buffer containing readable bytes to be unmasked. * @param mask  the mask to apply against the readable bytes of buffer. */""","""public static void unmask(ByteBuffer buf, int mask) {
        byte b;
        int remainder = buf.remaining() % 4;
        int remaining = buf.remaining() - remainder;
        int end = remaining + buf.position();

        // xor a 32bit word at a time as long as possible
        while (buf.position() < end) {
            int plaintext = buf.getInt(buf.position()) ^ mask;
            buf.putInt(plaintext);
        }

        // xor the remaining 3, 2, or 1 bytes
        switch (remainder) {
        case 3:
            b = (byte) (buf.get(buf.position()) ^ ((mask >> 24) & 0xff));
            buf.put(b);
            b = (byte) (buf.get(buf.position()) ^ ((mask >> 16) & 0xff));
            buf.put(b);
            b = (byte) (buf.get(buf.position()) ^ ((mask >> 8) & 0xff));
            buf.put(b);
            break;
        case 2:
            b = (byte) (buf.get(buf.position()) ^ ((mask >> 24) & 0xff));
            buf.put(b);
            b = (byte) (buf.get(buf.position()) ^ ((mask >> 16) & 0xff));
            buf.put(b);
            break;
        case 1:
            b = (byte) (buf.get(buf.position()) ^ (mask >> 24));
            buf.put(b);
            break;
        case 0:
        default:
                break;
        }
    }""",1
WidgetHistogramYaxisType.java,"""/** * @return    True if frequency should be shown. */""","""public boolean isFrequencyShown() {
		
		return axisTypeCombobox.getSelectedItem().toString().equals(""Frequency"") || axisTypeCombobox.getSelectedItem().toString().equals(""Both"");
		
	}""",1
XmlPatchBodyReaderMountPointTest.java,"""/** * Test trying to use Patch create operation which requires value without value. Error code 400 should be returned. */""","""@Test
    public void moduleDataValueMissingNegativeTest() throws Exception {
        final String uri = MOUNT_POINT + ""instance-identifier-patch-module:patch-cont/my-list1=leaf1"";
        mockBodyReader(uri, xmlToPatchBodyReader, false);
        final InputStream inputStream = TestXmlBodyReader.class
                .getResourceAsStream(""/instanceidentifier/xml/xmlPATCHdataValueMissing.xml"");
        try {
            xmlToPatchBodyReader.readFrom(null, null, null, mediaType, null, inputStream);
            fail(""Test should return error 400 due to missing value node when attempt to invoke create operation"");
        } catch (final RestconfDocumentedException e) {
            assertEquals(""Error code 400 expected"", 400, e.getErrors().get(0).getErrorTag().getStatusCode());
        }
    }""",1
WeekView.java,"""/** * Set whether the week view should fling vertically. * @return True if it should have vertical fling enabled. */""","""public void setVerticalFlingEnabled(boolean enabled) {
        mVerticalFlingEnabled = enabled;
    }""",1
WorkerMessages.java,"""/** * @param remoteWorkerID * @return */""","""public static String getRemoteWorkerFailureMessage(String remoteWorkerID) {
		return ""The remote Worker ["" + remoteWorkerID + ""] has failed. Disposing this Worker."";
	}""",1
WishResource.java,"""/** * GET  /wishes/:id : get the ""id"" wish. * * @param id the id of the wish to retrieve * @return the ResponseEntity with status 200 (OK) and with body the wish, or with status 404 (Not Found) */""","""@GetMapping(""/wishes/{id}"")
    @Timed
    public ResponseEntity<Wish> getWish(@PathVariable Long id) {
        log.debug(""REST request to get Wish : {}"", id);
        Wish wish = wishService.findOne(id);
        return Optional.ofNullable(wish)
            .map(result -> new ResponseEntity<>(
                result,
                HttpStatus.OK))
            .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }""",1
WebSocketHandlerAdapter.java,"""/** * Disconnect the WebSocket */""","""@Override
    public synchronized void processClose(WebSocketChannel channel, int code, String reason) {
        nextHandler.processClose(channel, code, reason);        
    }""",1
WritableRpcEngine.java,"""/** Construct a server for a protocol implementation instance listening on a * port and address. */""","""public Server getServer(Class<? extends VersionedProtocol> protocol,
                          Object instance,
                          Class<?>[] ifaces,
                          String bindAddress, int port,
                          int numHandlers,
                          int metaHandlerCount, boolean verbose,
                          Configuration conf, int highPriorityLevel)
    throws IOException {
    return new Server(instance, ifaces, conf, bindAddress, port, numHandlers,
        metaHandlerCount, verbose, highPriorityLevel);
  }""",1
AbstractCalendarView.java,"""/** * Do NOT modify this inventory on the client side of a singleplayer game! */""","""public IInventory getBaubles(EntityPlayer player) {
return hasBaubles() ? getBaublesInvUnsafe(player) : null;
}""",0
XInputLibraryVersion.java,"""/** * The version of the loaded DLL. * * @author Ivan ""StrikerX3"" Oliveira */""","""public enum XInputLibraryVersion {
    /**
     * Library was not loaded.
     */
    NONE,

    /**
     * XInput 1.4 was loaded.
     */
    XINPUT_1_4,

    /**
     * XInput 1.3 was loaded.
     */
    XINPUT_1_3,

    /**
     * XInput 9.1.0 was loaded.
     */
    XINPUT_9_1_0
}""",1
WifiStatus.java,"""/** * Method to Check if wifi is enabled * * @return true if wifi enabled or false if wifi Disabled */""","""public boolean istWifiEnabled() {
			if (!mWifiManager.isWifiEnabled() ) {
				  return false;
			 }else{
			      return true;  	   
			  }
	  }""",1
ZMQ.java,"""/** * The ZMQ_BACKLOG option shall set the maximum length * of the queue of outstanding peer connections for the specified socket; * this only applies to connection-oriented transports. * For details refer to your operating system documentation for the listen function. * * @param value the maximum length of the queue of outstanding peer connections. * @return true if the option was set, otherwise false. * @deprecated this option uses integer range, use {@link #setBacklog(int)} instead. * @see #getBacklog() */""","""@Deprecated
        public boolean setBacklog(long value)
        {
            return setBacklog(Long.valueOf(value).intValue());
        }""",1
AbstractCalendarView.java,"""/* * called for implicitCA */""","""public BCECGOST3410PublicKey(
    String algorithm,
    ECPublicKeyParameters params)
{
    this.algorithm = algorithm;
    this.ecPublicKey = params;
    this.ecSpec = null;
}""",0
WorldEditCUI.java,"""/** * @see com.sijobe.spc.core.IHook#init(java.lang.Object[]) */""","""@Override
   public void init(Object... params) {
   }""",1
WorkerManager.java,"""/** * Performs a deep copy on <i>other</i>. */""","""public update_status_args(update_status_args other) {
      if (other.is_set_instance_name()) {
        this.instance_name = other.instance_name;
      }
    }""",1
WorldGuardHandler6.java,"""/** * Build a DefaultDomain from a RegionAccessSet. * @param regionAccessSet RegionAccessSet to read * @return DefaultDomain containing the entities from the RegionAccessSet */""","""private DefaultDomain buildDomain(RegionAccessSet regionAccessSet) {
		DefaultDomain owners = new DefaultDomain();

		for(String playerName : regionAccessSet.getPlayerNames()) {
			owners.addPlayer(playerName);
		}

		for(UUID uuid : regionAccessSet.getPlayerUniqueIds()) {
			owners.addPlayer(uuid);
		}

		for(String group : regionAccessSet.getGroupNames()) {
			owners.addGroup(group);
		}

		return owners;
	}""",1
ZooKeeperConfiguration.java,"""/** * Return a managed Curator connection.  This created connection will be wrapped in a * {@link ManagedCuratorFramework} and offered to the provided {@link LifecycleEnvironment} parameter. */""","""public CuratorFramework newManagedCurator(LifecycleEnvironment env) {
        CuratorFramework curator = newCurator();
        env.manage(new ManagedCuratorFramework(curator));
        return curator;
    }""",1
WrapperPlayServerNamedEntitySpawn.java,"""/** * Retrieve player's full profile. * @return The spawner player's profile. */""","""public WrappedGameProfile getProfile() {
        return handle.getGameProfiles().read(0);
    }""",1
WritableFlaggingCache.java,"""/** * A {@link FlaggingCache} that can be written to. * * @author Bastian Gloeckle */""","""public interface WritableFlaggingCache<K1 extends Comparable<K1>, K2 extends Comparable<K2>, V>
    extends FlaggingCache<K1, K2, V>, WritableCache<K1, K2, V> {
  /**
   * Offer an element to the cache and flag it right away.
   * 
   * <p>
   * This will either lead to flagging the currently available entry in the cache for that (K1,K2), or to adding the new
   * value and flagging it. After calling this method, there will be an entry in the cache for the given (K1, K2).
   * 
   * @see #flagAndGet(Comparable, Comparable, long)
   * @param key1
   *          key part one.
   * @param key2
   *          key part two.
   * @param value
   *          The value to be cached.
   * @param flagUntilNanos
   *          {@link System#nanoTime()} of when the flag should be removed from the value earliest.
   * @return The value instance now stored in the cache.
   */
  public V offerAndFlag(K1 key1, K2 key2, V value, long flagUntilNanos);
}""",1
WithModuleFactory.java,"""/** * Marks a screen as defining a {@link MortarScope}, with a factory class to * create its Dagger module. * * @see WithModule * @see ScreenScoper */""","""@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME)
public @interface WithModuleFactory {
  Class<? extends ModuleFactory> value();
}
}""",1
WeatherNotificationSettings.java,"""/** * Check if the user want measurements from the nearest station * * @param context * @return true if the user want measurements from the nearest station */""","""public static boolean isUsingNearestStation(Context context) {
		final SharedPreferences settings = context.getSharedPreferences(
				PREFS_NAME, 0);
		return settings.getBoolean(PREFS_USE_NEAREST_STATION_KEY,
				PREFS_USE_NEAREST_STATION_DEFAULT);

	}""",1
YeastGenerator.java,"""/** * @param te - parent tile entity * @param fluidSlotIndex - fluid slot id to use in parent *             Fluid will be used from this slot * @param invSlotIndex - inventory slot id to use in parent *             Yeast will be generated into this slot */""","""public YeastGenerator(TileEntityCellarDevice te, int fluidSlotIndex, int invSlotIndex)
	{
		super(te);
		this.fluidSlot = new DeviceFluidSlot(te, fluidSlotIndex);
		this.invSlot = new DeviceInventorySlot(te, invSlotIndex);
		setTimeMax(1200);
	}""",1
AbstractCalendarView.java,"""/* * called for implicitCA */""","""public BCECPublicKey(
    String algorithm,
    ECPublicKeyParameters params,
    ProviderConfiguration configuration)
{
    this.algorithm = algorithm;
    this.ecPublicKey = params;
    this.ecSpec = null;
    this.configuration = configuration;
}""",0
AggregateUI.java,"""/* SINGLETON FETCHING */""","""public static synchronized final AggregateUI getUI() {
if (singleton == null) {
  // if you get here, you've put something in the AggregateUI()
  // constructor that should have been put in the onModuleLoad()
  // method.
  GWT.log(""AggregateUI.getUI() called before singleton has been initialized"");
}
return singleton;
}""",0
VMKillRequest.java,"""/** * Get the list of instance ids * * @return The list of instance ids */""","""@SuppressWarnings(""unchecked"")
    public List<String> getInstances() {
        return (List<String>) this.items.get(""instances"");
    }""",1
VOMSMessages.java,"""/** * @param workerProviderClientID * @param requestId * @return */""","""public static String getNonAuthorisedConsumerMessage(String workerProviderClientContainerID, long requestId) {
		return ""Request ""+requestId+"": request ignored because [""+ workerProviderClientContainerID + ""] "" +
				"" is not authorized at VOMS."";
	}""",1
WrapperPlayServerExplosion.java,"""/** * Retrieve the explosion radius. * <p> * Note: Currently unused in the client. * @return The current Radius */""","""public float getRadius() {
        return handle.getFloat().read(0);
    }""",1
WalledMazeRandomizer.java,"""/** * Evaluates if the Cell is Out of Bounds * * @param allCells * @param currentX * @param currentZ * @return */""","""private boolean isCellOutOfBounds(MazeCell[][] allCells, int currentX, int currentZ) {
        return currentX < 0 || currentX >= allCells.length || currentZ < 0 || currentZ >= allCells[0].length;
    }""",1
WidgetFrequencyDomainType.java,"""/** * @return    The row count for Waveform View. */""","""public int getRowCount() {
		
		return Integer.parseInt(rowCountTextfield.getText());
		
	}""",1
XfsService.java,"""/** * @see java.lang.Object#toString() */""","""@Override
	public String toString() {
		return new ToStringBuilder(this).append(""logicalName"", logicalName)
				.append(""serviceClass"", serviceClass)
				.append(""hService"", hService)
				.append(""srvcVersionsRequired"", srvcVersionsRequired)
				.append(""srvcVersion"", srvcVersion)
				.append(""spiVersion"", spiVersion).toString();
	}""",1
ZoneNodeObject.java,"""/** * Requests that the entry matching the supplied key be removed from * the <code>hostedZones</code> set. The set will not change until the * event is actually propagated through the system. */""","""@Generated(value={""com.threerings.presents.tools.GenDObjectTask""})
    public void removeFromHostedZones (Comparable<?> key)
    {
        requestEntryRemove(HOSTED_ZONES, hostedZones, key);
    }""",1
PullToRefreshBase.java,"""/** * Helper method which just calls scrollTo() in the correct scrolling * direction. */""","""protected final void setHeaderScroll(int value) {
    if (DEBUG) {
        Log.d(LOG_TAG, ""setHeaderScroll: "" + value);
    }

    // Clamp value to with pull scroll range
    final int maximumPullScroll = getMaximumPullScroll();
    value = Math.min(maximumPullScroll, Math.max(-maximumPullScroll, value));

    if (mLayoutVisibilityChangesEnabled) {
        if (value < 0) {
            mHeaderLayout.setVisibility(View.VISIBLE);
        } else if (value > 0) {
            mFooterLayout.setVisibility(View.VISIBLE);
        } else {
            mHeaderLayout.setVisibility(View.INVISIBLE);
            mFooterLayout.setVisibility(View.INVISIBLE);
        }
    }

    if (USE_HW_LAYERS) {
        /**
         * Use a Hardware Layer on the Refreshable View if we've scrolled at
         * all. We don't use them on the Header/Footer Views as they change
         * often, which would negate any HW layer performance boost.
         */
        ViewCompat.setLayerType(mRefreshableViewWrapper, value != 0 ? View.LAYER_TYPE_HARDWARE
                : View.LAYER_TYPE_NONE);
    }

    switch (getPullToRefreshScrollDirection()) {
        case VERTICAL:
            scrollTo(0, value);
            break;
        case HORIZONTAL:
            scrollTo(value, 0);
            break;
    }
}""",0
WaveWriter.java,"""/** * Create output WAV file * * @return whether file creation succeeded * * @throws IOException if file I/O error occurs allocating header */""","""public boolean createWaveFile() throws IOException {
        if (mOutFile.exists()) {
            mOutFile.delete();
        }

        if (mOutFile.createNewFile()) {
            FileOutputStream fileStream = new FileOutputStream(mOutFile);
            mOutStream = new BufferedOutputStream(fileStream, OUTPUT_STREAM_BUFFER);
            // write 44 bytes of space for the header
            mOutStream.write(new byte[44]);
            return true;
        }
        return false;
    }""",1
VMTrackerImpl.java,"""/** * @{inheritDoc */""","""@Override
    public CloudVmStatusContainer getVmStatusForJob(String jobId) {
        return jobMap.get(jobId);
    }""",1
WebDriverUtils.java,"""/** * Loops to determine if WebDriver.getWindowHandles() returns any *  additional windows that the allHandles cache does not currently *  contain. If new windows are found, switch to latest window and *  update allHandles cache. */""","""public static String handleNewWindow() {
		String newHandle = """";
		printHandles();
		Set<String> updatedHandles = driver.getWindowHandles();
		if ( updatedHandles.size() <= handleCache.size() ) {
			mainHandle = """";
			throw new IllegalStateException(""This method handleNewWindow is not appropriate\n"" +
					""in this case.  You are probably looking for the\n""+
					""use of the updateHandleCache method."");
		} else {
			if ( !updatedHandles.isEmpty() ) {
				for ( String windowId : updatedHandles ) {
					if ( !windowId.equals( mainHandle ) ) { // for all windows except main window
						if ( !handleCache.contains( windowId) ) { // for child windows not in allHandles cache
							newHandle = windowId; // set value of newly found window handle						
							LOGGER.info(""-- Open window handle: "" + newHandle + "" (new window)"" );
						}
					}
				}
				if ( !newHandle.equals("""") ) { // outside loop so it catches latest window handle if there are multiple
					LOGGER.info(""Switch to new window."");
					driver.switchTo().window( newHandle ); // switch to new window handle
				}
			} else {
				mainHandle = """";
				throw new IllegalStateException(""No browser window handles are open."");
			}
		}
		handleCache = updatedHandles; // updates remembered set of open windows
		return newHandle;
	}""",1
zzDetokenizeTaxonNames.java,"""/** Called to alter the taxon name in a single cell.  If you use the alterContentOfCells method of this class, then you must supply a real method for this, not just this stub. */""","""public boolean alterName(Taxa taxa, int it){
   		boolean nameChanged = false;
		String name = taxa.getTaxonName(it);
		if (name!=null){
			taxa.setTaxonName(it, parser.getFirstToken(name), false);
			nameChanged = true;
		}
		return nameChanged;
   	}""",1
SoundPullEventListener.java,"""/** * Constructor */""","""public SoundPullEventListener(Context context) {
    mContext = context;
    mSoundMap = new HashMap<State, Integer>();
}""",0
WBSType.java,"""/** * Sets the value of the summaryBaselineLaborUnits property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryBaselineLaborUnits(Double value)
   {
      this.summaryBaselineLaborUnits = value;
   }""",1
WrapperPlayServerSpawnEntity.java,"""/** * Retrieve entity ID of the Object. * @return The current EID */""","""public int getEntityID() {
        return handle.getIntegers().read(0);
    }""",1
WrapperPlayServerNamedEntitySpawn.java,"""/** * Set the spawned player's profile. * @param value - new profile. */""","""public void setProfile(WrappedGameProfile value) {
        handle.getGameProfiles().write(0, value);
    }""",1
VirtualConnectionNFieldsWithVirtualJMS.java,"""/** *  a customized listener for every (or many) topic. */""","""@Override
public boolean asynchronousReceive(String key, MyMessageListener listener) {
    try {
        // subscribers.get(key).setMessageListener(listener);
        ArrayList<VirtualMessageListener> lists = vsubscribers.get(key);
        lists = (lists == null) ? new ArrayList<VirtualMessageListener>(): lists;
        lists.add((VirtualMessageListener) listener);
        accesstotopic.addSubscriber();
        return vsubscribers.put(key, lists) != null;

        // return true;
    } catch (Exception e) {
        System.err.println(""Failed to enable asynchronous reception."");
        e.printStackTrace();
        return false;
    }
}""",0
RecycleBin.java,"""/** * Makes sure that the size of scrapViews does not exceed the size of activeViews. */""","""private void pruneScrapViews() {
    final int maxViews = activeViews.length;
    final int viewTypeCount = this.viewTypeCount;
    final SparseArray<View>[] scrapViews = this.scrapViews;
    for (int i = 0; i < viewTypeCount; ++i) {
        final SparseArray<View> scrapPile = scrapViews[i];
        int size = scrapPile.size();
        final int extras = size - maxViews;
        size--;
        for (int j = 0; j < extras; j++) {
            scrapPile.removeAt(size--);
        }
    }
}""",0
WBSType.java,"""/** * Gets the value of the summaryBaselineMaterialCost property. * * @return *     possible object is *     {@link Double } * */""","""public Double getSummaryBaselineMaterialCost()
   {
      return summaryBaselineMaterialCost;
   }""",1
WishListResource.java,"""/** * GET  /wish-lists : get all the wishLists. * * @return the ResponseEntity with status 200 (OK) and the list of wishLists in body */""","""@GetMapping(""/wish-lists"")
    @Timed
    public List<WishList> getAllWishLists() {
        log.debug(""REST request to get all WishLists"");
        List<WishList> wishLists = wishListRepository.findAll();
        return wishLists;
    }""",1
WrapperPlayServerCustomPayload.java,"""/** * Retrieve the custom data that sent in this message. * @return The current data */""","""public byte[] getData() {
        return handle.getByteArrays().read(0);
    }""",1
VpnProfileDataSource.java,"""/** * Insert the given VPN profile into the database.  On success the Id of * the object is updated and the object returned. * * @param profile the profile to add * @return the added VPN profile or null, if failed */""","""public VpnProfile insertProfile(VpnProfile profile)
	{
		ContentValues values = ContentValuesFromVpnProfile(profile);
		long insertId = mDatabase.insert(TABLE_VPNPROFILE, null, values);
		if (insertId == -1)
		{
			return null;
		}
		profile.setId(insertId);
		return profile;
	}""",1
WrapperPlayServerWorldParticles.java,"""/** * Set the number of particles to create. * @param value - new count. */""","""public void setNumberOfParticles(int value) {
        handle.getIntegers().write(0, value);
    }""",1
VvrManagerTaskInfo.java,"""/** * Gets the target type of the task. May be not be null. * * @return the type of the target */""","""public final VvrManagerTargetType getTargetType() {
        return this.targetType;
    }""",1
WriteOption.java,"""/** * Enum representing the mongoDB Java Driver's {@link com.mongodb.WriteConcern} * * @author <a href=""mailto:nscavell@redhat.com"">Nick Scavelli</a> */""","""public enum WriteOption {
  /**
   * @see com.mongodb.WriteConcern#ACKNOWLEDGED
   */
  ACKNOWLEDGED,
  /**
   * @see com.mongodb.WriteConcern#UNACKNOWLEDGED
   */
  UNACKNOWLEDGED,
  /**
   * @see com.mongodb.WriteConcern#FSYNCED
   */
  FSYNCED,
  /**
   * @see com.mongodb.WriteConcern#JOURNALED
   */
  JOURNALED,
  /**
   * @see com.mongodb.WriteConcern#REPLICA_ACKNOWLEDGED
   */
  REPLICA_ACKNOWLEDGED,
  /**
   * @see com.mongodb.WriteConcern#MAJORITY
   */
  MAJORITY
}""",1
X509CertSelector.java,"""/** * Returns the certificateValid criterion. The specified date must fall * within the certificate validity period for the * <code>X509Certificate</code>. If <code>null</code>, no certificateValid * check will be done. * <p> * Note that the <code>Date</code> returned is cloned to protect against * subsequent modifications. * * @return the <code>Date</code> to check (or <code>null</code>) * @see #setCertificateValid */""","""public Date getCertificateValid() {
        if (certificateValid == null) {
            return null;
        }
        return (Date)certificateValid.clone();
    }""",1
WorkerManager.java,"""/** * Find the _Fields constant that matches fieldId, or null if its not found. */""","""public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // NE
            return NE;
          default:
            return null;
        }
      }""",1
XposedHelpers.java,"""/** * Return an array with the classes of the given objects */""","""public static Class<?>[] getClassesAsArray(Class<?>... clazzes) {
        return clazzes;
    }""",1
wifiAddresses.java,"""/** * Gets a list of all clients Ip Addresses connected to the Hotspot from ARP file * @param onlyReachables  false if the list should contain unreachable clients or true otherwise * @return ArrayList of all clients Ip Addresses */""","""public ArrayList<String> getArpLiveIps(boolean onlyReachables) {
                BufferedReader bufRead = null;
                ArrayList<String> result = null;
               
                try {
                        result = new ArrayList<String>();
                        bufRead = new BufferedReader(new FileReader(""/proc/net/arp""));
                        String fileLine;
                        while ((fileLine = bufRead.readLine()) != null) {
                        	
                        	 
                                String[] splitted = fileLine.split("" +"");
                                
                                  if ((splitted != null) && (splitted.length >= 4)) {
                                	  
                                        String mac = splitted[3];
                                         if (mac.matches(""..:..:..:..:..:.."")) {
                                              boolean isReachable = pingCmd(splitted[0]);
                                             if (!onlyReachables || isReachable) {
                                                        result.add(splitted[0]);
                                                }
                                        }
                                }
                        }
                } catch (Exception e) {
                       
                } finally {
                        try {
                        	bufRead.close();
                        } catch (IOException e) {
                               
                        }
                }

                return result;
        }""",1
WritableRpcEngine.java,"""/** Construct a client-side proxy object that implements the named protocol, * talking to a server at the named address. */""","""@Override
  public <T extends VersionedProtocol> T getProxy(
      Class<T> protocol, long clientVersion,
      InetSocketAddress addr, Configuration conf, int rpcTimeout)
    throws IOException {
    if (this.client == null) {
      throw new IOException(""Client must be initialized by calling setConf(Configuration)"");
    }

    T proxy =
          (T) Proxy.newProxyInstance(
              protocol.getClassLoader(), new Class[] { protocol },
              new Invoker(client, protocol, addr, userProvider.getCurrent(), conf,
                  HBaseRPC.getRpcTimeout(rpcTimeout)));

    /*
     * TODO: checking protocol version only needs to be done once when we setup a new
     * HBaseClient.Connection.  Doing it every time we retrieve a proxy instance is resulting
     * in unnecessary RPC traffic.
     */
    long serverVersion = ((VersionedProtocol)proxy)
      .getProtocolVersion(protocol.getName(), clientVersion);
    if (serverVersion != clientVersion) {
      throw new HBaseRPC.VersionMismatch(protocol.getName(), clientVersion,
                                    serverVersion);
    }

    return proxy;
  }""",1
WBSType.java,"""/** * Sets the value of the summaryPlannedLaborCost property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryPlannedLaborCost(Double value)
   {
      this.summaryPlannedLaborCost = value;
   }""",1
AbstractCalendarView.java,"""/* /* Test methods */""","""final CsvMapper MAPPER = mapperForCsv();

public void testSimpleExplicit() throws Exception {
    ObjectReader r = MAPPER.reader(SIMPLE_SCHEMA);
    _testSimpleExplicit(r, false);
    _testSimpleExplicit(r, true);
}""",0
WindowManagerService.java,"""/** * Return the list of WindowStates associated on the passed display. * @param display The screen to return windows from. * @return The list of WindowStates on the screen, or null if the there is no screen. */""","""public WindowList getWindowListLocked(final Display display) {
        return getWindowListLocked(display.getDisplayId());
    }""",1
VSphere.java,"""/** * @param vmName - name of VM object to retrieve * @return - VirtualMachine object * @throws VSphereException If an error occurred. */""","""public VirtualMachine getVmByName(String vmName) throws VSphereException {
		try {
			return (VirtualMachine) new InventoryNavigator(
					getServiceInstance().getRootFolder()).searchManagedEntity(
							""VirtualMachine"", vmName);
		} catch (Exception e) {
			throw new VSphereException(e);
		}
	}""",1
XMLSearcherForStatic.java,"""/** * * @param file * @param collector * @param matchingString * @param startsWith * @param referenceToStatic */""","""private void internalSearch(Object selectedNode, IFile file,
			IStaticValueCollector collector, String matchingString,
			boolean startsWith, IXMLReferenceToStatic referenceToStatic) {
		IStaticValueQuerySpecification querySpecification = StaticQuerySpecificationUtil
				.getStaticQuerySpecification(referenceToStatic);
		if (querySpecification != null) {
			IStaticValueVisitor visitor = querySpecification.getVisitor(
					selectedNode, file);
			if (visitor == null) {
				return;
			}
			StaticValueSearchEngine.getDefault().search(selectedNode, file,
					visitor, collector, matchingString, startsWith, null);
		}
	}""",1
XMLResolver.java,"""/** * get node attributes from node name and attribute name * * @param list * @param nodeName * @param attributeName * @return */""","""public List<String> getAttributeValue(List<XMLNode> list, String nodeName, String attributeName) {
        List<String> valueList = new LinkedList<String>();
        for (XMLNode node : list) {
            if (node.mName.equals(nodeName)) {
                String value = node.getAttributeValue(attributeName);
                if (value != null) {
                    valueList.add(value);
                }
            }
        }
        return valueList;
    }""",1
WBSCategoryType.java,"""/** * Sets the value of the lastUpdateUser property. * * @param value *     allowed object is *     {@link String } * */""","""public void setLastUpdateUser(String value)
   {
      this.lastUpdateUser = value;
   }""",1
ProductResource.java,"""/** * Product Version 1. */""","""@ContextualActionSet
public Set<String> getContextualActionSet() {
    Set<String> result = new HashSet<String>();
    result.add(""refresh"");
    result.add(""update"");    
    switch (product.getStatus()) {
        case OUT_OF_STOCK:
            result.add(""discontinue"");      // @Action's value
            break;
    }
    return result;
}""",0
XMLFormatReader.java,"""/** * <p>Constructor for XMLFormatReader.</p> * * @param writeQueryTriples a boolean. */""","""public XMLFormatReader(final boolean writeQueryTriples) {
		super(""XML"", XMLFormatReader.MIMETYPE+(writeQueryTriples?""+querytriples"":""""));
		this.writeQueryTriples = writeQueryTriples;
	}""",1
WizardExportResourcesPage2.java,"""/** * Returns the resource extensions currently specified to be exported. * @return the resource extensions currently specified to be exported (element type: <code>String</code>) */""","""protected List getTypesToExport() {

		return selectedTypes;
	}""",1
XmppSaslException.java,"""/** * * @param saslError */""","""public XmppSaslException(SaslError saslError) {
		super();
		this.saslError = saslError;
	}""",1
AbstractBlockPositionWrapper.java,"""/** * The constructor */""","""public AbstractBlockPositionWrapper(int x, int y, int z) {
    this.x = x;
    this.y = y;

    this.z = z;
}""",0
WebSocketWebResource.java,"""/** * Checks if user is authorized to produce/consume on a given topic * * @param topic * @return * @throws Exception */""","""protected boolean isAuthorized(DestinationName topic) throws Exception {
        if (service().isAuthorizationEnabled()) {
            String authRole = clientAppId();
            return service().getAuthorizationManager().canLookup(topic, authRole);
        }
        return true;
    }""",1
XmlDataLoader.java,"""/** * Loads XML with quiz and returns {@link Quiz} object. * * @return quiz object * @throws Exception *             when deserialization fails */""","""public Quiz loadXml() throws Exception {
		Resources resources = context.getResources();
		String languageCode = getLanguageCode(resources);
		// Get XML name using reflection
		Field field = null;
		String prefix = context.getString(R.string.xml_prefix);
		try {
			field = R.raw.class.getField(prefix + languageCode);
		} catch (NoSuchFieldException e) {
			// If there is no language available use default
			field = R.raw.class.getField(prefix + context.getString(R.string.default_language));
		}
		// Create InputSream from XML resource
		InputStream source = resources.openRawResource(field.getInt(null));
		// Parse XML
		Serializer serializer = new Persister();
		return serializer.read(Quiz.class, source);
	}""",1
WBSType.java,"""/** * Gets the value of the summaryPlannedMaterialCost property. * * @return *     possible object is *     {@link Double } * */""","""public Double getSummaryPlannedMaterialCost()
   {
      return summaryPlannedMaterialCost;
   }""",1
WifiStatus.java,"""/** * Method to Check if the Device Support  Wifi or not * * @return true if Wifi supported or false if Wifi not supported */""","""public boolean isSupportWifi() {
		    PackageManager pm = mContext.getPackageManager();
		    if (pm.hasSystemFeature(PackageManager.FEATURE_WIFI)) {
		        return true;
		    } else {
		        return false;
		    }
		}""",1
WebsocketThread.java,"""/** * fireDataMissTimerOnWSsubscribe - private method to fire data miss timer on subscribe */""","""private void fireDataMissTimerOnWSsubscribe(){
        //start Timer for Web Socket Data miss Check after subscribe
        if(dataTimer != null){
        	dataTimer.cancel();
		}
        dataTimer = new Timer(""WS Data Miss Timer"");
        dataTimer.schedule(new TimerTask() {			
			@Override
			public void run() {
				if(currWSstate == WSstate.WS_MODE_SWITCHED){
					System.out.println(""WebsocketThread.fireDataMissTimerOnWSsubscribe().new TimerTask().run(): ERROR: "" +
							""Streaming Quote WS Data Miss Timer Fired after subscribe, notifying session notifier !!!"");
					//Notify Data Missed after Subscribe
					notifyWsDataMissedAfterSubscribe();
				} else{
					//Data started, let the timer expire
					System.out.println(""WebsocketThread.fireDataMissTimerOnWSsubscribe()new TimerTask().run(): "" + 
														""WS data getting pushed in, curr state["" + currWSstate + ""]"");
				}
			}
		}, dataTimeDelay);
	}""",1
WeatherNotificationSettings.java,"""/** * Gets the date when the last downloaded measurement was measured. * * @param context * @return time for last measurement */""","""public static Date getLastUpdateTime(Context context) {
		final SharedPreferences settings = context.getSharedPreferences(
				PREFS_NAME, 0);
		final long result = settings.getLong(PREFS_LAST_UPDATE_TIME_KEY, 0l);
		if (result == 0l)
			return null;
		else
			return new Date(result);
	}""",1
WorldCoordinates.java,"""/** * Returns the squared distance between this coordinates and the coordinates given as argument. */""","""public float getDistanceSquared(int par1, int par2, int par3)
    {
        float f = (float)(this.x - par1);
        float f1 = (float)(this.y - par2);
        float f2 = (float)(this.z - par3);
        return f * f + f1 * f1 + f2 * f2;
    }""",1
WaveWriter.java,"""/** * Write audio data to output file (stereo). Does * nothing if output file is not stereo channel. * * @param left  left channel audio data buffer * @param right  right channel audio data buffer * @param offset  offset into left/right buffers * @param length  buffer size in number of samples * * @throws IOException if file I/O error occurs */""","""public void write(short[] left, short[] right, int offset, int length) throws IOException {
        if (mChannels != 2) {
            return;
        }
        if (offset > length) {
            throw new IndexOutOfBoundsException(String.format(""offset %d is greater than length %d"", offset, length));
        }
        for (int i = offset; i < length; i++) {
            writeUnsignedShortLE(mOutStream, left[i]);
            writeUnsignedShortLE(mOutStream, right[i]);
            mBytesWritten += 4;
        }
    }""",1
WrapperPlayServerSpawnEntity.java,"""/** * Retrieve the optional speed y. * <p> * This is ignored if {@link #getObjectData()} is zero. * @return The optional speed y. */""","""public double getOptionalSpeedY() {
        return handle.getIntegers().read(5) / 8000.0D;
    }""",1
WrapperPlayServerNamedEntitySpawn.java,"""/** * Set the pitch of the spawned entity. * @param value - new pitch. */""","""public void setPitch(float value) {
        handle.getBytes().write(1, (byte) (value * 256.0F / 360.0F));
    }""",1
WrapperLoginServerEncryptionBegin.java,"""/** * Set the verify token. * @param value - new value. */""","""public void getVerifyToken(byte[] value) {
        handle.getByteArrays().write(0, value);
    }""",1
ZencoderOutput.java,"""/** * Add a header for S3 outputs.  See Amazon documentation for options: * http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectPUT.html?r=7050 * These values are ignored for non-S3 outputs. * * @param name Header name * @param value Header value */""","""public void addHeader(String name, String value) {
		this.headers.put(name, value);
	}""",1
WorkTimeType.java,"""/** * Sets the value of the finish property. * * @param value *     allowed object is *     {@link String } * */""","""public void setFinish(Date value)
   {
      this.finish = value;
   }""",1
WBSType.java,"""/** * Gets the value of the createUser property. * * @return *     possible object is *     {@link String } * */""","""public String getCreateUser()
   {
      return createUser;
   }""",1
WBSMilestoneType.java,"""/** * Sets the value of the sequenceNumber property. * * @param value *     allowed object is *     {@link Integer } * */""","""public void setSequenceNumber(Integer value)
   {
      this.sequenceNumber = value;
   }""",1
YoutubeProvider.java,"""/** * Set and overwrite the default before date that was read from the configuration file. * @param defaultBeforeDate defaultBeforeDate */""","""public void setDefaultBeforeDate(DateTime defaultBeforeDate) {
    this.config.setDefaultBeforeDate(defaultBeforeDate);
  }""",1
Util.java,"""/** * V must implement equals. */""","""public static <V> void assertCollectionSameElements(Collection<V> expected, Collection<V> actual) {
Collection<V> expectedCopy = new ArrayList<V>(expected);
Collection<V> actualCopy = new ArrayList<V>(actual);

for (V item : actualCopy) {
  assertTrue(expectedCopy.remove(item));
}
assertTrue(expectedCopy.isEmpty());
}""",0
WBSType.java,"""/** * Sets the value of the summaryDurationPercentOfPlanned property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryDurationPercentOfPlanned(Double value)
   {
      this.summaryDurationPercentOfPlanned = value;
   }""",1
XPathBuilder.java,"""/** * Strategy method to extract the document from the exchange. */""","""protected Object getDocument(String xml) {
        Object answer = new InputSource(new StringReader(xml));
        return answer;
    }""",1
WrapperLoginServerEncryptionBegin.java,"""/** * Set the public key instance. * @param value - new value. */""","""public void setPublicKey(PublicKey value) {
        handle.getSpecificModifier(PublicKey.class).write(0, value);
    }""",1
XMLList.java,"""/** * * @param index */""","""public void delete(int index)
    {
        if (index >= 0 && index < length())
        {
            XML xml = getXmlFromAnnotation(index);

            xml.remove();

            internalRemoveFromList(index);
        }
    }""",1
YangFile.java,"""/** * @param resource * @param parent */""","""public YangFile(IFile resource, IOpenable parent) {
        super(parent);
        this.resource = resource;
    }""",1
VMLaunchOptions.java,"""/** * Indicates which firewalls this configuration will support. This call adds to any configured firewall IDs. * You can therefore call it multiple times if it makes sense to your code logic. * @param firewallIds one or more firewall IDs to protect the new VM * @return this */""","""public @Nonnull VMLaunchOptions behindFirewalls(@Nonnull String ... firewallIds) {
        if( this.firewallIds == null || this.firewallIds.length < 1 ) {
            this.firewallIds = firewallIds;
        }""",1
AbstractCalendarView.java,"""/** * Singleton instance. */""","""public static final X500NameStyle INSTANCE = new BCStyle();

protected final Hashtable defaultLookUp;
protected final Hashtable defaultSymbols;

protected BCStyle()
{
    defaultSymbols = copyHashTable(DefaultSymbols);
    defaultLookUp = copyHashTable(DefaultLookUp);
}""",0
ZKChildListener.java,"""/** * Will be called when there is child added/deleted. * * @param parentPath the parent ZK node path; * @param currentChildren the node name list of current children. */""","""void onChanged(String parentPath, List<String> currentChildren);
}
}""",1
WrapperPlayClientBlockPlace.java,"""/** * Retrieve the z block position. * @return The current Z */""","""public int getZ() {
        return handle.getIntegers().read(2);
    }""",1
WXHack.java,"""/** * Specify a handler to deal with assertion failure, and decide whether the failure should be thrown. */""","""public static void setAssertionFailureHandler(AssertionFailureHandler handler) {
    sFailureHandler = handler;
  }""",1
ZMQ.java,"""/** * The 'ZMQ_LINGER' option shall retrieve the period for pending outbound * messages to linger in memory after closing the socket. Value of -1 means * infinite. Pending messages will be kept until they are fully transferred to * the peer. Value of 0 means that all the pending messages are dropped immediately * when socket is closed. Positive value means number of milliseconds to keep * trying to send the pending messages before discarding them. * * @return the linger period. * @see #setLinger(int) */""","""public int getLinger()
        {
            return base.getSocketOpt(zmq.ZMQ.ZMQ_LINGER);
        }""",1
WrapperPlayServerExperience.java,"""/** * Retrieve the total amount of experienced gained. * @return The current Total experience */""","""public short getTotalExperience() {
        return handle.getIntegers().read(0).shortValue();
    }""",1
WebDriverElement.java,"""/** * Looks up the underlying source {@link org.openqa.selenium.WebElement}. If the element is no * longer present, a {@link org.openqa.selenium.NoSuchElementException} may be thrown. */""","""@Override
    public WebElement getWrappedElement() {
        return source.lookup();
    }""",1
XmlaHandler.java,"""/** * Gets a Connection given a catalog (and implicitly the catalog's data * source) and the name of a user role. * * <p>If you want to pass in a role object, and you are making the call * within the same JVM (i.e. not RPC), register the role using * {@code mondrian.olap.MondrianServer.getLockBox()} and pass in the moniker * for the generated lock box entry. The server will retrieve the role from * the moniker. * * @param catalog Catalog name * @param schema Schema name * @param role User role name * @return Connection * @throws XmlaException If error occurs */""","""protected OlapConnection getConnection(
        String catalog,
        String schema,
        final String role)
        throws XmlaException
    {
        return this.getConnection(
            catalog, schema, role,
            new Properties());
    }""",1
XmlTense.java,"""/** * <p>Java class for tense. * * <p>The following schema fragment specifies the expected content contained within this class. * <p> * <pre> * &lt;simpleType name=""tense""> *   &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}string""> *     &lt;enumeration value=""FUTURE""/> *     &lt;enumeration value=""PAST""/> *     &lt;enumeration value=""PRESENT""/> *   &lt;/restriction> * &lt;/simpleType> * </pre> * */""","""@XmlType(name = ""tense"")
@XmlEnum
public enum XmlTense {

    FUTURE,
    PAST,
    PRESENT;

    public String value() {
        return name();
    }

    public static XmlTense fromValue(String v) {
        return valueOf(v);
    }

}""",1
VMTrackerImpl.java,"""/** * * @{inheritDoc */""","""@Override
    public void removeStatusForInstance(String instanceId) {
        statusMap.remove(instanceId);
    }""",1
WhoisListener.java,"""/** * * @param event */""","""@Override
    public void onWhois(WhoisEvent event) {
        if (ircBot.whoisSenders.isEmpty()) {
            return;
        }
        CommandSender sender = ircBot.whoisSenders.remove(0);

        sender.sendMessage(ChatColor.LIGHT_PURPLE + ""----[ "" + ChatColor.WHITE + ""Whois"" + ChatColor.LIGHT_PURPLE + "" ]----"");
        sender.sendMessage(ChatColor.LIGHT_PURPLE + ""Nick: "" + ChatColor.WHITE + event.getNick());
        sender.sendMessage(ChatColor.LIGHT_PURPLE + ""Username: "" + ChatColor.WHITE + event.getLogin() + ""@"" + event.getHostname());
        sender.sendMessage(ChatColor.LIGHT_PURPLE + ""Real name: "" + ChatColor.WHITE + event.getRealname());
        sender.sendMessage(ChatColor.LIGHT_PURPLE + ""Server: "" + ChatColor.WHITE + event.getServer());
        User user = null;
        for (Channel channel : ircBot.getBot().getUserBot().getChannels()) {
            for (User u : channel.getUsers()) {
                if (u.getNick().equalsIgnoreCase(event.getNick())) {
                    user = u;
                    break;
                }
            }
        }
        if (user != null) {
            if (user.isAway()) {
                sender.sendMessage(ChatColor.LIGHT_PURPLE + ""Away: "" + ChatColor.WHITE + user.getAwayMessage());
            }
        }
        if (!event.getChannels().isEmpty()) {
            StringBuilder sb = new StringBuilder();
            for (Object channel : (List<String>) event.getChannels()) {
                sb.append("" "");
                sb.append(channel);
            }
            sender.sendMessage(ChatColor.LIGHT_PURPLE + ""Currently on:"" + ChatColor.WHITE + sb.toString());
        }
        sender.sendMessage(ChatColor.LIGHT_PURPLE + ""Idle: "" + ChatColor.WHITE + secondsToTime(event.getIdleSeconds()));
        sender.sendMessage(ChatColor.LIGHT_PURPLE + ""Online since: "" + ChatColor.WHITE + secondsToDate(event.getSignOnTime()));
        sender.sendMessage(ChatColor.LIGHT_PURPLE + ""----[ "" + ChatColor.WHITE + ""End Whois"" + ChatColor.LIGHT_PURPLE + "" ]----"");
    }""",1
XmlCompressedTreeParser.java,"""/** */""","""@Override
	public void endDocument() {
		XmlNode decl = XmlNode.createDocumentDeclaration(""1.0"", ""UTF-8"", false);
		onCreateNode(decl);
	}""",1
WorkingMemoryEventMock.java,"""/** * @see org.drools.event.rule.WorkingMemoryEvent#getPropagationContext() */""","""public PropagationContext getPropagationContext() {
		return null;
	}""",1
YangSourceViewerConfiguration.java,"""/** * Determines whether the preference change encoded by the given event changes the behavior of * one of its contained components. */""","""public boolean affectsTextPresentation(PropertyChangeEvent event) {
        return scanner.affectsBehavior(event) || stringScanner.affectsBehavior(event)
                || commentScanner.affectsBehavior(event);

    }""",1
XmlCalendar2Date.java,"""/* * Converts java.util.Date to javax.xml.datatype.XMLGregorianCalendar */""","""public static XMLGregorianCalendar toXMLGregorianCalendar(Date date) {
		GregorianCalendar gCalendar = new GregorianCalendar();
		gCalendar.setTime(date);
		XMLGregorianCalendar xmlCalendar = null;
		try {
			xmlCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(gCalendar);
		} catch (DatatypeConfigurationException ex) {
//			Logger.getLogger(StringReplace.class.getName()).log(Level.SEVERE, null, ex);
		}
		return xmlCalendar;
	}""",1
WBSType.java,"""/** * Sets the value of the anticipatedStartDate property. * * @param value *     allowed object is *     {@link String } * */""","""public void setAnticipatedStartDate(Date value)
   {
      this.anticipatedStartDate = value;
   }""",1
Zerokit.java,"""/** * Loads an url in the WebView instance (on the Handler thread) * * @param url The url which will be loaded in the webview */""","""@SuppressWarnings(""WeakerAccess"")
    void loadUrl(@NonNull final WebView webView, @NonNull final String url) {
        executorWebView.execute(new Runnable() {
            @Override
            public void run() {
                webView.loadUrl(url);
            }
        });""",1
VertexBuf.java,"""/* It would be terribly nice if GLArray could be a * multiply inhereted class and these could be put in it * instead */""","""private GLBuffer bufobj;
private int bufmode = GL.GL_STATIC_DRAW;
private boolean update = false;

public void bindvbo(GOut g) {
    BGL gl = g.gl;
    synchronized(this) {
    if((bufobj != null) && (bufobj.cur != g.curgl))
        dispose();
    if(bufobj == null) {
        bufobj = new GLBuffer(g);
        gl.glBindBuffer(GL.GL_ARRAY_BUFFER, bufobj);
        Buffer data = data();
        data.rewind();
        gl.glBufferData(GL.GL_ARRAY_BUFFER, data.remaining() * elsize(), data, bufmode);
        GOut.checkerr(gl);
        update = false;
    } else if(update) {
        gl.glBindBuffer(GL.GL_ARRAY_BUFFER, bufobj);
        Buffer data = data();
        data.rewind();
        gl.glBufferData(GL.GL_ARRAY_BUFFER, data.remaining() * elsize(), data, bufmode);
        update = false;
    } else {
        gl.glBindBuffer(GL.GL_ARRAY_BUFFER, bufobj);
    }
    }
}""",0
WiffPacket.java,"""/** * @return the packet's sequence number */""","""public long getSequenceNumber() {
    int offset = getEthHeaderLength() + getIpHeaderLength() + 4;

    byte[] bytes = new byte[4];
    buffer.clear().position(offset).limit(offset + 4);
    buffer.get(bytes);

    return getULong(bytes);
  }""",1
WeaponTest.java,"""/** * Make sure {@link Weapon#getDamagePerShot()} returns the volley damage and not projectile damage. */""","""@Test
    public void testGetDamagePerShot_lb10x() throws Exception {
        final Weapon lb10xac = (Weapon) ItemDB.lookup(""LB 10-X AC"");
        assertTrue(lb10xac.getDamagePerShot() > 5);
    }""",1
XmppBuddies.java,"""/** * Maps the smack internal userMode enums into our int status mode flags * * @param userMode * @param isOnline * @return */""","""// TODO do we need the isOnline boolean?
    // Mode.available should be an equivalent
    public int retrieveState(Mode userMode, boolean isOnline) {
        int userState = XmppFriend.OFFLINE; // default return value
        
        if (userMode == Mode.dnd) {
            userState = XmppFriend.BUSY;
        } else if (userMode == Mode.away
                || userMode == Mode.xa) {
            userState = XmppFriend.AWAY;
        } else if (isOnline) {
            userState = XmppFriend.ONLINE;
        }

        return userState;
    }""",1
WorkQueueFrontier.java,"""/** * Recalculate the value of thehighest-precedence queue waiting * among inactive queues. * * @param startFrom start looking at this precedence value */""","""protected void updateHighestWaiting(int startFrom) {
        // probe for new highestWaiting
        for(int precedenceKey : getInactiveQueuesByPrecedence().tailMap(startFrom).keySet()) {
            if(!getInactiveQueuesByPrecedence().get(precedenceKey).isEmpty()) {
                highestPrecedenceWaiting = precedenceKey;
                return;
            }
        }
        // nothing waiting
        highestPrecedenceWaiting = Integer.MAX_VALUE;
    }""",1
WpadProxySearchStrategyWithDHPC.java,"""/************************************************************************* * Gets the printable name of the search strategy. * * @return the printable name of the search strategy ************************************************************************/""","""@Override
	public String getName() {
		return ""wpad"";
	}""",1
WorldChunkManagerFinite.java,"""/** Takes Blocks Coordinates */""","""private BiomeGenBase[] makeBiomes(BiomeGenBase[] biomes, int scale, int x, int z)
{
    int index;
    for (int i1 = 0; i1 < 16; i1++)
    {
        for (int k1 = 0; k1 < 16; k1++)
        {
            index = (i1) + (k1) * 16;
            int biome = getBiomeFromMaps(x + i1 - WorldGenerator.shift.getX(),
                    z + k1 - WorldGenerator.shift.getZ());
            
            biomes[index] = BiomeGenBase.getBiome(biome);
        }
    }
    return biomes;
}""",0
AbstractStage.java,"""/** * This method is threadsafe. */""","""public StageState getCurrentState() {
    return currentState;
}""",0
WallPostFragment.java,"""/** * Open a post for editing * * @param selectedWallId The id of the post to edit */""","""private void editPost(final String selectedWallId) {

        final Intent editWallPostIntent = new Intent(getActivity(), EditWallPostActivity.class);
        editWallPostIntent.putExtra(AppConstants.Keys.EDIT_POST, true);
        editWallPostIntent.putExtra(AppConstants.Keys.WALL_ID, selectedWallId);

        startActivity(editWallPostIntent);
    }""",1
ZMQ.java,"""/** * Get the current poll timeout. * * @return the current poll timeout in milliseconds. * @deprecated Timeout handling has been moved to the poll() methods. */""","""@Deprecated
        public long getTimeout()
        {
            return this.timeout;
        }""",1
WebLogicJMXLibClassLoader.java,"""/** * A {@link ClassLoader} that is used to load classes * from <code>WL_HOME/server/lib/weblogic.jar</code>. * <p> * Classloading is delegated to the parent first, before * attempting to load from the weblogic.jar file. * * @author Vineet Reynolds */""","""class WebLogicJMXLibClassLoader extends URLClassLoader {
    private static final Logger logger = Logger.getLogger(WebLogicJMXLibClassLoader.class.getName());

    public WebLogicJMXLibClassLoader(URL[] urls, ClassLoader parent, URLStreamHandlerFactory factory) {
        super(urls, parent, factory);
    }

    public WebLogicJMXLibClassLoader(URL[] urls, ClassLoader parent) {
        super(urls, parent);
    }

    public WebLogicJMXLibClassLoader(URL[] urls) {
        super(urls);
    }

    @Override
    public Class<?> loadClass(String name) throws ClassNotFoundException {
        logger.log(Level.FINEST, ""Loading class: {0}"", name);
        return super.loadClass(name);
    }
}""",1
WrapperPlayServerSpawnEntity.java,"""/** * Set the x position of the object. * @param value - new value. */""","""public void setX(double value) {
        handle.getIntegers().write(1, (int) Math.floor(value * 32.0D));
    }""",1
WoTOldMessageListFetcher.java,"""/** * Starts fetches of MessageLists from MAX_PARALLEL_MESSAGELIST_FETCH_COUNT different identities. For each identity, it is attempted to start a fetch * of the latest old message list. * * The identities are put in a LRU queue, so in the next iteration, fetches will not be allowed from identities of the previous iteration. */""","""private synchronized void fetchMessageLists() {
		final int fetchCount = fetchCount();
		
		if(fetchCount >= MAX_PARALLEL_MESSAGELIST_FETCH_COUNT) { // Check before we do the expensive database query.
			if(logDEBUG) Logger.debug(this, ""Got "" + fetchCount + "" fetches, not fetching any more."");
			return;
		}
		
		if(logDEBUG) Logger.debug(this, ""Trying to start more message list fetches, amount of fetches now: "" + fetchCount);
		
		fetchMessageListsCore();
		
		if(fetchCount() == 0 && !mIdentities.isEmpty()) {
			synchronized(mIdentities) {
				mIdentities.clear();
				fetchMessageListsCore();
			}
		}
	}""",1
VMTrackerImpl.java,"""/** * @param jobId * @return */""","""private JobInstance getJob(String jobId) {
        JobInstanceDao dao = new JobInstanceDao();
        JobInstance job = null;
        try {
            int id = Integer.parseInt(jobId);
            job = dao.findById(id);
        } catch (NumberFormatException e) {
            // dev mode. using synthetic jobID
            LOG.warn(""Using Local mode ignoring job status."");
        }
        return job;
    }""",1
ZAPDriver.java,"""/** * List model to choose the ZAP session to use. It's called on the remote machine (if present) to load all session files in the build's workspace. * * @return a {@link ListBoxModel}. It can be empty if the workspace doesn't contain any ZAP sessions. * @throws InterruptedException * @throws IOException */""","""public ListBoxModel doFillLoadSessionItems() throws IOException, InterruptedException {
            ListBoxModel items = new ListBoxModel();

            /* No workspace before the first build, so workspace is null. */
            if (workspace != null) {
                Collection<String> sessionsInString = workspace.act(new FileCallable<Collection<String>>() {

                    private static final long serialVersionUID = 1L;

                    @Override
                    public Collection<String> invoke(File f, VirtualChannel channel) {

                        /* List all files with FILE_SESSION_EXTENSION on the machine where the workspace is located. */
                        Collection<File> colFiles = FileUtils.listFiles(f, FileFilterUtils.suffixFileFilter(FILE_SESSION_EXTENSION), TrueFileFilter.INSTANCE);

                        Collection<String> colString = new ArrayList<String>();

                        /* ""Transform"" File into String */
                        for (File file : colFiles)
                            colString.add(file.getAbsolutePath());
                        /* The following line is to remove the full path to the workspace, keep just the relative path to the session colString.add(file.getAbsolutePath().replace(workspace.getRemote() + File.separatorChar, """")); */
                        return colString;
                    }

                    @Override
                    public void checkRoles(RoleChecker checker) throws SecurityException { /* N/A */ }
                });

                items.add(""""); /* To not load a session, add a blank choice. */

                for (String s : sessionsInString)
                    items.add(s);
            }

            return items;
        }""",1
VSphereScannerTest.java,"""/* * @Test public void testCreateSetClause() { VSphereScanner scanner = new * VSphereScanner(); * * String clause = scanner.createSetClause(""x"", mapper.createObjectNode() * .put(""a"", ""1"").put(""foo"", ""bar"")); * * assertThat(clause).contains(""x.a={a}"").contains(""x.foo={foo}"") * .contains("",""); * * } */""","""@Test
	public void testComputeMacId() {
		ManagedObjectReference mor = new ManagedObjectReference();
		mor.setType(""HostSystem"");
		mor.setVal(""host-123"");

		VMWareScanner s = Mockito.mock(VMWareScanner.class);
		when(s.getVCenterId()).thenReturn(""abcdef"");
		Mockito.when(s.computeUniqueId(mor)).thenCallRealMethod();

		assertThat(mor.getType()).isEqualTo(""HostSystem"");
		assertThat(s.computeUniqueId(mor)).isEqualTo(""21b23eae3d48797d8d057329705825e637e35d81"");

		VMWareScanner s2 = Mockito.mock(VMWareScanner.class);

		when(s2.getVCenterId()).thenReturn(""another"");
		Mockito.when(s2.computeUniqueId(mor)).thenCallRealMethod();
		assertThat(s.computeUniqueId(mor)).isNotEqualTo(s2.computeUniqueId(mor));
		/*
		 * try { new VSphereScanner().computeMacId(null); } catch (Exception e)
		 * { assertThat(e) .isExactlyInstanceOf(NullPointerException.class)
		 * .hasMessageContaining(""cannot be null""); }
		 * 
		 * mor = new ManagedObjectReference(); mor.setType(""VirtualMachine"");
		 * mor.setVal(""vm-123""); try { new VSphereScanner().computeMacId(mor);
		 * fail(); } catch (Exception e) { assertThat(e).isInstanceOf(
		 * IllegalArgumentException.class); }
		 */
	}""",1
WrapperPlayServerWorldParticles.java,"""/** * Retrieve the offset added to the Y position after being multiplied by random.nextGaussian(). * @return The current Offset Y */""","""public float getOffsetY() {
        return handle.getFloat().read(4);
    }""",1
WebSocketNativeBalancingHandlerTest.java,"""/* * wait receive balancer message for kaazing gateway */""","""@Test
    public void testWaitBalancerMessage() throws URISyntaxException {

        Mockery context = new Mockery();
        final WebSocketHandler nextHandler = context.mock(WebSocketHandler.class);
        final WebSocketHandlerListener listener = context.mock(WebSocketHandlerListener.class);
        final String[] requestedProtocols = new String[] { ""x-kaazing-handshake"" };

        context.checking(new Expectations() {
            {
                oneOf(nextHandler).setListener(with(aNonNull(WebSocketHandlerListener.class)));
                will(saveParameter(""listener"", 0));
                oneOf(nextHandler).processConnect(with(aNonNull(WebSocketChannel.class)), with(aNonNull(WSURI.class)), with(equal(requestedProtocols)));
                will(new CustomAction(""will fire connectionOpen"") {

                    @Override
                    public Object invoke(Invocation invocation) {
                        WebSocketHandlerListener listener = (WebSocketHandlerListener)lookup(""listener"");
                        WebSocketChannel channel = (WebSocketChannel)invocation.getParameter(0);
                        listener.connectionOpened(channel, requestedProtocols[0]);
                        return null;
                    }
                });
               
            }
        });

        WSURI uri = new WSURI(""ws://locationhost:8001/echo"");

        WebSocketChannel channel = new WebSocketNativeChannel(uri);

        WebSocketNativeBalancingHandler handler = new WebSocketNativeBalancingHandler();
        handler.setNextHandler(nextHandler);
        handler.setListener(listener);

        handler.processConnect(channel, uri, requestedProtocols);
        context.assertIsSatisfied();
    }""",1
XTraceBaggageInterface.java,"""/** Set the parent event ID in the thread's current baggage to the specified event ID * * @param parentEventId The event ID to set for the current execution */""","""public static void setParentEventId(long parentEventId) {
        BaggageContents.replace(XTRACE_BAGGAGE_NAMESPACE, PARENT_EVENT_ID_BAGGAGE_FIELD,
                ByteStrings.copyFrom(parentEventId));
    }""",1
ZMQ.java,"""/** * Defines whether the socket will act as server for PLAIN security, see zmq_plain(7). * A value of true means the socket will act as PLAIN server. * A value of false means the socket will not act as PLAIN server, * and its security role then depends on other option settings. * Setting this to false shall reset the socket security to NULL. * * @param server true if the role of the socket should be server for PLAIN security. * @return true if the option was set, otherwise false. * @see #isAsServerPlain() */""","""public boolean setAsServerPlain(boolean server)
        {
            return setSocketOpt(zmq.ZMQ.ZMQ_PLAIN_SERVER, server);
        }""",1
WindowNets.java,"""/** * Fills the list with the nets in the net list. */""","""protected void fill_list()
    {
        Nets nets = this.board_frame.board_panel.board_handling.get_routing_board().rules.nets;
        Net[] sorted_arr = new Net[nets.max_net_no()];
        for (int i = 0; i < sorted_arr.length; ++i)
        {
            sorted_arr[i] = nets.get(i + 1);
        }
        java.util.Arrays.sort(sorted_arr);
        for (int i = 0; i < sorted_arr.length; ++i)
        {
            this.add_to_list(sorted_arr[i]);
        }
        this.list.setVisibleRowCount(Math.min(sorted_arr.length, DEFAULT_TABLE_SIZE));
    }""",1
WorldChunkManagerCaves.java,"""/** * Return a list of biomes for the specified blocks. Args: listToReuse, x, y, width, length, cacheFlag (if false, * don't check biomeCache to avoid infinite loop in BiomeCacheBlock) */""","""@Override
    public BiomeGenBase[] getBiomeGenAt(BiomeGenBase[] par1ArrayOfBiomeGenBase, int par2, int par3, int par4, int par5, boolean par6)
    {
        return this.loadBlockGeneratorData(par1ArrayOfBiomeGenBase, par2, par3, par4, par5);
    }""",1
AEMonitor2.java,"""/* * Try and obtain it */""","""public boolean
enter(
    int	max_millis )
{
    try{
        if ( lock.tryLock( max_millis, TimeUnit.MILLISECONDS )){
                            
            return( true );
            
        }else{
            
            return( false );
        }
    }catch( Throwable e ){
        
        Debug.out( e );
        
        return( false );
    }
}""",0
WordWrapUtils.java,"""/** * Sets the word wrap property of all editors of a given workbench window. * * @param window *            Workbench window in which the editors will be altered * @param state *            Desired state of word wrap * @author Florian We?ling <flo@cdhq.de> */""","""public static void setWordWrapInWindow(IWorkbenchWindow window, boolean state) {
        if (window == null) {
            return;
        }

        IWorkbenchPage page = window.getActivePage();

        // iterate all open editors
        IEditorReference[] editors = page.getEditorReferences();

        for (IEditorReference e : editors) {
            // get editor and reactivate it
            IEditorPart editor = e.getEditor(true);

            WordWrapUtils.setWordWrap(editor, state);
        }
    }""",1
WorkQueueFrontier.java,"""/** * Writer the single-line reports of all queues in the * iterator to the writer * * @param writer to receive report * @param iterator over queues of interest. */""","""private void queueSingleLinesTo(PrintWriter writer, Iterator<?> iterator) {
        Object obj;
        WorkQueue q;
        boolean legendWritten = false;
        while( iterator.hasNext()) {
            obj = iterator.next();
            if (obj ==  null) {
                continue;
            }
            if(obj instanceof WorkQueue) {
                q = (WorkQueue)obj;
            } else if (obj instanceof DelayedWorkQueue) {
                q = ((DelayedWorkQueue)obj).getWorkQueue(this);
            } else {
                try {
                    q = this.allQueues.get((String)obj);
                } catch (ClassCastException cce) {
                    logger.log(Level.SEVERE,""not convertible to workqueue:""+obj,cce);
                    q = null; 
                }
            }

            if(q != null) {
                if(!legendWritten) {
                    writer.println(q.shortReportLegend());
                    legendWritten = true;
                }
                q.shortReportLineTo(writer);
            } else {
                writer.print("" ERROR: ""+obj);
            }
        }       
    }""",1
YatomataImpl.java,"""/** * Constructs the engine with the default state and the defined FSM instance */""","""public YatomataImpl(Class<T> fsmClass, T fsm) throws FSMException {
        this.fsmClass = fsmClass;
        this.fsm = fsm;
        this.fsmClassInfo = get(fsmClass);
        this.currentState = fsmClassInfo.initStartState(fsm);
    }""",1
VoldPeers.java,"""/** * Check port range according to RFC6335 * * @see http://tools.ietf.org/html/rfc6335#section-8.1 * * @param port */""","""private static void checkPortRange(final int port) {
        if (port < 0 || port > 65535) {
            throw new IllegalArgumentException(""Port="" + port + "" is not in [0-65535] range!"");
        }
        if (port < 1024) {
            throw new IllegalArgumentException(""Can not use port="" + port + "" in [0-1024] system range!"");
        }
    }""",1
WBSMilestoneType.java,"""/** * Gets the value of the createUser property. * * @return *     possible object is *     {@link String } * */""","""public String getCreateUser()
   {
      return createUser;
   }""",1
VmstaxServiceImpl.java,"""/** * @param parsers */""","""public void setParsers(List<VmstaxParser> parsers) {
		this.parsers = parsers;
	}""",1
WBSCategoryType.java,"""/** * Sets the value of the createUser property. * * @param value *     allowed object is *     {@link String } * */""","""public void setCreateUser(String value)
   {
      this.createUser = value;
   }""",1
VMJobRequest.java,"""/** * Set the job id * * @param data *            The job id */""","""public void setStopBehavior(String data) {
        this.items.put(TankConstants.KEY_STOP_BEHAVIOR, data);
    }""",1
XMLFieldLiteralDouble.java,"""/** * *                 Configuration to compare the double value of a field * * * <p>Java class for XMLFieldLiteralDouble complex type. * * <p>The following schema fragment specifies the expected content contained within this class. * * <pre> * &lt;complexType name=""XMLFieldLiteralDouble""&gt; *   &lt;complexContent&gt; *     &lt;extension base=""{}XMLFieldLiteralBase""&gt; *       &lt;attribute name=""value"" type=""{http://www.w3.org/2001/XMLSchema}double"" /&gt; *     &lt;/extension&gt; *   &lt;/complexContent&gt; * &lt;/complexType&gt; * </pre> * * */""","""@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""XMLFieldLiteralDouble"")
public class XMLFieldLiteralDouble
    extends XMLFieldLiteralBase
{

    @XmlAttribute(name = ""value"")
    protected Double value;

    /**
     * Gets the value of the value property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setValue(Double value) {
        this.value = value;
    }

}""",1
ZipArchiveEntry.java,"""/** * The ""general purpose bit"" field. * @since Apache Commons Compress 1.1 */""","""public GeneralPurposeBit getGeneralPurposeBit() {
        return gpb;
    }""",1
YangColorManager.java,"""/* * @see IColorManagerExtension#bindColor(String, RGB) */""","""public void bindColor(String key, RGB rgb) {
        Object value = fKeyTable.get(key);
        if (value != null)
            throw new UnsupportedOperationException();

        fKeyTable.put(key, rgb);
    }""",1
WrapperPlayClientEntityAction.java,"""/** * Set horse jump boost. Ranged from 0 -> 100.. * @param value - new value. */""","""public void setJumpBoost(int value) {
        handle.getIntegers().write(2, value);
    }""",1
EntityUtil.java,"""/** * Assumes that the key in <key, value> pairs is an Object to which a regular equals() is applicable. */""","""public static boolean deepEqual(Map<?, ? extends Entity> o1, Map<?, ? extends Entity> o2) {
    if (o1.keySet().size() != o2.keySet().size()) return false;
    for (Entry<?,? extends Entity> entry : o1.entrySet()) {
        Object actualKey = findMatchingKey(entry.getKey(), o2.keySet());
        if (actualKey == null) return false;
        if (!deepEqual(entry.getValue(), o2.get(actualKey)))
            return false;
    }
    return true;
}""",0
YearClass.java,"""/** * Calculates the year class by the clock speed of the cores in the phone. * Evaluations are based off the table below: * <table border=""1""> * <thead> * <tr><th width=""50%"">Amount</th><th>Year</th></tr> * <thead> * <tbody> * <tr><td>>2GHz</td><td>2014</td></tr> * <tr><td><=2GHz</td><td>2013</td></tr> * <tr><td><=1.5GHz</td><td>2012</td></tr> * <tr><td><=1.2GHz</td><td>2011</td></tr> * <tr><td><=1GHz</td><td>2010</td></tr> * <tr><td><=600MHz</td><td>2009</td></tr> * <tr><td><=528MHz</td><td>2008</td></tr> * </tbody> * </table> * * @return the year in which top-of-the-line phones had the same clock speed. */""","""private static int getClockSpeedYear() {
    long clockSpeedKHz = DeviceInfo.getCPUMaxFreqKHz();
    if (clockSpeedKHz == DeviceInfo.DEVICEINFO_UNKNOWN) return CLASS_UNKNOWN;
    // These cut-offs include 20MHz of ""slop"" because my ""1.5GHz"" Galaxy S3 reports
    // its clock speed as 1512000. So we add a little slop to keep things nominally correct.
    if (clockSpeedKHz <= 528 * MHZ_IN_KHZ) return CLASS_2008;
    if (clockSpeedKHz <= 620 * MHZ_IN_KHZ) return CLASS_2009;
    if (clockSpeedKHz <= 1020 * MHZ_IN_KHZ) return CLASS_2010;
    if (clockSpeedKHz <= 1220 * MHZ_IN_KHZ) return CLASS_2011;
    if (clockSpeedKHz <= 1520 * MHZ_IN_KHZ) return CLASS_2012;
    if (clockSpeedKHz <= 2020 * MHZ_IN_KHZ) return CLASS_2013;
    return CLASS_2014;
  }""",1
WBSType.java,"""/** * Sets the value of the summaryPlannedValueByCost property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryPlannedValueByCost(Double value)
   {
      this.summaryPlannedValueByCost = value;
   }""",1
XmlSchemaGenerator.java,"""/** * return the string representation of the processContents mode of the * give wildcard, or null if it is the schema default ""strict"" * */""","""private static String getProcessContentsModeName(WildcardMode wc) {
        switch(wc) {
        case LAX:
        case SKIP:
            return wc.name().toLowerCase();
        case STRICT:
            return null;
        default:
            throw new IllegalStateException();
        }
    }""",1
ZookeeperServerLifecycleTest.java,"""/** * This is a basic smoke test- It is to ensure that we can connect * to the spawned resource. * * @throws Exception */""","""@Test
    public void canConnectToServer() throws Exception {
        ZooKeeper keeper = newZooKeeper();

        keeper.close();
    }""",1
VoltaGroup.java,"""/** * Gets the number of repetitions. * See {@link Volta} for the playback rules. * Notice, that the actual playback could be different, * e.g. when a volta contains a jump (e.g. coda) to another * measure. */""","""public int getRepeatCount() {
		//find maximum repeat number (+1, if the last volta is a default volta)
		int maxRepeatTime = 0;
		for (val v : voltasStartMeasures) {
			if (false == v.volta.isDefault())
				maxRepeatTime = max(maxRepeatTime, v.volta.getNumbers().getStop());
			else
				maxRepeatTime = max(maxRepeatTime, 1); //enter default volta at least one time
		}
		if (voltasStartMeasures.size() > 1 && //when there is at least one other volta before a final default volta
				voltasStartMeasures.getLast().volta.isDefault()) {
			maxRepeatTime += 1;
		}
		return maxRepeatTime;
	}""",1
AbstractCalendarView.java,"""/** * Performs a deep copy on other. */""","""public BatchMutateResult(BatchMutateResult other) {
__isset_bit_vector.clear();
__isset_bit_vector.or(other.__isset_bit_vector);
if (other.isSetDeps()) {
  Set<Dep> __this__deps = new HashSet<Dep>();
  for (Dep other_element : other.deps) {
    __this__deps.add(new Dep(other_element));
  }
  this.deps = __this__deps;
}
this.lts = other.lts;
}""",0
Wizard.java,"""/** * Inspector */""","""protected JPanel step5_setup()
{
    JTextArea introText = new JTextArea();
    introText.setLineWrap(true);
    introText.setWrapStyleWord(true);
    introText.setEditable(false);
    introText.setMargin(new Insets(10, 10, 10, 10));
    introText.setAutoscrolls(true);
    introText.setText(
        ""The last, optional, component is the Global Inspector.\n""
        + ""It allows you to get information on the the running ""
        + ""simulation.\n""
        + ""\n""
        + ""Click the button below to start the Global Inspector ""
        + ""and go to the next step.""
    );
    
    JScrollPane sclIntroText = new JScrollPane(introText);
        
    btnInspector = new JButton(""Launch the Inspector"");
    btnInspector.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) {	launchInspector(); }});
    
    JPanel pnlButtons = new JPanel();
        pnlButtons.setLayout(new FlowLayout(FlowLayout.LEFT));
        pnlButtons.add(btnInspector);
    
    JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout(10, 10));
        panel.add(sclIntroText, BorderLayout.CENTER);
        panel.add(pnlButtons, BorderLayout.SOUTH);

    return panel;
}""",0
WrapperPlayServerSpawnEntityLiving.java,"""/** * Retrieve the x position of the object. * <p> * Note that the coordinate is rounded off to the nearest 1/32 of a meter. * @return The current X */""","""public double getX() {
        return handle.getIntegers().read(2) / 32.0D;
    }""",1
WebSocketConnection.java,"""/** * Create WebSockets background writer. */""","""protected void createWriter() {

      mWriterThread = new HandlerThread(""WebSocketWriter"");
      mWriterThread.start();
      mWriter = new WebSocketWriter(mWriterThread.getLooper(), mMasterHandler, mTransportChannel, mOptions);

      if (DEBUG) Log.d(TAG, ""WS writer created and started"");
   }""",1
ScriptController.java,"""/** * Method call by RecordPhoneEventListener */""","""public void addEvent(String code) {
    //		Logger.getLogger(this.getClass() ).debug(""/********controler.append(""+action+"",""+parameters[0]+"")********/"");
    if (ignoreFirstMessageFromPhone){
        ignoreFirstMessageFromPhone=false;
    }
    else{
        ATKScriptParser parse = new ATKScriptParser(new StringReader(code));
        ASTStart newnodes = new ASTStart(ATKScriptParserTreeConstants.JJTSTART);
        try {
            newnodes = parse.start();
        } catch (ParseException e) {
            Logger.getLogger(this.getClass() ).warn(""WARNING : unknow code for :""+code+""\r\n""+e.getMessage());
        }

        //insert the nodes at the last place
        for( int i=0; i< newnodes.jjtGetNumChildren() ;i++) {
            SimpleNode functionode = (SimpleNode) newnodes.jjtGetChild(i);
            ast.jjtInsertChild(functionode, ast.jjtGetNumChildren());
        }	

        if(!code.toLowerCase().startsWith(""sleep""))
            ui.updateScript();
    }
}""",0
XMLReferencesBatchValidator.java,"""/** * Validate one file. It's assumed that the file has JSP content type. * * @param file * @param reporter */""","""void validateFile(IFile file, IReporter reporter) {
		try {
			file.refreshLocal(IResource.DEPTH_ZERO, new NullProgressMonitor());
		} catch (CoreException e) {
			Trace.trace(Trace.SEVERE, """", e);
		}
		IStructuredModel model = null;
		try {
			// get DOM model on behalf of all XML references validators
			model = StructuredModelManager.getModelManager().getModelForRead(
					file);
			if (!reporter.isCancelled() && model != null
					&& model instanceof IDOMModel) {
				reporter.removeAllMessages(this, file);
				performValidation(file, reporter, (IDOMModel) model);
			}
		} catch (IOException e) {
			Trace.trace(Trace.SEVERE, """", e);
		} catch (CoreException e) {
			Trace.trace(Trace.SEVERE, """", e);
		} finally {
			if (model != null)
				model.releaseFromRead();
		}
	}""",1
ZMQ.java,"""/** * The ZMQ_SNDHWM option shall return the high water mark for outbound messages on the specified socket. * The high water mark is a hard limit on the maximum number of outstanding messages ?MQ * shall queue in memory for any single peer that the specified socket is communicating with. * A value of zero means no limit. * If this limit has been reached the socket shall enter an exceptional state and depending on the socket type, * ?MQ shall take appropriate action such as blocking or dropping sent messages. * Refer to the individual socket descriptions in zmq_socket(3) for details on the exact action taken for each socket type. * * @return the SndHWM. * @see #setSndHWM(int) */""","""public int getSndHWM()
        {
            return base.getSocketOpt(zmq.ZMQ.ZMQ_SNDHWM);
        }""",1
WidgetSpace.java,"""/** * Register receivers given by this workspace */""","""public void registerProvider() {
        final Context context = getContext();

        IntentFilter filter = new IntentFilter();
        filter.addAction(LauncherIntent.Action.ACTION_START_FRAME_ANIMATION);
        filter.addAction(LauncherIntent.Action.ACTION_STOP_FRAME_ANIMATION);
        filter.addAction(LauncherIntent.Action.ACTION_START_TWEEN_ANIMATION);
        context.registerReceiver(mAnimationProvider, filter);

        IntentFilter scrollFilter = new IntentFilter();
        scrollFilter.addAction(LauncherIntent.Action.ACTION_SCROLL_WIDGET_START);
        scrollFilter.addAction(LauncherIntent.Action.ACTION_SCROLL_WIDGET_CLOSE);
        scrollFilter.addAction(LauncherIntent.Action.ACTION_SCROLL_WIDGET_CLEAR_IMAGE_CACHE);
        scrollFilter.addAction(LauncherIntent.Action.ACTION_SCROLL_WIDGET_SELECT_ITEM);
        context.registerReceiver(mScrollViewProvider, scrollFilter);
    }""",1
XLogModule.java,"""/** * turn off log */""","""@ReactMethod
    public static void close() {
        Log.appenderClose();
        sIsLogOpen = false;
    }""",1
XyzOrder.java,"""/** * * @return *     The custId */""","""@JsonProperty(""custId"")
    public String getCustId() {
        return custId;
    }""",1
WrapperPlayServerWorldEvent.java,"""/** * Set the ID of the effect. * @see {@link SoundEffects} and {@link ParticleEffects}. * @param value - new value. */""","""public void setEffectId(int value) {
        handle.getIntegers().write(0, value);
    }""",1
WLUtils.java,"""/** * Function to get a string representation of the subtree described by the given index * * @param reverseDict * @param index * @return */""","""public static String getFeatureDecription(Map<String,String> reverseDict, int index) {
		return getFeatureDescriptionRec(reverseDict, Integer.toString(index), false);
	}""",1
YammerProxy.java,"""/** * Request a OAuth ""Request Token"". * @throws ConnectionProblem */""","""public void getRequestToken() throws YammerProxyException {
    if (DEBUG) Log.d(getClass().getName(), ""YammerProxy.getRequestToken"");

    if ( accessor == null ) {
      if ( DEBUG ) Log.e(getClass().getName(), ""accessor not available (yet!)"");
      return;
    }

    try {
      client.getRequestToken(accessor);
    } catch (java.io.IOException e) {
      throw new ConnectionProblem(e);
    } catch (OAuthException e) {
      throw new AccessDeniedException(e);
    } catch (Exception e) {
      throw new ConnectionProblem(e);
    }
    // We should now have a request token and a token secret
    this.requestToken = accessor.requestToken;
    this.tokenSecret = accessor.tokenSecret;

    if (DEBUG) Log.d(getClass().getName(), ""Request token: "" + this.requestToken);
    if (DEBUG) Log.d(getClass().getName(), ""Request token secret: "" + this.tokenSecret);
  }""",1
VvrDevice.java,"""/** * Open the device and create the iSCSI target. * * @param rw *            <code>true</code> to open read-write */""","""private final void doActivate(final boolean rw) {
        // TODO create a local task to register target in background after the end of the activation
        try {
            deviceInstance.activate().get();
        }
        catch (InterruptedException | ExecutionException e) {
            // Failed to activate the device
            throw new IllegalStateException(e);
        }
        final ReadWriteHandle rwHandle = deviceInstance.open(rw);

        // Implementation of protocol interface
        protocolDeviceImpl = new ProtocolDeviceImpl(rwHandle, !rw, getIscsiBlockSize());

        // iSCSI target
        final IscsiTarget iScsiTarget = IscsiTarget.newIscsiTarget(getIqn(), getIscsiAlias(), protocolDeviceImpl);
        iscsiServer.addTarget(iScsiTarget);

        // NBD export
        nbdExportName = getName();
        final NbdExport nbdExport = new NbdExport(nbdExportName, protocolDeviceImpl);
        nbdServer.addTarget(nbdExport);
    }""",1
VMInformation.java,"""/** * @{inheritDoc */""","""@Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this);
    }""",1
WikiUtil.java,"""/** * GWT use anchor to do ajax call. such as #token. * Basically, this is same with javascript location.href=token. location.href will do encoding to token. * But this encoding has some different with URL encoding. This method will encode string to location.href encoding * * Normally,Different list<br> * Space: URL=+ ; Anchor=%20 * * But system use special entity replace to replace some keywords, include +. * * @param token * @return */""","""public static String encodeURL(String token) {
		try {
			//replace token keyword #,@,>,+ etc to entity
			token = EscapeUtil.escapeToken(token);
			token = URLEncoder.encode(token, Constants.UTF8);
		} catch (UnsupportedEncodingException e) {
			WebUtil.log.error(""Encode token failed."",e);
		}
		return token;
	}""",1
WriteClassNameTest_bytes.java,"""/** * Encode a byte array to hex string * * @param bytes array of byte to encode * @return return encoded string */""","""public static String hex(byte[] bytes) {
        if (bytes == null) {
            return null;
        }

        int bytesLen = bytes.length;
        char[] chars = new char[bytesLen * 2];
        for (int i = 0; i < bytes.length; i++) {
            int a = bytes[i] & 0xFF;
            int b0 = a >> 4;
            int b1 = a & 0xf;

            chars[i * 2] = (char) (b0 + (b0 < 10 ? 48 : 55)); //hexChars[b0];
            chars[i * 2 + 1] = (char) (b1 + (b1 < 10 ? 48 : 55));
        }
        return new String(chars);
    }""",1
WavefrontStrings.java,"""/** * Convert a timestamp to the string representation that wavefront will * accept. */""","""public static String timestamp(DateTime ts) {
        return Long.toString(ts.getMillis() / 1000);
    }""",1
OutSequenceFaultSequenceTestCase.java,"""/** * Invalid service referred */""","""@Test(groups = ""wso2.esb"", description = ""- Custom proxy -Fault sequence inline"")
public void testCustomProxyFaultInline() throws Exception {

    try {
        axis2Client.sendSimpleStockQuoteRequest(getProxyServiceURLHttp(""StockQuoteProxyFour""), null, ""WSO2"");
        fail(""AxisFault Expected"");
    } catch (AxisFault axisFault) {
        assertTrue(axisFault.getReason().contains(""Fault sequence invoked""), ""Fault: value 'reason' mismatched"");
    }

}""",0
WindowsRealm.java,"""/** * Returns a simple username without any domain prefixes. * * @param username * @return a simple username */""","""private String getSimpleUsername(String username) {
        String simpleUsername = username;
        if (defaultDomain != null) {
            // sanitize username
            if (username.startsWith(defaultDomain + ""\\"")) {
                // strip default domain from domain\ username
                simpleUsername = username.substring(defaultDomain.length() + 1);
            } else if (username.endsWith(""@"" + defaultDomain)) {
                // strip default domain from username@domain
                simpleUsername = username.substring(0, username.lastIndexOf('@'));
            }
        }
        return simpleUsername;
    }""",1
WrapperPlayClientPositionLook.java,"""/** * Set absolute position. * @param value - new value. */""","""public void setZ(double value) {
        handle.getDoubles().write(2, value);
    }""",1
XMLList.java,"""/** * * @param index * @param start * @return */""","""public boolean has(int index, Scriptable start)
    {
        return 0 <= index && index < length();
    }""",1
ZipArchiveEntry.java,"""/** * The ""general purpose bit"" field. * @since Apache Commons Compress 1.1 */""","""public void setGeneralPurposeBit(GeneralPurposeBit b) {
        gpb = b;
    }""",1
VnfmSpringHelper.java,"""/** * This method should be used for receiving text message from EMS * * <p>resp = { 'output': out, // the output of the command 'err': err, // the error outputs of the * commands 'status': status // the exit status of the command } * * @param queueName * @return * @throws JMSException */""","""public String receiveTextFromQueue(String queueName)
      throws JMSException, ExecutionException, InterruptedException, VnfmSdkException {
    String res;

    Connection connection = connectionFactory.createConnection();
    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
    MessageConsumer consumer = session.createConsumer(session.createQueue(queueName));
    connection.start();
    String scriptMaxTime = properties.getProperty(""script-max-time"");
    if (scriptMaxTime != null) {
      TextMessage textMessage = (TextMessage) consumer.receive(Long.parseLong(scriptMaxTime));
      if (textMessage != null) res = textMessage.getText();
      else
        throw new VnfmSdkException(
            ""No message got from queue "" + queueName + "" after "" + scriptMaxTime);
    } else res = ((TextMessage) consumer.receive()).getText();
    log.debug(""Received Text from "" + queueName + "": "" + res);
    consumer.close();
    session.close();
    connection.close();
    return res;
  }""",1
XmlUtilities.java,"""/** * Array of String[] matching each XPath expression * @param node node to search under. Top body node * @param wantedXpathEntries * @return * @throws Exception */""","""public static String[][] extractXpathEntries( Node node, String[] wantedXpathEntries ) throws Exception {

        List<String[]> values = new ArrayList<String[]>( wantedXpathEntries.length );
        for( String expression : wantedXpathEntries ) {
            values.add( getByXpath( node, expression ) );
        }
        return values.toArray( new String[values.size()][] );
    }""",1
WePayError.java,"""/** * Known error codes.  Because wepay might add additional codes, this is not guaranteed to be an exhaustive list. */""","""public enum WePayError {
	invalid_request,
	access_denied,
	invalid_scope,
	invalid_client,
	processing_error;
}""",1
VvrDevice.java,"""/** * Remove the given keys from the device properties. * * @param keys *            property keys */""","""private final FutureVoid removeDeviceProperties(final String... keys) {
        return deviceInstance.unsetUserProperties(keys);
    }""",1
XMLObjectImpl.java,"""/** * Implementation of ECMAScript [[Delete]]. */""","""public final boolean ecmaDelete(Context cx, Object id)
    {
        if (cx == null) cx = Context.getCurrentContext();
        XMLName xmlName = lib.toXMLNameOrIndex(cx, id);
        if (xmlName == null) {
            long index = ScriptRuntime.lastUint32Result(cx);
            // XXX Fix this
            delete((int)index);
            return true;
        }
        deleteXMLProperty(xmlName);
        return true;
    }""",1
WorkflowStateProcessor.java,"""/** * Handle retries for the state execution. Moves the workflow to a failure state after the maximum retry attempts is exceeded. * If there is no failure state defined for the retried state, moves the workflow to the generic error state and stops * processing. Error state handler method, if it exists, is not executed. If the maximum retry attempts is not exceeded, * schedules the next attempt to the given activation time. This method is called when a retry attempt is explicitly requested * by a state handling method. * * @param execution *          State execution information. * @param activation *          Time for next retry attempt. * @param definition *          Workflow definition */""","""void handleRetryAfter(StateExecutionImpl execution, DateTime activation, AbstractWorkflowDefinition<?> definition) {
    if (execution.getRetries() >= definition.getSettings().maxRetries) {
      execution.setRetry(false);
      execution.setRetryCountExceeded();
      String currentStateName = execution.getCurrentStateName();
      WorkflowState failureState = definition.getFailureTransitions().get(currentStateName);
      WorkflowState currentState = definition.getState(currentStateName);
      if (failureState != null) {
        execution.setNextState(failureState);
        execution.setNextStateReason(""Max retry count exceeded, going to failure state"");
        execution.setNextActivation(now());
      } else {
        WorkflowState errorState = definition.getErrorState();
        execution.setNextState(errorState);
        if (errorState.equals(currentState)) {
          execution.setNextStateReason(""Max retry count exceeded when handling error state, processing stopped"");
          execution.setNextActivation(null);
        } else {
          execution.setNextStateReason(""Max retry count exceeded, no failure state defined, going to error state"");
          execution.setNextActivation(now());
        }
      }
    } else {
      execution.setNextActivation(activation);
    }
  }""",1
WBSType.java,"""/** * Sets the value of the summaryLaborCostPercentComplete property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryLaborCostPercentComplete(Double value)
   {
      this.summaryLaborCostPercentComplete = value;
   }""",1
PullToRefreshBase.java,"""/** * Called when the UI has been to be updated to be in the *  State#RESET state. */""","""protected void onReset() {
    mIsBeingDragged = false;
    mLayoutVisibilityChangesEnabled = true;

    // Always reset both layouts, just in case...
    mHeaderLayout.reset();
    mFooterLayout.reset();

    smoothScrollTo(0);
}""",0
WBSCategoryType.java,"""/** * Gets the value of the name property. * * @return *     possible object is *     {@link String } * */""","""public String getName()
   {
      return name;
   }""",1
ZMQ.java,"""/** * The ZMQ_RECONNECT_IVL option shall retrieve the initial reconnection interval for the specified socket. * The reconnection interval is the period ?MQ shall wait between attempts to reconnect * disconnected peers when using connection-oriented transports. * The value -1 means no reconnection. * * CAUTION: The reconnection interval may be randomized by ?MQ to prevent reconnection storms in topologies with a large number of peers per socket. * * @return the reconnectIVL. * @see #setReconnectIVL(int) */""","""public int getReconnectIVL()
        {
            return base.getSocketOpt(zmq.ZMQ.ZMQ_RECONNECT_IVL);
        }""",1
WildcardTypeName.java,"""/** * Returns a type that represents an unknown type that extends {@code bound}. For example, if * {@code bound} is {@code CharSequence.class}, this returns {@code ? extends CharSequence}. If * {@code bound} is {@code Object.class}, this returns {@code ?}, which is shorthand for {@code * ? extends Object}. */""","""public static WildcardTypeName subtypeOf(TypeName upperBound) {
    return new WildcardTypeName(Arrays.asList(upperBound), Collections.<TypeName>emptyList());
  }""",1
XmlConfigurationDaoImpl.java,"""/** * {@inheritDoc} */""","""@Override
    public <T> void setParameter(final ConfigurationParameter<T> parameter, final T value) {
        this.rootNode.setParameter(parameter.getName(), parameter.format(value));
    }""",1
WordLength.java,"""/** returns a ""state message"" that contains whatever this feature needs to update ClassifierState. */""","""public Hashtable<String,Object> run(Hashtable<String,Object> data) {
	Hashtable<String,Double> instance = new Hashtable();
	Hashtable<String,Object> stateMessage = new Hashtable();

        if (! data.containsKey(""content"")) {
	    logger.severe(""Requires a key/value pair to be stored in provided data of the form \""content\"" => String[]"");
	    return stateMessage;
	}

        String[] content = (String[]) data.get(""content"");
        int chars = 0;

        for (String word : content)
            chars += word.length();

	logger.config(""inserting feature: "" + featureID + "" "" + chars);
	insert(instance, featureID, chars);

	populateStateMessage(stateMessage,
			     instance,
			     (double) content.length);

	return stateMessage;
    }""",1
ZrtpConfigureTableModel.java,"""/** * Sets the ZrtpConfigure data for this algorithm to a predefined set. * * The caller prepared active ZrtpConfigureto contain a standard set of * algorithms. Get the names and construct a string, then call initialize * to setup the inActive ZrtpConfigure data. */""","""public void setStandardConfig() {
        StringBuffer algoStr = new StringBuffer();
        for (T sh: active.algos(algorithm)) {
            algoStr.append(sh.name());
            algoStr.append(';');
        }
        initialize(algoStr.toString());
        fireTableRowsUpdated(0, getRowCount());
    }""",1
WakeLockUtil.java,"""/** * Do a {@link android.content.Context#startService(android.content.Intent) * Context.startService}, but holding a wake lock while the service starts. * This will modify the Intent to hold an extra identifying the wake lock; * when the service receives it in {@link android.app.Service#onStartCommand * Service.onStartCommand}, it should pass back the Intent it receives there to * {@link #completeWakefulIntent(android.content.Intent)} in order to release * the wake lock. * * @param context The Context in which it operate. * @param intent The Intent with which to start the service, as per * {@link android.content.Context#startService(android.content.Intent) * Context.startService}. */""","""public static ComponentName startWakefulService(Context context, Intent intent) {
        synchronized (ACTIVE_WAKE_LOCKS) {
            int id = nextId;
            nextId++;
            if (nextId <= 0) {
                nextId = 1;
            }

            intent.putExtra(EXTRA_WAKE_LOCK_ID, id);
            ComponentName comp = context.startService(intent);
            if (comp == null) {
                return null;
            }

            String tag = ""wake:"" + comp.flattenToShortString();
            PowerManager.WakeLock wakeLock = acquireWakeLock(context, tag, TimeUnit.MINUTES.toMillis(3));
            if (wakeLock != null) {
                ACTIVE_WAKE_LOCKS.put(id, wakeLock);
            }

            return comp;
        }
    }""",1
VoldemortClient.java,"""/** * Initialize the DB layer. This accepts all properties allowed by the Voldemort client. * A store maps to a table. * Required : bootstrap_urls * Additional property : store_name -> to preload once, should be same as -t <table> * * {@linktourl http://project-voldemort.com/javadoc/client/voldemort/client/ClientConfig.html} */""","""public void init() throws DBException {
		ClientConfig clientConfig = new ClientConfig(getProperties());
		socketFactory = new SocketStoreClientFactory(clientConfig);
		
		// Retrieve store name
		storeName = getProperties().getProperty(""store_name"", ""usertable"");
		
		// Use store name to retrieve client
		storeClient = socketFactory.getStoreClient(storeName);
		if ( storeClient == null )
			throw new DBException(""Unable to instantiate store client"");
		
	}""",1
VMLaunchOptions.java,"""/** * Launches a virtual machine based on the current contents of this set of VM launch options. * @param provider the cloud provider in which the VM should be provisioned * @return the unique ID of the provisioned virtual machine * @throws CloudException an error occurred within the cloud provider while building the VM * @throws InternalException an error occurred within Dasein Cloud in preparing the API call * @throws OperationNotSupportedException the cloud does not support virtual machines */""","""public @Nonnull String build(@Nonnull CloudProvider provider) throws CloudException, InternalException {
        ComputeServices services = provider.getComputeServices();

        if( services == null ) {
            throw new OperationNotSupportedException(provider.getCloudName() + "" does not support compute services."");
        }""",1
FilterMediatorTest.java,"""/** * With setting ""Specify As"" set to ""Xpath"" */""","""@Test(groups = {""wso2.esb""})
public void filterMediatorWithXpathTest() throws Exception {
    loadESBConfigurationFromClasspath(File.separator + ""artifacts"" + File.separator + ""ESB"" + File.separator
                                      + ""synapseconfig"" + File.separator + ""filters"" + File.separator + ""filter"" + File.separator + ""synapse2.xml"");
    OMElement response = axis2Client.sendSimpleStockQuoteRequest(getMainSequenceURL(), null, ""IBM"");
    Assert.assertTrue(response.toString().contains(""GetQuoteResponse""));
    Assert.assertTrue(response.toString().contains(""IBM Company""));
}""",0
ZettelkastenViewUtil.java,"""/** * This method updates a jTable and a possible linked list which holds * filtered values from the jTables, by increasing ({@code diff} must be 1) * or decreasing ({@code diff} must be -1) an entry's occurences or * frequencies from the tablemodel and the linked list. * <br><br> * If no increase or decrease of frequencies (occurences) is requested, but * a complete removal, call * {@link #updateTableFrequencyRemove(javax.swing.JTable, java.util.LinkedList) updateTableFrequencyRemove(javax.swing.JTable, java.util.LinkedList)} * instead. * * @param table the table were we have to add a new value with frequency * @param list the possible linked list were we have to add a new value with * frequency * @param value the new value, for instance the author-string or * keyword-value * @param diff either +1, if a value was added, so frequency is increased by * 1. or -1, if a value was removed, so frequency is decreaded. * @return an updated linked list that was passed as parameter {@code list} */""","""public static LinkedList<Object[]> updateTableFrequencyChange(JTable table, LinkedList<Object[]> list, String value, int diff) {
        // iterate all table rows
        for (int cnt = 0; cnt < table.getRowCount(); cnt++) {
            // check whether we have found the value that should be changed
            if (value.equals(table.getValueAt(cnt, 0).toString())) {
                // retrieve table data
                Object[] o = new Object[2];
                o[0] = table.getValueAt(cnt, 0);
                o[1] = table.getValueAt(cnt, 1);
                // convert frquency-counter to int
                int freq = Integer.parseInt(table.getValueAt(cnt, 1).toString());
                // set new value
                table.setValueAt(freq + diff, cnt, 1);
                // check whether we have a filtered list
                if (list != null) {
                    // if so, iterate list
                    for (int pos = 0; pos < list.size(); pos++) {
                        Object[] v = list.get(pos);
                        // check whether we have found the value that should be changed
                        if (o[0].toString().equals(v[0].toString())) {
                            // change frequency
                            o[1] = freq + diff;
                            list.set(pos, o);
                            break;
                        }
                    }
                }
            }
        }
        return list;
    }""",1
TreatmentCategorizationWizardPresentationTest.java,"""/* * Regression test for bug #566 */""","""@Test
public void testDoNotReuseDefaultDose() {
    TreatmentCategorizationWizardPresentation pm1 = new TreatmentCategorizationWizardPresentation(TreatmentCategorization.createDefault(), d_domain);
    TreatmentCategorizationWizardPresentation pm2 = new TreatmentCategorizationWizardPresentation(TreatmentCategorization.createDefault(), d_domain);
    pm1.getDoseUnit().setScaleModifier(ScaleModifier.MEGA);
    assertFalse(pm2.getDoseUnit().equals(pm1.getDoseUnit()));
}""",0
ZoomListener.java,"""/** Increments or decrements and rounds the length of visible audio data. *  @param value The original length of visible audio data *  @param sign  The direction of change (+1.0 or -1.0) *  @return      The new length of visible audio data */""","""public static double delta(double value, double sign) {
		if (value >= 5.0)
			return Math.floor(value + sign * value / 5.0 + 0.5);
		if (value >= 1.0)
			return Math.floor(5.0 * (value + sign * value / 5.0) + 0.5) / 5.0;
		if (value >= 0.5)
			return Math.floor(10.0 * (value + sign * value / 5.0) + 0.5) / 10.0;
		return Math.floor(10.0 * (value + sign * 0.1) + 0.5) / 10.0;
	} // delta()""",1
WebSocketFrameType.java,"""/** * Type of web socket frames */""","""public enum WebSocketFrameType {
    TEXT, BINARY, PING, PONG, CLOSE, CONTINUATION
}""",1
ATKMonitorService.java,"""/** * Only valid on API >= 8 */""","""private long getUidTxBytes(int uid){
     String className = ""android.net.TrafficStats"";
      String methodName = ""getUidTxBytes"";
      try {
          Class<?> handler = Class.forName(className);
          Method m = handler.getDeclaredMethod(methodName, int.class);
          long result = (Long) m.invoke(handler.newInstance(),uid);
          return result;
      } catch (Exception e) {
          e.printStackTrace();
          return -1;
      }
 }""",0
X509CertSelector.java,"""/** * Returns the name constraints criterion. The <code>X509Certificate</code> * must have subject and subject alternative names that * meet the specified name constraints. * <p> * The name constraints are returned as a byte array. This byte array * contains the DER encoded form of the name constraints, as they * would appear in the NameConstraints structure defined in RFC 3280 * and X.509. The ASN.1 notation for this structure is supplied in the * documentation for * {@link #setNameConstraints(byte [] bytes) setNameConstraints(byte [] bytes)}. * <p> * Note that the byte array returned is cloned to protect against * subsequent modifications. * * @return a byte array containing the ASN.1 DER encoding of *         a NameConstraints extension used for checking name constraints. *         <code>null</code> if no name constraints check will be performed. * @see #setNameConstraints */""","""public byte[] getNameConstraints() {
        if (ncBytes == null) {
            return null;
        } else {
            return ncBytes.clone();
        }
    }""",1
VSphere.java,"""/** * Creates a {@link VSphereException} whose cause is the {@link TaskInfo}'s * exception. This provides an exception that is much more informative than * what is said by the <code>message</code> alone. * * @param taskInfo *            The vSphere task that failed. * @param message *            A line of text that says what the task was trying to achieve. * @return An exception that includes the cause of the failure. */""","""private static VSphereException newVSphereException(TaskInfo taskInfo, final String message) {
        final com.vmware.vim25.LocalizedMethodFault error = taskInfo == null ? null : taskInfo.getError();
        final String faultMsg = error == null ? null : error.getLocalizedMessage();
        final Exception fault = error == null ? null : error.getFault();
        final String combinedMsg = message + (faultMsg == null ? """" : (""\n"" + faultMsg));
        if (fault != null) {
            return new VSphereException(combinedMsg, fault);
        } else {
            return new VSphereException(combinedMsg);
        }
    }""",1
WalkFSABoolean.java,"""/** * Recursively collect annotation from the FSA * @param state start state * @param data current annotation data * @param passedAnnotChar flag of passing the annotation char in the FSA * @param proc annotation processor * * @return annotation data */""","""public void collectAnnotations(int state, TIntArrayList data, boolean passedAnnotChar, AnnotationProcessor proc) {

        if(finals.get(state)) {
            boolean res = proc.process(data);
            if(res)
                return;
        }

        int start = stateStart.get(state);
        int end = state < stateStart.size() - 1? stateStart.get(state + 1) : stateStart.size();

        while(start < end) {
            int input = labels.get(start);
            if(passedAnnotChar)
                data.add(labels.get(start));

            collectAnnotations(dest.get(start), data, input == 0? true : passedAnnotChar, proc);

            if(passedAnnotChar)
                data.removeAt((data.size() - 1));
            start++;
        }

    }""",1
WurmAPI.java,"""/** * Releases all native resources used by WurmAPI. It shouldn't be used after calling this method. */""","""public void close() {
        mapData.close();
    }""",1
WalkFSABoolean.java,"""/** * Collect annotations starting at the state * @param state start state * @param needSep true if needed a separator to output list * @param sepValue separator value * * @return annotation data */""","""public TIntArrayList collectAnnotationsSimple(int state, boolean needSep, int sepValue) {
        TIntArrayList annots = new TIntArrayList();

        if(!hasAnnotStart(state))
            return annots;

        AnnotationCollector proc = new AnnotationCollector(annots, needSep, sepValue);

        TIntArrayList data = new TIntArrayList();
        collectAnnotations(next(state, 0), data, true, proc);
        return annots;
    }""",1
X509CRL.java,"""/** * Returns the issuer (issuer distinguished name) value from the * CRL as an <code>X500Principal</code>. * <p> * It is recommended that subclasses override this method. * * @return an <code>X500Principal</code> representing the issuer *          distinguished name * @since 1.4 */""","""public X500Principal getIssuerX500Principal() {
        if (issuerPrincipal == null) {
            issuerPrincipal = X509CRLImpl.getIssuerX500Principal(this);
        }
        return issuerPrincipal;
    }""",1
WorldConfiguration.java,"""/** * Get whether monsters can be spawned * * @return true or false */""","""public boolean canSpawnMonsters() {
        return getBoolean(""spawn-monsters"", true);
    }""",1
WireMockAndroidTest1.java,"""/** * Test WireMock */""","""@Test
    public void testWiremock() {
        Context applicationContext = InstrumentationRegistry.getTargetContext().getApplicationContext();
        activity = activityRule.launchActivity(new Intent(applicationContext, MainActivity.class));
        String jsonBody = asset(activity, ""atlanta-conditions.json"");
        stubFor(get(urlMatching(""/api/.*""))
                .willReturn(aResponse()
                        .withStatus(200)
                        .withBody(jsonBody)));

        String serviceEndpoint = ""http://127.0.0.1:"" + BuildConfig.PORT;
        logger.debug(""WireMock Endpoint: "" + serviceEndpoint);
        activity.setWeatherServiceManager(new WeatherServiceManager(serviceEndpoint));

        onView(ViewMatchers.withId(R.id.editText)).perform(typeText(""atlanta""));
        onView(withId(R.id.button)).perform(click());
        onView(withId(R.id.textView)).check(matches(withText(containsString(""GA""))));
    }""",1
VoiceCommands.java,"""/** * Fire an intent to start the voice recognition activity. */""","""private void startVoiceRecognitionActivity() {
        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
                RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        intent.putExtra(RecognizerIntent.EXTRA_PROMPT, ""Voice recognition test..."");
        startActivityForResult(intent, REQUEST_CODE);

    }""",1
ServletContainerTest.java,"""/** * JERSEY-780: Malformed URL returns a 500 instead of a 400. */""","""public void testInvalidUrl() throws Exception {
    startServer(HelloWorldResource.class);

    final URL url = new URL(getUri().path(""helloworld"").build().toString() + ""^"");
    final HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.setRequestMethod(""GET"");

    connection.connect();

    final int responseCode = connection.getResponseCode();
    final String responseMessage = connection.getResponseMessage();

    connection.disconnect();

    stopServer();

    assertTrue(responseCode == Response.Status.BAD_REQUEST.getStatusCode());
    assertTrue(Response.Status.BAD_REQUEST.getReasonPhrase().equals(responseMessage));
}""",0
VolleyImageUtils.java,"""/** * compress the image file, create a scaled compressed image file, and overwrite the origin one. * @param path  origin image file path * @param maxWidth * @param maxHeight * @param quality */""","""public static void compress(String originPath, String outputPath, int maxWidth, int maxHeight, int quality) {
        FileOutputStream out;
        try {
            Bitmap scaledBitmap = getScaledBitmap(originPath, maxWidth, maxHeight);
            Bitmap rotatedBitmap = rotateBitmap(getBitmapDegree(originPath), scaledBitmap);
            out = new FileOutputStream(outputPath);
            Bitmap mutableBitmap = rotatedBitmap.copy(Bitmap.Config.ARGB_8888, true);

            // write the compressed bitmap at the destination specified by filename.
            mutableBitmap.compress(Bitmap.CompressFormat.JPEG, quality, out);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }""",1
WampConnection.java,"""/** * Establish a prefix to be used in CURIEs. * * @param prefix     The prefix to be used in CURIEs. * @param uri        The full URI this prefix shall resolve to. */""","""public void prefix(String prefix, String uri) {

      String currUri = mOutgoingPrefixes.get(prefix);

      if (currUri == null || !currUri.equals(uri)) {

         mOutgoingPrefixes.set(prefix, uri);

         WampMessage.Prefix msg = new WampMessage.Prefix(prefix, uri);
         mWriter.forward(msg);
      }
   }""",1
WizPurchase.java,"""/** * Remove a purchase from pending purchases' list * * @param purchase Purchase to unset as pending **/""","""void unsetPurchaseAsPending(Purchase purchase) {
		SharedPreferences pendingPurchasesCache = cordova.getActivity().getSharedPreferences(PENDING_PURCHASES_CACHE_NAME, 0);
		SharedPreferences.Editor editor = pendingPurchasesCache.edit();
		editor.remove(purchase.getSku());
		editor.commit();
	}""",1
WeekView.java,"""/** * Sets the speed for horizontal scrolling. * @param xScrollingSpeed The new horizontal scrolling speed. */""","""public void setXScrollingSpeed(float xScrollingSpeed) {
        this.mXScrollingSpeed = xScrollingSpeed;
    }""",1
AbsEntityCursor.java,"""/* * observers */""","""@Override
public void registerContentObserver(ContentObserver observer) {
    cursor.registerContentObserver(observer);
}""",0
WebSocketHandlerAdapter.java,"""/** * Process connect request to uri and protocol specified */""","""@Override
    public void processConnect(WebSocketChannel channel, WSURI location, String[] protocols) {
        nextHandler.processConnect(channel, location, protocols);
    }""",1
ZooKeeperServerConfig.java,"""/** * @param clientPort   the port the ZooKeeper client uses to connect to * @param dataDir      the directory ZooKeeper uses to store its data * @param dataLogDir   the directory ZooKeeper uses to store its logs * @param tickTime     the keep alive tick time * @param initLimit    initialisation limit * @param syncLimit    synchronisation limit */""","""@Inject
    public ZooKeeperServerConfig(@ConfigProperty(name = ""ZOOKEEPER_CLIENT_PORT"", defaultValue = ""2181"")
                                 int clientPort,
                                 @ConfigProperty(name = ""ZOOKEEPER_DATADIR"", defaultValue = ""ensemble/data"")
                                 String dataDir,
                                 @ConfigProperty(name = ""ZOOKEEPER_DATA_LOG_DIR"", defaultValue = ""ensemble/log"")
                                 String dataLogDir,
                                 @ConfigProperty(name = ""ZOOKEEPER_TICKTIME"", defaultValue = """" + ZooKeeperServer.DEFAULT_TICK_TIME)
                                 int tickTime,
                                 @ConfigProperty(name = ""ZOOKEEPER_INIT_LIMIT"")
                                 int initLimit,
                                 @ConfigProperty(name = ""ZOOKEEPER_SYNC_LIMIT"")
                                 int syncLimit) {
        this.dataDir = dataDir;
        this.dataLogDir = dataLogDir;
        this.syncLimit = syncLimit;
        this.initLimit = initLimit;
        if (clientPort > 0) {
            this.clientPortAddress = new InetSocketAddress(clientPort);
        }
    }""",1
WrapperPlayServerEntityEquipment.java,"""/** * Set the equipped item. * @param value - new value. */""","""public void setItem(ItemStack value) {
        handle.getItemModifier().write(0, value);
    }""",1
_AccountResource.java,"""/** * GET  /account -> get the current user. */""","""@RequestMapping(value = ""/account"",
            method = RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public ResponseEntity<UserDTO> getAccount() {<% if (javaVersion == '8') { %>
        return Optional.ofNullable(userService.getUserWithAuthorities())
            .map(user -> new ResponseEntity<>(
                new UserDTO(
                    user.getLogin(),
                    null,
                    user.getFirstName(),
                    user.getLastName(),
                    user.getEmail(),
                    user.getLangKey(),<% if (databaseType == 'sql' || databaseType == 'mongodb') { %>
                    user.getAuthorities().stream().map(Authority::getName).collect(Collectors.toCollection(LinkedList::new))),<% } %><% if (databaseType == 'cassandra') { %>
                    user.getAuthorities().stream().collect(Collectors.toCollection(LinkedList::new))),
<% } %>
                HttpStatus.OK))
            .orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));<% } else { %>
        User user = userService.getUserWithAuthorities();
        if (user == null) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
        List<String> roles = new ArrayList<>();
        for (Authority authority : user.getAuthorities()) {
            roles.add(authority.getName());
        }
        return new ResponseEntity<>(
            new UserDTO(
                user.getLogin(),
                null,
                user.getFirstName(),
                user.getLastName(),
                user.getEmail(),
                user.getLangKey(),
                roles),
            HttpStatus.OK);<% } %>
    }""",1
WFSPINFDK.java,"""/** * @see #xPosition */""","""public int getXPosition() {
		return xPosition.intValue();
	}""",1
WebSocketController.java,"""/** * Opens a websocket for the given user nation and their current home region. * * @param user nation that is opening the websocket. * @param userRegion name of the region the user currently resides in. * @param reconnect whether this is the first time opening the websocket, or a reconnection attempt. * * @return websocket */""","""public WebSocket<JsonNode> index(String user, String userRegion, boolean reconnect) {
		if (user.isEmpty() || userRegion.isEmpty()) return null;
		return new NationStatesWebSocket(this.getDatabase(), new DefaultPage(), sanitizeName(user), sanitizeName(userRegion), reconnect);
	}""",1
WebResourceFactory.java,"""/** * Creates a new client-side representation of a resource described by * the interface passed in the first argument. * * @param <C>                Type of the resource to be created. * @param resourceInterface  Interface describing the resource to be created. * @param target             WebTarget pointing to the resource or the parent of the resource. * @param ignoreResourcePath If set to true, ignores path annotation on the resource interface (this is used when creating *                           sub-resources) * @param headers            Header params collected from parent resources (used when creating a sub-resource) * @param cookies            Cookie params collected from parent resources (used when creating a sub-resource) * @param form               Form params collected from parent resources (used when creating a sub-resource) * @param invoker            Method invoker * @return Instance of a class implementing the resource interface that can * be used for making requests to the server. */""","""@SuppressWarnings(""unchecked"")
    public static <C> C newResource(final Class<C> resourceInterface,
                                    final WebTarget target,
                                    final boolean ignoreResourcePath,
                                    final MultivaluedMap<String, Object> headers,
                                    final List<Cookie> cookies,
                                    final Form form,
                                    final ClientMethodInvoker invoker) {

        return (C) Proxy.newProxyInstance(AccessController.doPrivileged(ReflectionHelper.getClassLoaderPA(resourceInterface)),
                new Class[]{resourceInterface},
                new WebResourceFactory(ignoreResourcePath ? target : addPathFromAnnotation(resourceInterface, target),
                        headers, cookies, form, invoker));
    }""",1
DAntsForage.java,"""/** * AntsForage */""","""public DAntsForage(GeneralParam params, String prefix)
{ 
    super(params,new DistributedMultiSchedule<Int2D>(),prefix,params.getConnectionType());
    this.topicPrefix=prefix;
    this.MODE=params.getMode();
    GRID_WIDTH=params.getWidth();
    GRID_HEIGHT=params.getHeight();

    numAnts = params.getNumAgents();


    FXMIN = (FOOD_XMIN * GRID_WIDTH)/100;
    FYMIN = (FOOD_YMIN * GRID_HEIGHT)/100;
    FXMAX = (FOOD_XMAX * GRID_WIDTH)/100;
    FYMAX = (FOOD_YMAX * GRID_HEIGHT)/100;

    HXMIN = (HOME_XMIN * GRID_WIDTH)/100;
    HYMIN = (HOME_YMIN * GRID_HEIGHT)/100;
    HXMAX = (HOME_XMAX * GRID_WIDTH)/100;
    HYMAX = (HOME_YMAX * GRID_HEIGHT)/100;



}""",0
X509CertSelector.java,"""/** * Adds a name to the pathToNames criterion. The <code>X509Certificate</code> * must not include name constraints that would prohibit building a * path to the specified name. * <p> * This method allows the caller to add a name to the set of names which * the <code>X509Certificates</code>'s name constraints must permit. * The specified name is added to any previous value for the * pathToNames criterion.  If the name is a duplicate, it may be ignored. * <p> * The name is provided in string format. RFC 822, DNS, and URI names * use the well-established string formats for those types (subject to * the restrictions included in RFC 3280). IPv4 address names are * supplied using dotted quad notation. OID address names are represented * as a series of nonnegative integers separated by periods. And * directory names (distinguished names) are supplied in RFC 2253 format. * No standard string format is defined for otherNames, X.400 names, * EDI party names, IPv6 address names, or any other type of names. They * should be specified using the * {@link #addPathToName(int type, byte [] name) * addPathToName(int type, byte [] name)} method. * <p> * <strong>Note:</strong> for distinguished names, use * {@linkplain #addPathToName(int, byte[])} instead. * This method should not be relied on as it can fail to match some * certificates because of a loss of encoding information in the RFC 2253 * String form of some distinguished names. * * @param type the name type (0-8, as specified in *             RFC 3280, section 4.2.1.7) * @param name the name in string form * @throws IOException if a parsing error occurs */""","""public void addPathToName(int type, String name) throws IOException {
        addPathToNameInternal(type, name);
    }""",1
WriterPool.java,"""/** * Return a writer, for likely reuse unless (1) writer's current file has * reached its target size; and (2) there's been no demand for additional * writers since the last time a new writer-file was rolled-over. In that * case, the possibly-superfluous writer instance is discarded. * @param writer Writer to return to the pool. * @throws IOException Problem returning File to pool. */""","""public void returnFile(WriterPoolMember writer)
    throws IOException {
        synchronized(this) {
            if(writer.isOversize()) {
            // maybe retire writer rather than recycle
                if(lastWriterNeededTime<=lastWriterRolloverTime) {
                    // no timeouts waiting for recycled writer since last writer rollover
                    destroyWriter(writer);
                    return;
                } else {
                    // reuse writer instance, causing new file to be created
                    lastWriterRolloverTime = System.currentTimeMillis();
                }
            }
        }
        if(!availableWriters.offer(writer)) {
            logger.log(Level.WARNING, ""writer unreturnable to available pool; closing early"");
            destroyWriter(writer); 
        }
    }""",1
WBSType.java,"""/** * Sets the value of the summaryAtCompletionLaborCost property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryAtCompletionLaborCost(Double value)
   {
      this.summaryAtCompletionLaborCost = value;
   }""",1
ZMQ.java,"""/** * Register a Socket for polling on the specified events. * * Automatically grow the internal representation if needed. * * @param socket *            the Socket we are registering. * @param events *            a mask composed by XORing POLLIN, POLLOUT and POLLERR. * @return the index identifying this Socket in the poll set. */""","""public int register(Socket socket, int events)
        {
            return registerInternal(new PollItem(socket, events));
        }""",1
WorkerManager.java,"""/** * Find the _Fields constant that matches fieldId, or null if its not found. */""","""public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_NAME
            return INSTANCE_NAME;
          default:
            return null;
        }
      }""",1
WorkQueueFrontier.java,"""/** * Send a CrawlURI to the appropriate subqueue. * * @param curi */""","""protected void sendToQueue(CrawlURI curi) {
//        assert Thread.currentThread() == managerThread;
        
        WorkQueue wq = getQueueFor(curi.getClassKey());
        synchronized(wq) {
            int originalPrecedence = wq.getPrecedence();
            wq.enqueue(this, curi);
            // always take budgeting values from current curi
            // (whose overlay settings should be active here)
            wq.setSessionBudget(getBalanceReplenishAmount());
            wq.setTotalBudget(getQueueTotalBudget());
            
            if(!wq.isRetired()) {
                incrementQueuedUriCount();
                int currentPrecedence = wq.getPrecedence();
                if(!wq.isManaged() || currentPrecedence < originalPrecedence) {
                    // queue newly filled or bumped up in precedence; ensure enqueuing
                    // at precedence level (perhaps duplicate; if so that's handled elsewhere)
                    deactivateQueue(wq);
                }
            }
        }
        // Update recovery log.
        doJournalAdded(curi);
        wq.makeDirty();
        largestQueues.update(wq.getClassKey(), wq.getCount());
    }""",1
WorkflowServiceTest.java,"""/** * All Failures test for the workflowService */""","""public void testFaillureWorkflowService()
    {
        // //////////////////
        // PROCESS DEFINITION
        // //////////////////
        ProcessDefinition def = getProcessDefinition(""wrongId"");
        Assert.assertNull(def);

        // //////////////////
        // PROCESS
        // //////////////////
    }""",1
WeexUiTestCaseTCAHrefEvent.java,"""/** * findMyCaseByText */""","""public View findMyCaseByText(String caseText){
        if (mCaseListIndexView.size() == 0) return null;

        WXTextView view = null;
        for(int i=0; i<mCaseListIndexView.size();i++){

            view = (WXTextView)mCaseListIndexView.get(i);

            if (view.getText().toString().toLowerCase().contains(caseText.toLowerCase())){
                return view;
            }

        }
        return view;
    }""",1
DGameOfLife.java,"""/** * Constructor */""","""public DGameOfLife(GeneralParam params, String prefix) {
    super(params, new DistributedMultiSchedule<Int2D>(), prefix, params.getConnectionType());
    this.MODE = params.getMode();
    gridWidth = params.getWidth();
    gridHeight = params.getHeight();
    this.topicPrefix = prefix;
}""",0
ZioEntry.java,"""/* * Set the file timestamp (using a Java time value). */""","""public void setTime(long time) {
        Date d = new Date(time);
        long dtime;
        int year = d.getYear() + 1900;
        if (year < 1980) {
            dtime = (1 << 21) | (1 << 16);
        }
        else {
            dtime = (year - 1980) << 25 | (d.getMonth() + 1) << 21 |
            d.getDate() << 16 | d.getHours() << 11 | d.getMinutes() << 5 |
            d.getSeconds() >> 1;
        }

        modificationDate = (short)(dtime >> 16);
        modificationTime = (short)(dtime & 0xFFFF);
    }""",1
XargsFileLauncher.java,"""/** * process an init.xargs-style file. * * @param file *            the file. * @return the startlevel. * @throws BundleException * @throws FileNotFoundException * @throws Throwable *             if something goes wrong. For example, if strict startup is *             set and the installation of a bundle fails. */""","""public Concierge processXargsFile(final File file)
			throws BundleException, FileNotFoundException {
		InputStream inputStream = new FileInputStream(file);
		// we have to preserve the properties for later variable and wildcard
		// replacement
		final Map<String, String> passedProperties = getPropertiesFromXargsInputStream(
				inputStream);

		// now process again for install/start options with given properties
		inputStream = new FileInputStream(file);
		return processXargsInputStream(passedProperties, inputStream);
	}""",1
WBSType.java,"""/** * Gets the value of the parentObjectId property. * * @return *     possible object is *     {@link Integer } * */""","""public Integer getParentObjectId()
   {
      return parentObjectId;
   }""",1
WFSPINCAPS.java,"""/** * {@link #rsaKeyCheckModes} */""","""public Set<PINRSAKeyCheckMode> getRSAKeyCheckModes() {
		return XfsConstants.of(rsaKeyCheckModes, PINRSAKeyCheckMode.class);
	}""",1
WalkingMonster.java,"""/** * @param damage * @param difficulty */""","""@Override
    public void setMinDamage(int damage, int difficulty) {
        if (difficulty >= 1 && difficulty <= 3) {
            this.minDamage[difficulty] = Math.min(damage, this.getMaxDamage(difficulty));
        }
    }""",1
WrapperPlayServerWorldParticles.java,"""/** * Retrieve the location of the current particle. * @param event - the packet event. * @return The location. */""","""public Location getLocation(PacketEvent event) {
    	return getLocation(event.getPlayer().getWorld());
    }""",1
VSphere.java,"""/** * Passes data to a VM's ""guestinfo"" object. This data can then be read by * the VMware Tools on the guest. * <p> * e.g. a variable named ""Foo"" with value ""Bar"" could be read on the guest * using the command-line <tt>vmtoolsd --cmd ""info-get guestinfo.Foo""</tt>. * </p> * * @param vmName *            The name of the VM. * @param variables *            A {@link Map} of variable name to variable value. * @throws VSphereException *             If an error occurred. */""","""public void addGuestInfoVariable(String vmName, Map<String, String> variables) throws VSphereException {
        VirtualMachineConfigSpec cs = new VirtualMachineConfigSpec();
        OptionValue[] ourOptionValues = new OptionValue[variables.size()];
        List<OptionValue> optionValues = new ArrayList<>();
        for (Map.Entry<String, String> eachVariable : variables.entrySet()) {
            OptionValue ov = new OptionValue();
            ov.setKey(""guestinfo."" + eachVariable.getKey());
            ov.setValue(eachVariable.getValue());
            optionValues.add(ov);
        }
        for (int i = 0; i < optionValues.size(); i++) {
            ourOptionValues[i] = optionValues.get(i);
        }
        cs.setExtraConfig(ourOptionValues);
        reconfigureVm(vmName, cs);
    }""",1
VpnProfileDataSource.java,"""/** * Close the data source. */""","""public void close()
	{
		if (mDbHelper != null)
		{
			mDbHelper.close();
			mDbHelper = null;
		}
	}""",1
WidgetScreen.java,"""/** * Updates the widget screen buffer using the widgetBuffer sent by a widget. * * @param widgetBuffer the buffer sent by a widget * @param sessionId the sessionId of the sender; used to determine which part of the screen to *        update * @return the updated widget screen buffer */""","""public byte[] updateScreenBuffer(byte[] widgetBuffer, int sessionId) {
    for (int i = 0; i < widgets.length; i++) {
      if ((widgets[i] != null) && (sessionId == sessionIds[i])) {
        System.arraycopy(widgetBuffer, 0, screenBuffer, i * BUFFER_LENGTH, BUFFER_LENGTH);
        break;
      }
    }
    
    return screenBuffer;
  }""",1
WBSType.java,"""/** * Sets the value of the summaryPlannedNonLaborCost property. * * @param value *     allowed object is *     {@link Double } * */""","""public void setSummaryPlannedNonLaborCost(Double value)
   {
      this.summaryPlannedNonLaborCost = value;
   }""",1
WrapperPlayServerBlockBreakAnimation.java,"""/** * Retrieve the x axis of the block coordinate. * @return The current X */""","""public int getX() {
        return handle.getIntegers().read(1);
    }""",1
Zerokit.java,"""/** * This method tries to log in the given user with the given password entered by the user * * @param userId   The userId of the user to log in. * @param password The password of the user to log in. * @return Resolved userId of the logged in user. */""","""@NonNull
    @SuppressWarnings(""WeakerAccess"")
    CallAsync<ResponseZerokitLogin, ResponseZerokitError> _login(@NonNull final String userId, @NonNull final byte[] password) {
        return new CallAsyncAction<>(new ActionCallback<ResponseZerokitLogin, ResponseZerokitError>() {

            @Override
            public void call(final Callback<? super ResponseZerokitLogin, ? super ResponseZerokitError> subscriber) {
                callFunction(Function.login, new CallbackJsonResult<>(subscriber, new ResponseZerokitLogin(), jsInterfaceByteArrayProvider.add(password)), userId);
            }
        });""",1
XtnData.java,"""/** * remove reWritten entry indication if exists * * @param uid -uid of entry */""","""public void removeRewrittenEntryIndication(String uid) {
        if (_reWrittenEntries != null)
            _reWrittenEntries.remove(uid);
    }""",1
YTPlayer.java,"""/** * Get current position(milliseconds) from start */""","""int
    playerGetPosition() {
        return mpGetCurrentPosition();
    }""",1
WrapperPlayServerEntityHeadRotation.java,"""/** * Retrieve the entity. * @param world - the current world of the entity. * @return The entity. */""","""public Entity getEntity(World world) {
    	return handle.getEntityModifier(world).read(0);
    }""",1
ZMQ.java,"""/** * Class constructor. * * @param context *            a 0MQ context previously created. */""","""protected Poller(Context context)
        {
            this(context, SIZE_DEFAULT);
        }""",1
XmlWriterUtilTest.java,"""/** * Test method for {@link org.codehaus.plexus.util.xml.XmlWriterUtil#writeCommentText(org.codehaus.plexus.util.xml.XMLWriter, java.lang.String, int, int)}. * * @throws Exception if any */""","""public void testWriteCommentTextXMLWriterStringIntInt()
        throws Exception
    {
        String indent = StringUtils.repeat( "" "", 2 * 4 );

        XmlWriterUtil.writeCommentText( xmlWriter, ""hello"", 2, 4 );
        writer.close();
        StringBuilder sb = new StringBuilder();
        sb.append( XmlWriterUtil.LS );
        sb.append( indent ).append( ""<!-- ====================================================================== -->"" )
            .append( XmlWriterUtil.LS );
        sb.append( indent ).append( ""<!-- hello                                                                  -->"" )
            .append( XmlWriterUtil.LS );
        sb.append( indent ).append( ""<!-- ====================================================================== -->"" )
            .append( XmlWriterUtil.LS );
        sb.append( XmlWriterUtil.LS );
        sb.append( indent );
        assertEquals( output.toString(), sb.toString() );
        assertTrue( output.toString().length() == 3 * ( 80 - 1 + XmlWriterUtil.LS.length() ) + 4 * 2 * 4 + 2 * XmlWriterUtil.LS.length() );
    }""",1
ABaseTransformer.java,"""/** * If the position offset of a fragment is less than negative one or greater than one, returning true. */""","""protected boolean hideOffscreenPages() {
    return true;
}""",0
Wizard.java,"""/** * Wrapper */""","""protected JPanel step2_setup()
{
    JTextArea introText = new JTextArea();
        introText.setLineWrap(true);
        introText.setWrapStyleWord(true);
        introText.setEditable(false);
        introText.setMargin(new Insets(10, 10, 10, 10));
        introText.setAutoscrolls(true);
        introText.setText(
            ""The first component to launch is the communication server.\n""
            + ""\n""
            + ""D-Mason uses Apache ActiveMQ as messaging service server. ""
            + ""ActiveMQ is embodied in a special D-Mason's component, ""
            + ""called \""Wrapper\"" that allows starting, stopping and ""
            + ""resetting the server using the master console (another ""
            + ""D-Mason component that we will launch later).\n""
            + ""\n""
            + ""Click the button below to start the Wrapper and go to ""
            + ""the next step.""
        );
        
    JScrollPane sclIntroText = new JScrollPane(introText);
        
    btnWrapper = new JButton(""Launch the Wrapper"");
        btnWrapper.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) {	launchWrapper(); }});
    
    JPanel pnlButtons = new JPanel();
        pnlButtons.setLayout(new FlowLayout(FlowLayout.LEFT));
        pnlButtons.add(btnWrapper);
    
    JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout(10, 10));
        panel.add(sclIntroText, BorderLayout.CENTER);
        panel.add(pnlButtons, BorderLayout.SOUTH);

    return panel;
}""",0
XTraceReport.java,"""/** * Add a key-value pair to the report * * @param key *            The key to add to the report. If this is null, the key-value *            pair will be ignored * @param value *            The value to add for the key. If this is null, the string *            ""null"" will be added * @return This report, with the added k-v pair */""","""public XTraceReport put(Object key, Object value) {
        if (key != null) {
            builder.addKey(key.toString());
            builder.addValue(value == null ? ""null"" : value.toString());
        }
        return this;
    }""",1
AbstractCalendarView.java,"""/* * Formatable methods */""","""public BasicUUID() { super(); }""",0
ZMQ.java,"""/** * Sets the raw mode on the ROUTER, when set to true. * When the ROUTER socket is in raw mode, and when using the tcp:// transport, * it will read and write TCP data without ?MQ framing. * This lets ?MQ applications talk to non-?MQ applications. * When using raw mode, you cannot set explicit identities, * and the ZMQ_SNDMORE flag is ignored when sending data messages. * In raw mode you can close a specific connection by sending it a zero-length message (following the identity frame). * * @param raw true to set the raw mode on the ROUTER. * @return true if the option was set, otherwise false. */""","""public boolean setRouterRaw(boolean raw)
        {
            return setSocketOpt(zmq.ZMQ.ZMQ_ROUTER_RAW, raw);
        }""",1
ZMQ.java,"""/** * The ZMQ_LINGER option shall set the linger period for the specified socket. * The linger period determines how long pending messages which have yet to be sent to a peer * shall linger in memory after a socket is disconnected with disconnect or closed with close, * and further affects the termination of the socket's context with Ctx#term. * The following outlines the different behaviours: A value of -1 specifies an infinite linger period. * Pending messages shall not be discarded after a call to disconnect() or close(); * attempting to terminate the socket's context with Ctx#term() shall block until all pending messages have been sent to a peer. * The value of 0 specifies no linger period. Pending messages shall be discarded immediately after a call to disconnect() or close(). * Positive values specify an upper bound for the linger period in milliseconds. * Pending messages shall not be discarded after a call to disconnect() or close(); * attempting to terminate the socket's context with Ctx#term() shall block until either all pending messages have been sent to a peer, * or the linger period expires, after which any pending messages shall be discarded. * * @param value *            the linger period in milliseconds. * @return true if the option was set, otherwise false * @see #getLinger() */""","""public boolean setLinger(int value)
        {
            return base.setSocketOpt(zmq.ZMQ.ZMQ_LINGER, value);
        }""",1
WXDomStatement.java,"""/** * Create a command object for scroll the given view to the specified position. * @param ref {@link WXDomObject#ref} of the dom. * @param options the specified position */""","""void scrollToDom(final String ref, final JSONObject options) {
    if (mDestroy) {
      return;
    }
    WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(mInstanceId);

    mNormalTasks.add(new IWXRenderTask() {

      @Override
      public void execute() {
        mWXRenderManager.scrollToComponent(mInstanceId, ref, options);
      }

      @Override
      public String toString() {
        return ""scrollToPosition"";
      }
    });

    mDirty = true;
    if (instance != null) {
      instance.commitUTStab(WXConst.DOM_MODULE, WXErrorCode.WX_SUCCESS);
    }
  }""",1
ZMQ.java,"""/** * Create a new Poller within this context, with a default size. * * @return the newly created Poller. */""","""public Poller poller()
        {
            return new Poller(this);
        }""",1
ZRegion1.java,"""/** * This example, due to Stephen Heumann, motivated a bug fix in the * handling of z regions. */""","""class ZRegion1<region R> {
    ZRegion1<R> y;
    void m() {
        ZRegion1<this> z = new ZRegion1<this>();
	// z was erroneously substituted for 'this' here
        z.y = new ZRegion1<this>();
    }
}""",1
XSLFCommentAuthors.java,"""/** * Create a new set of slide comments */""","""XSLFCommentAuthors() {
       super();
//       CmAuthorLstDocument doc = CmAuthorLstDocument.Factory.newInstance();
//       _authors = doc.addNewCmAuthorLst();
    }""",1
WebResourceName.java,"""/** * Gets the value of the value property. * * @return *     possible object is *     {@link String } * */""","""public String getvalue() {
        return value;
    }""",1
TerrainTile.java,"""/* XXX: Some strange javac bug seems to make it resolve the * trans() references to the wrong signature, thus the name * distinction. */""","""public void _faces(MapMesh m, int z, Tile trans, MPart d) {
Tex ttex = trans.tex();
float tl = ttex.tcx(0), tt = ttex.tcy(0), tw = ttex.tcx(ttex.sz().x) - tl, th = ttex.tcy(ttex.sz().y) - tt;
TexGL gt;
if(ttex instanceof TexGL)
    gt = (TexGL)ttex;
else if((ttex instanceof TexSI) && (((TexSI)ttex).parent instanceof TexGL))
    gt = (TexGL)((TexSI)ttex).parent;
else
    throw(new RuntimeException(""Cannot use texture for transitions: "" + ttex));
AlphaTex alpha;
synchronized(transtex) {
    if((alpha = transtex.get(gt)) == null)
    transtex.put(gt, alpha = new AlphaTex(gt, 0.01f));
}
Blend b = m.data(blend);
Surface.MeshVertex[] mv = new Surface.MeshVertex[d.v.length];
for(int i = 0; i < var.length + 1; i++) {
    if(b.en[i][b.es.o(d.lc)]) {
    GLState mat = (i == 0)?base:(var[i - 1].mat);
    mat = d.mcomb(GLState.compose(mat, new MapMesh.MLOrder(z, i), alpha));
    MeshBuf buf = MapMesh.Model.get(m, mat);
    MeshBuf.Vec2Layer cc = buf.layer(AlphaTex.lclip);
    for(int o = 0; o < d.v.length; o++) {
        mv[o] = b.lvfac[i].make(buf, d, o);
        cc.set(mv[o], new Coord3f(tl + (tw * d.tcx[o]), tt + (th * d.tcy[o]), 0));
    }
    for(int fi = 0; fi < d.f.length; fi += 3)
        buf.new Face(mv[d.f[fi]], mv[d.f[fi + 1]], mv[d.f[fi + 2]]);
    }
}
}""",0
ZStreamingQuoteControl.java,"""/** * updateTodaysDate - private method to update todays date */""","""private void updateTodaysDate(){
		DateFormat dtFmt = new SimpleDateFormat(""yyyy-MM-dd"");
		dtFmt.setTimeZone(timeZone);
		todaysDate = dtFmt.format(Calendar.getInstance(timeZone).getTime());
	}""",1
WBSType.java,"""/** * Gets the value of the statusReviewerObjectId property. * * @return *     possible object is *     {@link Integer } * */""","""public Integer getStatusReviewerObjectId()
   {
      return statusReviewerObjectId;
   }""",1
WrapperPlayServerWorldParticles.java,"""/** * Set the x position of the particle. * @param value - new position. */""","""public void setX(float value) {
        handle.getFloat().write(0, value);
    }""",1
WrapperPlayServerMapChunk.java,"""/** * Retrieve a bitmask indicating which 16x16x16 section is stored in the compressed data. * @return The current Primary bit map */""","""public short getPrimaryBitMap() {
        return handle.getIntegers().read(2).shortValue();
    }""",1
ZMQ.java,"""/** * Create a new Poller within this context, with a specified initial size. * * @param size *            the poller initial size. * @return the newly created Poller. */""","""public Poller poller(int size)
        {
            return new Poller(this, size);
        }""",1
VSphere.java,"""/** * Find Distributed Virtual Port Group name in the same Datacenter as the VM * @param virtualMachine - VM object * @param name - the name of the Port Group * @return returns DistributedVirtualPortgroup object for the provided vDS PortGroup * @throws VSphereException If an error occurred. */""","""public Network getNetworkPortGroupByName(VirtualMachine virtualMachine,
														String name) throws VSphereException
	{
		try {
			Datacenter datacenter = getDataCenter(virtualMachine);
			for (Network network : datacenter.getNetworks())
			{
				if (network instanceof Network &&
						(name.isEmpty() || network.getName().contentEquals(name)))
				{
					return network;
				}
			}
		} catch (Exception e) {
			throw new VSphereException(e);
		}
		return null;
	}""",1
Category.java,"""/** * The implementation of deepEquals(Entity) for TreatmentCategorization and * Category is complicated by their circular dependency. */""","""@Override
public boolean deepEquals(Entity obj) {
    if(obj instanceof Category) {
        Category other = (Category) obj;
        return d_name.equals(other.d_name) && d_owner.deepEquals(other.d_owner);
    }
    return false;
}""",0
WriteSmsNfcAsync.java,"""/** * Instantiates a new WriteSmsNfcAsync. * * @param asyncUiCallback the async ui callback * @param asyncOperationCallback the async operation callback * @param nfcWriteUtility the nfc write utility */""","""public WriteSmsNfcAsync(@Nullable AsyncUiCallback asyncUiCallback, @NotNull AsyncOperationCallback asyncOperationCallback, @NotNull NfcWriteUtility nfcWriteUtility) {
        super(asyncUiCallback, asyncOperationCallback, nfcWriteUtility);
    }

    @Override
    public void executeWriteOperation(final Intent intent, final Object... args) {
        if (checkStringArguments(args.getClass()) || args.length != 2 || intent == null) {
            throw new UnsupportedOperationException(""Invalid arguments"");
        }

        setAsyncOperationCallback(new AsyncOperationCallback() {
            @Override
            public boolean performWrite(NfcWriteUtility writeUtility) throws ReadOnlyTagException, InsufficientCapacityException, TagNotPresentException, FormatException {
                return writeUtility.writeSmsToTagFromIntent((String) args[0], (String) args[1], intent);
            }
        });
        super.executeWriteOperation();
    }""",1
WebServiceResponse.java,"""/** * @return Returns the content. */""","""public byte[] getContent()
    {
        if (content == null) 
        	return ""<NOOP/>"".getBytes();
        return content;
    }""",1
XmlToPatchBodyReader.java,"""/** * Append key name - key value pairs for every list key to {@code nonCondXpath}. * * @param nonCondXpath Builder for creating non-conditional XPath * @param keyNames Iterator of list keys names * @param keyValues Iterator of list keys values */""","""private static void appendKeys(@Nonnull final StringBuilder nonCondXpath, @Nonnull final Iterator<QName> keyNames,
                            @Nonnull final Iterator<String> keyValues) {
        while (keyNames.hasNext()) {
            nonCondXpath.append(""["");
            nonCondXpath.append(keyNames.next().getLocalName());
            nonCondXpath.append(""="");
            nonCondXpath.append(""'"");
            nonCondXpath.append(keyValues.next());
            nonCondXpath.append(""'"");
            nonCondXpath.append(""]"");
        }""",1
WorldChunkManagerTofu.java,"""/** * Calls the WorldChunkManager's biomeCache.cleanupCache() */""","""@Override
    public void cleanupCache()
    {
        this.biomeCache.cleanupCache();
    }""",1
WrapperPlayServerSpawnEntityLiving.java,"""/** * Retrieve the entity that will be spawned. * @param world - the current world of the entity. * @return The spawned entity. */""","""public Entity getEntity(World world) {
    	return handle.getEntityModifier(world).read(0);
    }""",1
WorkLoadFactory.java,"""/** * * @param jobInstanceId * @return */""","""public IncreasingWorkLoad getModelRunner(int jobInstanceId) {
        JobInstance job = jobInstanceDao.findById(jobInstanceId);
        JobRequest request = jobToJobRequest(job);
        return new IncreasingWorkLoad(channel, agentDispatcher, request);
    }""",1
WikiUtil.java,"""/** * Return an unique UUID and initial it in repository. * @param spacename * @param username * @param password * @param repositoryService * @return * @throws PageException */""","""public static String createPageUuid(String spacename, String username, String password, RepositoryService repositoryService) throws PageException{
		//DON'T user repository created UUID for future export/import function:
		//always keep page UUID unchanged whatever import to any new database
		//UUID.randomUUID().toString(); - use smaller string to replace 32 length UUID, I test possible duplicated case
		//if it is case sensitive, it is almost impossible duplicated even 50 million. But I have to make to lowerCase 
		// 1 million no duplicate, but 50 million will have 9 duplicate -- this make need make duplciate try-catch check?
		String uuid = RandomStringUtils.randomAlphanumeric(WikiConstants.UUID_KEY_SIZE).toLowerCase();
		try {
			ITicket ticket = repositoryService.login(spacename,username, password);
			repositoryService.createIdentifier(ticket,RepositoryService.TYPE_ATTACHMENT, uuid);
		} catch (RepositoryException e) {
			log.error(""Create page UUID failed request from repository :"" , e);
			throw new PageException(e);
		} catch (RepositoryTiemoutExcetpion e) {
			log.error(""Create page UUID failed request from repository :"" , e);
			throw new PageException(e);
		}
		
		return uuid;
	}""",1
ZKSubscriptionStateStore.java,"""/** * Advances the position associated with the subscriber * * @param newPosition - new commit position */""","""@Override
    public Future<BoxedUnit> advanceCommitPosition(DLSN newPosition) {
        if (null == lastCommittedPosition.get() ||
            (newPosition.compareTo(lastCommittedPosition.get()) > 0)) {
            lastCommittedPosition.set(newPosition);
            return Utils.zkAsyncCreateFullPathOptimisticAndSetData(zooKeeperClient,
                zkPath, newPosition.serialize().getBytes(Charsets.UTF_8),
                zooKeeperClient.getDefaultACL(),
                CreateMode.PERSISTENT);
        } else {
            return Future.Done();
        }
    }""",1
WifiStatus.java,"""/** * check if  Mobile Data With SIM Enabled */""","""public boolean isMobileDataEnabled() {
            try {
                ConnectivityManager connectivityManager = (ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
                Method method = connectivityManager.getClass().getMethod(""getMobileDataEnabled"");
                return (Boolean)method.invoke(connectivityManager);
            } catch (Exception e) {
                e.printStackTrace();
            }

            return false;
        }""",1
XMLList.java,"""/** * * @param name */""","""void setName(QName qname)
    {
        if (length() == 1)
        {
            getXmlFromAnnotation(0).setName(qname);
        }
        else
        {
            throw ScriptRuntime.typeError(""The setName method works only on lists containing one item"");
        }
    }""",1
_MainActivity.java,"""/** * Inflate the view container layout and inject our view components */""","""private void inflateViewContainerLayout() {
    setContentView(R.layout.activity_main);
    ButterKnife.inject(this);
    mainFlow = mainView.getFlow();
  }""",1
WorkerManager.java,"""/** * Find the _Fields constant that matches name, or null if its not found. */""","""public static _Fields findByName(String name) {
        return byName.get(name);
      }""",1
ZMQ.java,"""/** * The 'ZMQ_RCVMORE' option shall return a boolean value indicating if the multi-part * message currently being read from the specified 'socket' has more message parts to * follow. If there are no message parts to follow or if the message currently being read is * not a multi-part message a value of zero shall be returned. Otherwise, a value of 1 shall * be returned. * * @return true if there are more messages to receive. */""","""public boolean hasReceiveMore()
        {
            return base.getSocketOpt(zmq.ZMQ.ZMQ_RCVMORE) == 1;
        }""",1
WorkspacesApi.java,"""/** * List File Pages * Retrieves a workspace file as rasterized pages. * @param accountId The external account number (int) or account ID Guid. * @param workspaceId Specifies the workspace ID GUID. * @param folderId The ID of the folder being accessed. * @param fileId Specifies the room file ID GUID. * @return PageImages */""","""public PageImages listWorkspaceFilePages(String accountId, String workspaceId, String folderId, String fileId) throws ApiException {
    return listWorkspaceFilePages(accountId, workspaceId, folderId, fileId, null);
  }""",1
VolumeDialog.java,"""/** * Provides access to the seek bar * @return VolumeDialog's SeekBar */""","""public SeekBar volumeBar(){
		return (SeekBar)findViewById(R.id.volume_seek);
	}""",1
ATKMonitorService.java,"""/** * Only valid on API >= 8 */""","""private long getTotalTxBytes() {
     String className = ""android.net.TrafficStats"";
     String methodName = ""getTotalTxBytes"";
     try {
         Class<?> handler = Class.forName(className);
         Method m = handler.getDeclaredMethod(methodName, (Class[]) null);
         long result = (Long) m.invoke(handler.newInstance());
         return result;
     } catch (Exception e) {
         e.printStackTrace();
         return -1;
     }
 }""",0
WrapperPlayServerSpawnEntityWeather.java,"""/** * Retrieve the global entity type. * <p> * Currently always 1 for thunderbolt. * @return The current Type */""","""public byte getType() {
        return handle.getIntegers().read(4).byteValue();
    }""",1
XmlDocumentCategory.java,"""/** * <p>Java class for documentCategory. * * <p>The following schema fragment specifies the expected content contained within this class. * <p> * <pre> * &lt;simpleType name=""documentCategory""> *   &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}string""> *     &lt;enumeration value=""DOCUMENT""/> *     &lt;enumeration value=""SECTION""/> *     &lt;enumeration value=""PARAGRAPH""/> *     &lt;enumeration value=""SENTENCE""/> *     &lt;enumeration value=""LIST""/> *     &lt;enumeration value=""LIST_ITEM""/> *   &lt;/restriction> * &lt;/simpleType> * </pre> * */""","""@XmlType(name = ""documentCategory"")
@XmlEnum
public enum XmlDocumentCategory {

    DOCUMENT,
    SECTION,
    PARAGRAPH,
    SENTENCE,
    LIST,
    LIST_ITEM;

    public String value() {
        return name();
    }

    public static XmlDocumentCategory fromValue(String v) {
        return valueOf(v);
    }

}""",1
WXHack.java,"""/** * Get current value of this field */""","""public T get(final C instance) {
      try {
        @SuppressWarnings(""unchecked"") final T value = (T) mField.get(instance);
        return value;
      } catch (IllegalAccessException e) {
        WXLogUtils.e("""", e);
        //TBS.Ext.commitEvent(""AtlasRuntimeException"", AtlasConstant.ATLAS_RUNTIME_EXCEPTION, e.toString());
        return null; /* Should never happen */
      }
    }""",1
WordCram.java,"""/** * The maximum number of Words WordCram should try to draw. * This might be useful if you have a whole bunch of words, * and need an artificial way to cut down the list (for * speed).  By default, it's unlimited. * @param maxWords can be any value from 0 to Integer.MAX_VALUE. Values < 0 are treated as unlimited. * @return The WordCram, for further setup or drawing. */""","""public WordCram maxNumberOfWordsToDraw(int maxWords) {
		renderOptions.maxNumberOfWordsToDraw = maxWords;
		return this;
	}""",1
XMLFieldConfigSlider.java,"""/** * *                 Configuration for a slider field * * * <p>Java class for XMLFieldConfigSlider complex type. * * <p>The following schema fragment specifies the expected content contained within this class. * * <pre> * &lt;complexType name=""XMLFieldConfigSlider""&gt; *   &lt;complexContent&gt; *     &lt;extension base=""{}XMLFieldConfigData""&gt; *       &lt;attribute name=""defaultValue"" type=""{http://www.w3.org/2001/XMLSchema}double"" default=""1.0"" /&gt; *     &lt;/extension&gt; *   &lt;/complexContent&gt; * &lt;/complexType&gt; * </pre> * * */""","""@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""XMLFieldConfigSlider"")
public class XMLFieldConfigSlider
    extends XMLFieldConfigData
{

    @XmlAttribute(name = ""defaultValue"")
    protected Double defaultValue;

    /**
     * Gets the value of the defaultValue property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getDefaultValue() {
        if (defaultValue == null) {
            return  1.0D;
        } else {
            return defaultValue;
        }
    }

    /**
     * Sets the value of the defaultValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setDefaultValue(Double value) {
        this.defaultValue = value;
    }

}""",1
YangMultiPageEditorPart.java,"""/** * @return the yangSourceEditor */""","""public YangEditor getYangSourceEditor() {
        return yangSourceEditor;
    }""",1
VvrManager.java,"""/** * Register a VVR in the MBean server. * * @param vvr *            VVR to register * @throws JMException */""","""private final void registerVvrMXBean(final Vvr vvr) throws JMException {
        final ObjectName objectName = VvrObjectNameFactory.newVvrObjectName(owner, vvr.getUuidUuid());
        mbeanServer.registerMBean(vvr, objectName);
        LOGGER.info(""VVR "" + vvr.getUuid() + "" registered"");
    }""",1
AttCertIssuer.java,"""/** * Don't use this one if you are trying to be RFC 3281 compliant. */""","""public AttCertIssuer(
    GeneralNames  names)
{
    obj = names;
    choiceObj = obj.getDERObject();
}""",0
WebdavServlet.java,"""/** * Sets the <code>DavSessionProvider</code>. * * @param sessionProvider * @see AbstractWebdavServlet#setDavSessionProvider(org.apache.jackrabbit.webdav.DavSessionProvider) */""","""@Override
    public synchronized void setDavSessionProvider(DavSessionProvider sessionProvider) {
        this.davSessionProvider = sessionProvider;
    }""",1
YammerProfile.java,"""/** * @return the contact */""","""public Contact getContact() {
		return contact;
	}""",1
WrapperPlayServerSpawnEntityLiving.java,"""/** * Set the velocity in the z axis. * @param value - new value. */""","""public void setVelocityZ(double value) {
        handle.getIntegers().write(7, (int) (value * 8000.0D));
    }""",1
WaveReader.java,"""/** * Get input file's audio data size * Basically file size without headers included * * @return audio data size in bytes */""","""public int getDataSize() {
        return mDataSize;
    }""",1
WrapperPlayServerScoreboardScore.java,"""/** * Retrieve the score to be displayed next to the entry. Only sent when setting a score. * @return The current Value */""","""public int getValue() {
    	return handle.getIntegers().read(0); 
    }""",1
WAStorageClientUploadIT.java,"""/** * Test of validateStorageAccount method, of class WAStorageClient. */""","""@Test(expected = WAStorageException.class)
    public void testInvalidateStorageAccount1() throws Exception {
        System.out.println(""Testing Invalid StorageAccount"");
        AzureUtils.validateStorageAccount(new StorageAccountInfo(testEnv.azureStorageAccountName, ""asdhasdh@asdas!@234="", testEnv.blobURL));
        testEnv.container.deleteIfExists();
    }""",1
XMLFieldConfigEnumValue.java,"""/** * Gets the value of the field property. * * <p> * This accessor method returns a reference to the live list, * not a snapshot. Therefore any modification you make to the * returned list will be present inside the JAXB object. * This is why there is not a <CODE>set</CODE> method for the field property. * * <p> * For example, to add a new item, do as follows: * <pre> *    getField().add(newItem); * </pre> * * * <p> * Objects of the following type(s) are allowed in the list * {@link XMLFieldConfigEnumValueField } * * */""","""public List<XMLFieldConfigEnumValueField> getField() {
            if (field == null) {
                field = new ArrayList<XMLFieldConfigEnumValueField>();
            }
            return this.field;
        }""",1
YearPicker.java,"""/** * Set the selected year. * @param year The selected year value. */""","""public void setYear(int year){
        if(mAdapter.getYear() == year)
            return;

        mAdapter.setYear(year);
        goTo(year);
    }""",1
ZkUtils.java,"""/** * Create an persistent node with the given path and data. Create parent nodes if necessary. */""","""public static void createPersistentPath(ZkClient client, String path, String data) {
    try {
      client.createPersistent(path, data);
    } catch (ZkNoNodeException nne) {
      createParentPath(client, path);
      client.createPersistent(path, data);
    }
  }""",1
WorkerEntry.java,"""/** * @return */""","""public String getPeerID() {
		return this.request.getPeerID();
	}""",1
ZookeeperServerLifecycleTest.java,"""/** * Configures and invokes an Zookeeper Server inside a separate thread. * * @throws Exception */""","""@BeforeClass
    public static void configureLifecycle() throws Exception {
        serverLifecycle = new ZookeeperServerLifecycle();
        serverLifecycle.configureServer(port, dataDir, null, null, null);
        serverLifecycle.start();
    }""",1
WeatherBuilder.java,"""/** * Sets the aliases of the {@link LanternWeather}. * * @param aliases The aliases * @return This weather builder */""","""public WeatherBuilder aliases(String... aliases) {
        this.aliases = ImmutableSet.copyOf(aliases);
        return this;
    }""",1
X509CertSelector.java,"""/** * Returns a copy of this object. * * @return the copy */""","""public Object clone() {
        try {
            X509CertSelector copy = (X509CertSelector)super.clone();
            // Must clone these because addPathToName et al. modify them
            if (subjectAlternativeNames != null) {
                copy.subjectAlternativeNames =
                        (Set<List<?>>)cloneSet(subjectAlternativeNames);
                copy.subjectAlternativeGeneralNames =
                        (Set<GeneralNameInterface>)cloneSet
                                (subjectAlternativeGeneralNames);
            }
            if (pathToGeneralNames != null) {
                copy.pathToNames =
                        (Set<List<?>>)cloneSet(pathToNames);
                copy.pathToGeneralNames =
                        (Set<GeneralNameInterface>)cloneSet
                                (pathToGeneralNames);
            }
            return copy;
        } catch (CloneNotSupportedException e) {
            /* Cannot happen */
            throw new InternalError(e.toString());
        }
    }""",1
XMLFieldConfigInlineFeature.java,"""/** * *                 Configuration for an inline feature field * * * <p>Java class for XMLFieldConfigInlineFeature complex type. * * <p>The following schema fragment specifies the expected content contained within this class. * * <pre> * &lt;complexType name=""XMLFieldConfigInlineFeature""&gt; *   &lt;complexContent&gt; *     &lt;extension base=""{}XMLFieldConfigData""&gt; *     &lt;/extension&gt; *   &lt;/complexContent&gt; * &lt;/complexType&gt; * </pre> * * */""","""@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""XMLFieldConfigInlineFeature"")
public class XMLFieldConfigInlineFeature
    extends XMLFieldConfigData
{


}""",1
AbsDanmakuSync.java,"""/** * synchronize pause resume state with outside playback */""","""public boolean isSyncPlayingState() {
    return false;
}""",0
ZAUtil.java,"""/** * Gets the closest player to the point within the specified distance (distance can be set to less than 0 to not * limit the distance). Args: x, y, z, dist */""","""public static EntityPlayer getClosestPlayer(World world, double par1, double par3, double par5, double par7)
    {
        double d4 = -1.0D;
        EntityPlayer entityplayer = null;

        for (int i = 0; i < world.playerEntities.size(); ++i)
        {
            EntityPlayer entityplayer1 = (EntityPlayer)world.playerEntities.get(i);
            if (!ZAConfigPlayerLists.whiteListUsedSenses || ZAConfigPlayerLists.whitelistSenses.contains(CoroUtilEntity.getName(entityplayer1))) {
            	double d5 = entityplayer1.getDistanceSq(par1, par3, par5);

                if ((par7 < 0.0D || d5 < par7 * par7) && (d4 == -1.0D || d5 < d4))
                {
                    d4 = d5;
                    entityplayer = entityplayer1;
                }
            }
        }

        return entityplayer;
    }""",1
AbstractCalendarView.java,"""/* * called for implicitCA */""","""public BCDSTU4145PublicKey(
    String algorithm,
    ECPublicKeyParameters params)
{
    this.algorithm = algorithm;
    this.ecPublicKey = params;
    this.ecSpec = null;
}""",0
WFSIDCCAPS.java,"""/** * @see #secType */""","""public void setSecType(final IDCSecType secType) {
		this.secType.set((int) secType.getValue());
	}""",1
WBSCategoryType.java,"""/** * Gets the value of the lastUpdateDate property. * * @return *     possible object is *     {@link String } * */""","""public Date getLastUpdateDate()
   {
      return lastUpdateDate;
   }""",1
RayHandler.java,"""/** * Expert functionality */""","""public Texture getLightMapTexture() {
            return this.lightMap.frameBuffer.getColorBufferTexture();
    }""",0
WXHack.java,"""/** * Hijack the current instance of this field. * The instance must not be null at the time of hijacking, or an IllegalStateException will be thrown. * * @param handler a invocation handler to implement the hijack logic. */""","""public void hijack(final C instance, final InterceptionHandler<?> handler) {
      final Object delegatee = get(instance);
      if (delegatee == null) {
        throw new IllegalStateException(""Cannot hijack null"");
      }
      final Class<?>[] interfaces = delegatee.getClass().getInterfaces();
      set(instance, WXInterception.proxy(delegatee, handler, interfaces));
    }""",1
AbstractCalendarView.java,"""/** * Method replicates the simple logic from JmsTemplate doReceive MessageConsumer, long. */""","""private Message doReceive(MessageConsumer consumer, long timeout) throws JMSException {

    if (timeout == RECEIVE_TIMEOUT_NO_WAIT) {
        return consumer.receiveNoWait();
    } else if (timeout > 0) {
        return consumer.receive(timeout);
    } else {
        return consumer.receive();
    }
}""",0
WeatherNotificationSettings.java,"""/** * Set the station to be used for updating measurement and delete saved * measurement. If the id is the same as before, nothing is done. NOTE: * {@link WsKlimaProxy#setUseNearestStation(Context, boolean)} must also be * set. * * * @param context * @param name * @param id */""","""public static void setStation(Context context, String name, int id) {
		final SharedPreferences preferences = context.getSharedPreferences(
				PREFS_NAME, 0);

		// Do nothing if ids are equal
		final int oldId = preferences.getInt(PREFS_STATION_ID_KEY,
				PREFS_STATION_ID_DEFAULT);
		if (oldId == id)
			return;

		final Editor settings = preferences.edit();
		settings.putInt(PREFS_STATION_ID_KEY, id);
		settings.putString(PREFS_STATION_NAME_KEY, name);
		settings.remove(PREFS_LAST_UPDATE_TIME_KEY);
		settings.remove(PREFS_LAST_WEATHER_KEY);
		settings.commit();
	}""",1
WorldGuardRegionFlagsFeature.java,"""/** * Translate the color codes you put in greeting/farewell messages to the weird color codes of WorldGuard. * @param message The message where the color codes should be translated (this message has bukkit color codes) * @return The string with the WorldGuard color codes */""","""private String translateBukkitToWorldGuardColors(String message) {
		String result = message;
		result = result.replace(""&c"", ""&r"");
		result = result.replace(""&4"", ""&R"");
		result = result.replace(""&e"", ""&y"");
		result = result.replace(""&6"", ""&Y"");
		result = result.replace(""&a"", ""&g"");
		result = result.replace(""&2"", ""&G"");
		result = result.replace(""&b"", ""&c"");
		result = result.replace(""&3"", ""&C"");
		result = result.replace(""&9"", ""&b"");
		result = result.replace(""&1"", ""&B"");
		result = result.replace(""&d"", ""&p"");
		result = result.replace(""&5"", ""&P"");
		result = result.replace(""&0"", ""&0"");
		result = result.replace(""&8"", ""&1"");
		result = result.replace(""&7"", ""&2"");
		result = result.replace(""&f"", ""&w"");
		result = result.replace(""&r"", ""&x"");
		return result;
	}""",1
VpnStateService.java,"""/** * Get the current IMC state, if any. * * @return imc state */""","""public ImcState getImcState()
	{	/* only updated from the main thread so no synchronization needed */
		return mImcState;
	}""",1
ZMQ.java,"""/** * Register a Socket for polling on the specified events. * * Automatically grow the internal representation if needed. * * @param channel *            the Channel we are registering. * @param events *            a mask composed by XORing POLLIN, POLLOUT and POLLERR. * @return the index identifying this Channel in the poll set. */""","""public int register(SelectableChannel channel, int events)
        {
            return registerInternal(new PollItem(channel, events));
        }""",1
XMLList.java,"""/** * */""","""void normalize()
    {
        for (int i = 0; i < length(); i++)
        {
            getXmlFromAnnotation(i).normalize();
        }
    }""",1
YangTextHover.java,"""/** * @param editor the editor to set */""","""public void setEditor(IEditorPart editor) {
        this.editor = editor;
    }""",1
PullToRefreshBase.java,"""/** * Called when the UI has been to be updated to be in the *  State#RELEASE_TO_REFRESH state. */""","""protected void onReleaseToRefresh() {
    switch (mCurrentMode) {
        case PULL_FROM_END:
            mFooterLayout.releaseToRefresh();
            break;
        case PULL_FROM_START:
            mHeaderLayout.releaseToRefresh();
            break;
        default:
            // NO-OP
            break;
    }
}""",0
ZrtpConfigure.java,"""/** * Enables or disables paranoid mode. * * For further explanation of paranoid mode refer to the documentation * of ZRtp class. * * @param yesNo *    If set to true then paranoid mode is enabled. */""","""@SuppressWarnings(""unused"")
    public void setParanoidMode(boolean yesNo) {
        enableParanoidMode = yesNo;
    }""",1
WeatherNotificationSettings.java,"""/** * Gets the station id for where the measurement is taken. If the user want * the nearest station this return the last used station. * * @param context * @return station id */""","""public static int getStationId(Context context) {
		final SharedPreferences settings = context.getSharedPreferences(
				PREFS_NAME, 0);
		return settings.getInt(PREFS_STATION_ID_KEY, PREFS_STATION_ID_DEFAULT);
	}""",1
WordListOpenHelper.java,"""/** * Queries the database for an entry at a given position. * * @param position The Nth row in the table. * @return a WordItem with the requested database entry. */""","""public WordItem query(int position) {
        String query = ""SELECT  * FROM "" + WORD_LIST_TABLE +
                "" ORDER BY "" + KEY_WORD + "" ASC "" +
                ""LIMIT "" + position + "",1"";

        Cursor cursor = null;
        WordItem entry = new WordItem();

        try {
            if (mReadableDB == null) {mReadableDB = getReadableDatabase();}
            cursor = mReadableDB.rawQuery(query, null);
            cursor.moveToFirst();
            entry.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
            entry.setWord(cursor.getString(cursor.getColumnIndex(KEY_WORD)));
        } catch (Exception e) {
            Log.d(TAG, ""QUERY EXCEPTION! "" + e.getMessage());
        } finally {
            // Must close cursor and db now that we are done with it.
            cursor.close();
            return entry;
        }
    }""",1
ZrtpConfigure.java,"""/** * Add a SAS type algorithm to configuration data. * * Adds the specified SAS type algorithm to the configuration data. * * @param algo *            The identifier of the SAS type algorithm to add. * @param index *            The index into the configuration data * @return Number of free SAS type configuration data slots. */""","""@SuppressWarnings(""unused"")
    public int addSasTypeAlgoAt(int index, ZrtpConstants.SupportedSASTypes algo) {
        return sasTypes.addAlgoAt(index, algo);
    }""",1
AbstractCalendarView.java,"""/* // Assertions */""","""protected static String tokenTypeDesc(int tt)
{
String desc = mTokenTypes.get(Integer.valueOf(tt));
return (desc == null) ? (""[""+tt+""]"") : desc;
}""",0
WebAppType.java,"""/** * Gets the value of the descriptionAndDisplayNameAndIcon property. * * <p> * This accessor method returns a reference to the live list, * not a snapshot. Therefore any modification you make to the * returned list will be present inside the JAXB object. * This is why there is not a <CODE>set</CODE> method for the descriptionAndDisplayNameAndIcon property. * * <p> * For example, to add a new item, do as follows: * <pre> *    getDescriptionAndDisplayNameAndIcon().add(newItem); * </pre> * * * <p> * Objects of the following type(s) are allowed in the list * {@link DisplayNameType } * {@link FilterType } * {@link ResourceRefType } * {@link ServletMappingType } * {@link ParamValueType } * {@link EmptyType } * {@link JspConfigType } * {@link ServiceRefType } * {@link LocaleEncodingMappingListType } * {@link ResourceEnvRefType } * {@link DescriptionType } * {@link SecurityConstraintType } * {@link MessageDestinationRefType } * {@link ListenerType } * {@link EnvEntryType } * {@link EjbLocalRefType } * {@link MimeMappingType } * {@link LoginConfigType } * {@link IconType } * {@link SessionConfigType } * {@link ServletType } * {@link MessageDestinationType } * {@link FilterMappingType } * {@link ErrorPageType } * {@link EjbRefType } * {@link WelcomeFileListType } * {@link SecurityRoleType } * * */""","""public List<Object> getDescriptionAndDisplayNameAndIcon() {
        if (descriptionAndDisplayNameAndIcon == null) {
            descriptionAndDisplayNameAndIcon = new ArrayList<Object>();
        }
        return this.descriptionAndDisplayNameAndIcon;
    }""",1
XMLPersistenceTest.java,"""/** * Should throw an exception when the data to marshal doesn't validate against the * schema * @throws IOException * @throws ValidationException */""","""@Test  (enabled=true, expectedExceptions=ValidationException.class)
    public void exportDoesntValidate() throws IOException, ValidationException{ 
        XMLPersistence.marshal(illegalComp(), 
        		               new File(""testExportDoesntValidate.xml""));
    }""",1
VMLaunchOptions.java,"""/** * Indicates the network interfaces to be attached to this virtual machine at launch time. This method is accretive, * meaning it will add to any existing network interface configurations. * @param nicIds the unique cloud provider IDs for the network interfaces to be attached * @return this */""","""public @Nonnull VMLaunchOptions withNetworkInterfaces(String ... nicIds) {
        if( networkInterfaces == null || networkInterfaces.length < 1 ) {
            int i = 0;
            
            networkInterfaces = new NICConfig[nicIds.length];
            for( String id : nicIds ) {
                NICConfig cfg = new NICConfig();
                
                cfg.nicId = id;
                networkInterfaces[i++] = cfg;
            }
        }""",1
XmlEntityConsumerTest.java,"""/** * Reads an employee with inlined but <code>NULL</code> room navigation property * (which has {@link com.sap.core.odata.api.edm.EdmMultiplicity#ONE EdmMultiplicity#ONE}). */""","""@Test
  public void readWithInlineContentEmployeeNullRoomEntrySpecialXmlFormat() throws Exception {

    EdmEntitySet entitySet = MockFacade.getMockEdm().getDefaultEntityContainer().getEntitySet(""Employees"");
    InputStream reqContent = createContentAsStream(EMPLOYEE_1_NULL_ROOM_XML, true);

    // execute
    XmlEntityConsumer xec = new XmlEntityConsumer();
    ODataEntry entry =
        xec.readEntry(entitySet, reqContent, EntityProviderReadProperties.init().mergeSemantic(true).build());

    // validate
    assertNotNull(entry);
    Map<String, Object> properties = entry.getProperties();
    assertEquals(""1"", properties.get(""EmployeeId""));
    assertEquals(""Walter Winter"", properties.get(""EmployeeName""));
    ODataEntry room = (ODataEntry) properties.get(""ne_Room"");
    assertNull(room);
  }""",1
AbstractBackendHelper.java,"""/** * Call this in LocationBackendService. */""","""public synchronized void onOpen() {
    if (state == State.WAITING || state == State.SCANNING)
        throw new IllegalStateException(""Do not call onOpen if not closed before"");
    currentDataUsed = true;
    state = State.WAITING;
}""",0
WebMvcConfiguration.java,"""/** * Spring MVC use a default objectMapper. Objects passed to and returned from the controllers are converted to and from HTTP messages by HttpMessageConverter * instances. We must use our {{@link #objectMapper}} because of the subtypes.... So we declare two message converters * <ul> * <li>StringHttpMessageConverter to format the String sent by HTTP like a JSON object representation</li> * <li>MappingJackson2HttpMessageConverter to use our {{@link #objectMapper}}</li> * </ul>To declare a JacksonHttpMessageConvet */""","""@Override
    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
        //Add a converter for the String sent via HTTP
        StringHttpMessageConverter stringConverter = new StringHttpMessageConverter(Charset.forName(""UTF-8""));
        stringConverter.setWriteAcceptCharset(false);  // see SPR-7316
        converters.add(stringConverter);

        //Use our custom Jackson serializer
        MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter(objectMapper);
        mappingJackson2HttpMessageConverter.setSupportedMediaTypes(supportedMediaTypes());
        converters.add(mappingJackson2HttpMessageConverter);

    }""",1
WrapperPlayClientArmAnimation.java,"""/** * Set animation ID. * @param value - new value. */""","""public void setAnimation(int value) {
        handle.getIntegers().write(1, value);
    }""",1
XMLMediaParser.java,"""/** * Parse the input stream as one of {@link Result}, {@link Artist}, * {@link Album} or {@link Track}, depending on the document element. * * @return An {@link Object} which can then be cast. * @throws XMLStreamException * @throws XMLParserException */""","""private Object parse() throws XMLStreamException, XMLParserException {
        String name;

        /* Check if reader is currently on a start element. */
        if (this.reader.getEventType() == START_ELEMENT) {
            name = this.reader.getLocalName();

            /* Check current element name and start parsing it. */
            if (name.equals(""result"")) {
                return this.parseResult();
            } else if (name.equals(""toplist"")) {
                return this.parseResult();
            } else if (name.equals(""artist"")) {
                return this.parseArtist();
            } else if (name.equals(""album"")) {
                return this.parseAlbum();
            } else if (name.equals(""track"")) {
                return this.parseTrack();
            } else {
                System.out.println(""Unexpected element '<"" + name + "">' while parsing root xml."");
            }
        }

        throw new IllegalStateException(""Reader is not on a start element!"");
    }""",1
WrapperPlayServerOpenWindow.java,"""/** * Set the title of the window.. * @param value - new value. */""","""public void setWindowTitle(String value) {
        handle.getStrings().write(0, value);
    }""",1
WFSIDCCAPS.java,"""/** * @see #compound */""","""public boolean isCompound() {
		return compound.booleanValue();
	}""",1
_GZipResponseUtil.java,"""/** * Adds the gzip HTTP header to the response. * <p/> * <p> * This is need when a gzipped body is returned so that browsers can properly decompress it. * </p> * * @param response the response which will have a header added to it. I.e this method changes its parameter * @throws GzipResponseHeadersNotModifiableException Either the response is committed or we were called using the include method *                                                   from a {@link javax.servlet.RequestDispatcher#include(javax.servlet.ServletRequest, javax.servlet.ServletResponse)} *                                                   method and the set header is ignored. */""","""public static void addGzipHeader(HttpServletResponse response) throws GzipResponseHeadersNotModifiableException {
        response.setHeader(""Content-Encoding"", ""gzip"");
        boolean containsEncoding = response.containsHeader(""Content-Encoding"");
        if (!containsEncoding) {
            throw new GzipResponseHeadersNotModifiableException(""Failure when attempting to set ""
                    + ""Content-Encoding: gzip"");
        }
    }""",1
WorkSurfaceShapelessRecipes.java,"""/** * Returns an Item that is the result of this recipe */""","""public ItemStack getCraftingResult(InventoryCrafting par1InventoryCrafting)
    {
        return this.recipeOutput.copy();
    }""",1
ZMQ.java,"""/** * Retrieve the state of the attach on connect value. * If false, will delay the attachment of a pipe on connect until the underlying connection has completed. * This will cause the socket to block if there are no other connections, but will prevent queues from filling on pipes awaiting connection. * * @see #setImmediate(boolean) */""","""public boolean isImmediate()
        {
            return (boolean) base.getSocketOptx(zmq.ZMQ.ZMQ_IMMEDIATE);
        }""",1
ClockSync.java,"""/* * static helper */""","""static void listenForStartSignal(int port)
{
    try
    {
        DatagramSocket syncSocket = new DatagramSocket(port);
        syncSocket.setReuseAddress(true);

        Log.i(""waiting for master pipeline (port = "" + port + "")"");
        while (true) {
            byte[] data = new byte[32];
            DatagramPacket packet = new DatagramPacket(data, 32);
            syncSocket.receive(packet);
            Log.d(""received packet from "" + packet.getAddress().toString());

            //check data
            String str = new String(packet.getData(), ""ASCII"");
            if (str.startsWith(""SSI:STRT:RUN"")) //SSI format for compatibility
            {
                Log.d(""packet identified as start ping"");
                break;
            }
            Log.d(""packet not recognized"");
        }
    }
    catch(IOException e)
    {
        Log.e(""network sync failed"", e);
    }
}""",0
WrapperPlayServerWorldEvent.java,"""/** * Retrieve extra data for certain effects. * @see {@link SmokeDirections} * @return The current Data */""","""public int getData() {
        return handle.getIntegers().read(1);
    }""",1
VolumeFilterOptions.java,"""/** * Indicates whether these options can match a single criterion (<code>true</code>) or if all criteria must be * matched in order for the volume to pass the filter (<code>false</code>). * @return whether matching any single criterion is sufficient to consider a volume a match */""","""public boolean isMatchesAny() {
        return matchesAny;
    }""",1
WrapperPlayServerMapChunk.java,"""/** * Set the chunk data that has been compressed using ZLib Deflate function. * <p> * This is the data that will be transmitted to the client. * @param value - new value. */""","""public void setCompressedData(byte[] value) {
        handle.getByteArrays().write(0, (byte[]) value);
    }""",1
YangGeneratorConfiguration.java,"""/** * @return the codeGeneratorClass */""","""public String getCodeGeneratorClass() {
        return codeGeneratorClass;
    }""",1
WrapperPlayServerEntityEffect.java,"""/** * Retrieve entity ID of a player. * @return The current Entity ID */""","""public int getEntityId() {
        return handle.getIntegers().read(0);
    }""",1
WrapperPlayServerTransaction.java,"""/** * Set every action that is to be accepted has a unique number. * <p> * This field corresponds to that number. * @param value - new value. */""","""public void setActionNumber(short value) {
        handle.getShorts().write(0, value);
    }""",1
WiffPacket.java,"""/** * @return the source port */""","""public int getSourcePort() {
    int offset = getEthHeaderLength() + getIpHeaderLength();

    byte[] bytes = new byte[2];
    buffer.clear().position(offset).limit(offset + 2);
    buffer.get(bytes);

    return getUShortAsUInt(bytes);
  }""",1
ByteArrayHashMap.java,"""/** * Bit inefficient at the moment */""","""public ByteArrayHashMap<T>
duplicate()
{
    ByteArrayHashMap<T>	res = new ByteArrayHashMap<T>(size,loadFactor);
    
    for (int j = 0; j < table.length; j++) {
         Entry<T> e = table[j];
         while( e != null ){
              res.put( e.key, e.value );
               
           e = e.next;
        }
    }
   
   return( res );
}""",0
WSManRemoteShellService.java,"""/** * Executes a command on the given shell. * * @param csHttpClient * @param httpClientInputs * @param shellId * @param wsManRequestInputs * @return the command id. * @throws RuntimeException * @throws IOException * @throws URISyntaxException * @throws TransformerException * @throws XPathExpressionException * @throws SAXException * @throws ParserConfigurationException */""","""private String executeCommand(CSHttpClient csHttpClient, HttpClientInputs httpClientInputs, String shellId,
                                  WSManRequestInputs wsManRequestInputs, String command) throws RuntimeException,
            IOException, URISyntaxException, TransformerException, XPathExpressionException, SAXException, ParserConfigurationException {
        String documentStr = ResourceLoader.loadAsString(EXECUTE_COMMAND_REQUEST_XML);
        documentStr = createExecuteCommandRequestBody(documentStr, httpClientInputs.getUrl(), shellId, command, String.valueOf(wsManRequestInputs.getMaxEnvelopeSize()),
                wsManRequestInputs.getWinrmLocale(), String.valueOf(wsManRequestInputs.getOperationTimeout()));
        commandExecutionStartTime = System.currentTimeMillis() / 1000;
        Map<String, String> executeCommandResult = executeRequest(csHttpClient, httpClientInputs, documentStr);
        return getResourceId(executeCommandResult.get(RETURN_RESULT), COMMAND_RESPONSE_ACTION, COMMAND_RESULT_COMMAND_ID_XPATH,
                COMMAND_ID_NOT_RETRIEVED);
    }""",1
WatsAgentStatusResponse.java,"""/** * @return Restarts */""","""public int getRestarts() {
        return restarts;
    }""",1
WBSCategoryType.java,"""/** * Gets the value of the createDate property. * * @return *     possible object is *     {@link String } * */""","""public Date getCreateDate()
   {
      return createDate;
   }""",1
YandexSynthesiser.java,"""/** * Set speaker voice * * @param speaker voice - jane, omazh, zahar or ermil */""","""public void setSpeaker(String speaker) {
        this.speaker = speaker;
    }""",1
WarnChecksumPolicy.java,"""/** * Implements {@link org.eclipse.aether.repository.RepositoryPolicy#CHECKSUM_POLICY_WARN}. */""","""final class WarnChecksumPolicy
    extends AbstractChecksumPolicy
{

    public WarnChecksumPolicy( LoggerFactory loggerFactory, TransferResource resource )
    {
        super( loggerFactory, resource );
    }

    public boolean onTransferChecksumFailure( ChecksumFailureException exception )
    {
        String msg =
            ""Could not validate integrity of download from "" + resource.getRepositoryUrl() + resource.getResourceName();
        if ( logger.isDebugEnabled() )
        {
            logger.warn( msg, exception );
        }
        else
        {
            logger.warn( msg + "": "" + exception.getMessage() );
        }
        return true;
    }

}""",1
WrapperPlayServerWorldParticles.java,"""/** * Retrieve the speed of each particle. * @return The current particle speed */""","""public float getParticleSpeed() {
        return handle.getFloat().read(6);
    }""",1
ZMQ.java,"""/** * Unregister a Socket for polling on the specified events. * * @param socket *          the Socket to be unregistered */""","""public void unregister(Socket socket)
        {
            unregisterInternal(socket);
        }""",1
XmlDirectoryContentHandler.java,"""/** * Set the parent directory item at the top of the list. If no parent entry * exists, one will be added with the default path being the root directory */""","""private void setParentTop() {
        for(int i = 0; i < mDirectory.size(); i++) {
            if(mDirectory.get(i).isParent()) {
                if(i != 0) {
                    mDirectory.add(0, mDirectory.remove(i));
                }
                return;
            }
        }
        mDirectory.add(0, new File(File.Type.DIRECTORY, 0L, null, Directory.ROOT_DIRECTORY, "".."", null));
    }""",1
WebRequestContext.java,"""/** * @see javax.servlet.ServletRequestWrapper#getParameterValues(java.lang.String) */""","""public String[] getParameterValues(String name) 
	{
		Object value = this.getObjectParameter(name);
		
		if (value instanceof String) {
			return new String[] { (String)value };
		}
		
		List l = (List)value;
		
		return l == null
			? super.getParameterValues(name)
			: (String[])l.toArray(new String[0]);
	}""",1
XfsAPI.java,"""/** * Retrieves information from the specified service provider. The * asynchronous version of WFSGetInfo. * * @param hService *            Handle to the service provider as returned by WFSOpen or *            WFSAsyncOpen. * @param dwCategory *            See WFSGetInfo. * @param queryDetails *            See WFSGetInfo. * @param dwTimeOut *            Number of milliseconds to wait for completion *            (WFS_INDEFINITE_WAIT to specify a request that will wait until *            completion). * @param hWnd *            The window handle which is to receive the completion message *            for this request. */""","""public RequestId wfsAsyncGetInfo(final HSERVICE hService, final DWORD dwCategory, final Type queryDetails, final DWORD dwTimeOut, final HWND hWnd) throws XfsException {
		final String method = ""wfsAsyncGetInfo(HSERVICE, DWORD, Type, DWORD, HWND)"";
		if (LOG.isDebugEnabled()) {
			LOG.debug(method, ""hService="" + hService + "",dwCategory="" + dwCategory + "",queryDetails="" + queryDetails + "",dwTimeOut="" + dwTimeOut + "",hWnd="" + hWnd);
		}
		RequestId requestId = new RequestId();
		requestId.allocate();
		final int errorCode = wfsAsyncGetInfo0(hService, dwCategory, queryDetails, dwTimeOut, hWnd, requestId);
		XfsException.throwFor(errorCode);
		return requestId;
	}""",1
WeakRemoteEventListener.java,"""/** * Used in order to weakly hold listeners by the Notify delegator. * * @author Guy Korland * @version 1.0 * @since 5.01 */""","""@com.gigaspaces.api.InternalApi
public class WeakRemoteEventListener extends WeakReference<RemoteEventListener>
        implements RemoteEventListener {
    public WeakRemoteEventListener(RemoteEventListener listener) {
        super(listener);
    }

    /**
     * Delegate the notification to the listener.
     */
    public void notify(RemoteEvent event) throws UnknownEventException, RemoteException {
        RemoteEventListener l = get();
        if (l != null) {
            l.notify(event);
        }
    }
}""",1
Wizard.java,"""/** * Master */""","""protected JPanel step4_setup()
{
    JTextArea introText = new JTextArea();
    introText.setLineWrap(true);
    introText.setWrapStyleWord(true);
    introText.setEditable(false);
    introText.setMargin(new Insets(10, 10, 10, 10));
    introText.setAutoscrolls(true);
    introText.setText(
        ""Almost done! It's time to launch the Master console, that\n""
        + ""will allow you to select a simulation to run and set its ""
        + ""parameters.\n""
        + ""\n""
        + ""Click the button below to start the Master and go to ""
        + ""the next step.""
    );
    
    JScrollPane sclIntroText = new JScrollPane(introText);
        
    btnMaster = new JButton(""Launch the Master"");
    btnMaster.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) {	launchMaster(); }});
    
    JPanel pnlButtons = new JPanel();
        pnlButtons.setLayout(new FlowLayout(FlowLayout.LEFT));
        pnlButtons.add(btnMaster);
    
    JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout(10, 10));
        panel.add(sclIntroText, BorderLayout.CENTER);
        panel.add(pnlButtons, BorderLayout.SOUTH);

    return panel;
}""",0
WXSDKEngine.java,"""/** * * Register component. The registration is singleton in {@link WXSDKEngine} level * @param clazz the class of the {@link WXComponent} to be registered. * @param appendTree true for appendTree flag * @return true for registration success, false for otherwise. * @param names names(alias) of component. Same as type field in the JS. * @throws WXException Throws exception if type conflicts. */""","""public static boolean registerComponent(Class<? extends WXComponent> clazz, boolean appendTree,String ... names) throws WXException {
    if(clazz == null){
      return false;
    }
    SimpleComponentHolder holder = new SimpleComponentHolder(clazz);
    return registerComponent(clazz,holder,appendTree,names);
  }""",1
XMLResolver.java,"""/** * get the child node from father node. * * @param source * @param fatherNode * @return */""","""public List<XMLNode> getChildNodes(List<XMLNode> source, String fatherNode) {
        if (source == null) {
            return null;
        }
        List<XMLNode> list = new ArrayList<XMLNode>();
        for (XMLNode xmlNode : source) {
            if (xmlNode.mName.equals(fatherNode)) {
                list.add(xmlNode);
            }
        }
        return list;
    }""",1
WrapperPlayServerEntityTeleport.java,"""/** * Retrieve entity ID. * @return The current EID */""","""public int getEntityID() {
        return handle.getIntegers().read(0);
    }""",1
XMLWriter.java,"""/** * Prints to this <code>XMLWriter</code> an atomic XML tag with attributes. * The tag is indented by @see #indent spaces either from the beginning of the * line (if @see #relative is <code>false</code>) or relative to the current * indentation level(if @see #relative is <code>true</code>). * * @param tag the name of the XML tag. * @param attributesIterator an iterator over a list of attribute/value * <code>Pair</code>s. * @param indent the number of spaces by which the tag needs to be indented. * @param relative specifies whether the indentation is from the beginning * of the line (if @see #relative is <code>false</code>) or from the current * level of indentation (if @see #relative is <code>true</code>). */""","""public void printXMLAtomicTag(String tag, ListIterator attributesIterator, int indent, boolean relative) throws java.io.IOException {
    String attributeString = """";
    while (attributesIterator.hasNext()) {
      Pair attributePair = (Pair) attributesIterator.next();
      attributeString = "" "" + (String) attributePair.component1 + ""=\"""" + (String) attributePair.component2
              + ""\"""" + attributeString;
    }
    String xmltag = ""<"" + tag + attributeString + ""/>"";
    this.indentPrintln(xmltag, indent, relative);
  }""",1
VMInstanceRequest.java,"""/** * Get the job id * * @return The job id */""","""public String getStopBehavior() {
        return (String) this.items.get(TankConstants.KEY_STOP_BEHAVIOR);
    }""",1
WebxmlTopicReader.java,"""/** * Read topics of TREC Web Tracks from 2009 to 2014 including: * topics.web.1-50.txt * topics.web.51-100.txt * topics.web.101-150.txt * topics.web.151-200.txt * topics.web.201-250.txt * topics.web.251-300.txt * @return SortedMap where keys are query/topic IDs and values are title portions of the topics * @throws IOException */""","""@Override
  public SortedMap<Integer, String> read() throws IOException {
    SortedMap<Integer, String> map = new TreeMap<>();
    List<String> lines = Files.readAllLines(topicFile, StandardCharsets.UTF_8);

    String number = """";
    String query = """";

    for (String line : lines) {
      line = line.trim();
      if (line.startsWith(""<topic""))
        number = extract(line, ""number"");
      if (line.startsWith(""<query>"") && line.endsWith(""</query>""))
        query = line.substring(7, line.length() - 8).trim();
      if (line.startsWith(""</topic>""))
        map.put(Integer.parseInt(number), query);
    }

    lines.clear();
    return map;
  }""",1
WorkflowTypeAPI.java,"""/** * This method is used to get the dropdown list of WorkflowType. * * @return */""","""@RequestMapping(value = {""/optionslist""}, method = RequestMethod.POST)


    @ResponseBody
    public RestWrapperOptions listOptions() {

        RestWrapperOptions restWrapperOptions = null;
        try {
            List<WorkflowType> workflowTypes = new ArrayList<WorkflowType>();
            List<com.wipro.ats.bdre.md.dao.jpa.WorkflowType> jpaWorkflowTypes = workflowTypeDAO.list(0, 0);

            for (com.wipro.ats.bdre.md.dao.jpa.WorkflowType wfType : jpaWorkflowTypes) {
                WorkflowType workflowType = new WorkflowType();
                workflowType.setWorkflowId(wfType.getWorkflowId());
                workflowType.setWorkflowTypeName(wfType.getWorkflowTypeName());
                workflowType.setCounter(jpaWorkflowTypes.size());
                workflowTypes.add(workflowType);
            }

            LOGGER.debug(workflowTypes.get(0).getWorkflowId());
            if (workflowTypes.get(0).getWorkflowId() == 0) {
                workflowTypes.remove(0);
            }
            List<RestWrapperOptions.Option> options = new ArrayList<RestWrapperOptions.Option>();

            for (WorkflowType type : workflowTypes) {
                RestWrapperOptions.Option option = new RestWrapperOptions.Option(type.getWorkflowTypeName(), type.getWorkflowId());
                options.add(option);
                LOGGER.debug(option.getDisplayText());
            }
            restWrapperOptions = new RestWrapperOptions(options, RestWrapperOptions.OK);
        } catch (Exception e) {
            LOGGER.error(e);
            restWrapperOptions = new RestWrapperOptions(e.getMessage(), RestWrapperOptions.ERROR);
        }
        return restWrapperOptions;
    }""",1
WrapperPlayServerExplosion.java,"""/** * Set y velocity of the player being pushed by the explosion. * @param value - new value. */""","""public void setPlayerMotionY(float value) {
        handle.getFloat().write(1, value);
    }""",1
WrapperPlayServerBlockBreakAnimation.java,"""/** * Set the y axis of the block coordinate. * @param value - new value. */""","""public void setY(int value) {
        handle.getIntegers().write(2, value);
    }""",1
XAxisRenderer.java,"""/** * Draws the LimitLines associated with this axis to the screen. * * @param c */""","""@Override
    public void renderLimitLines(Canvas c) {

        List<LimitLine> limitLines = mXAxis.getLimitLines();

        if (limitLines == null || limitLines.size() <= 0)
            return;

        float[] position = mRenderLimitLinesBuffer;
        position[0] = 0;
        position[1] = 0;

        for (int i = 0; i < limitLines.size(); i++) {

            LimitLine l = limitLines.get(i);

            if (!l.isEnabled())
                continue;

            int clipRestoreCount = c.save();
            mLimitLineClippingRect.set(mViewPortHandler.getContentRect());
            mLimitLineClippingRect.inset(-l.getLineWidth(), 0.f);
            c.clipRect(mLimitLineClippingRect);

            position[0] = l.getLimit();
            position[1] = 0.f;

            mTrans.pointValuesToPixel(position);

            renderLimitLineLine(c, l, position);
            renderLimitLineLabel(c, l, position, 2.f + l.getYOffset());

            c.restoreToCount(clipRestoreCount);
        }
    }""",1
WSBaseActivity.java,"""/** * @return true if we already have an account set up in the AccountManager * false if we have to wait for the auth screen to process */""","""public boolean setupCredentials() {
        try {
            AuthenticationHelper.getWarmshowersAccount();
            if (MemberInfo.getInstance() == null) {
                MemberInfo.initInstance(null); // Try to get persisted information
            }
            return true;
        } catch (NoAccountException e) {

            if (this.getClass() != AuthenticatorActivity.class) {  // Would be circular, so don't do it.
                Intent i = new Intent(this, AuthenticatorActivity.class);
                i.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
                startActivity(i);
            }
            return false;
        }
    }""",1
WFSIDCCAPS.java,"""/** * @see #readTracks */""","""public Set<IDCTrack> getReadTracks() {
		return XfsConstants.of(readTracks, IDCTrack.class);
	}""",1
WXSwipeLayout.java,"""/** * Start Refresh * @param headerViewHeight */""","""private void startRefresh(int headerViewHeight) {
    mRefreshing = true;
    ValueAnimator animator = ValueAnimator.ofFloat(headerViewHeight, loadingViewHeight);
    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
      @Override
      public void onAnimationUpdate(ValueAnimator animation) {
        LayoutParams lp = (LayoutParams) headerView.getLayoutParams();
        lp.height = (int) ((Float) animation.getAnimatedValue()).floatValue();
        headerView.setLayoutParams(lp);
        moveTargetView(lp.height);
      }
    });
    animator.addListener(new WXRefreshAnimatorListener() {
      @Override
      public void onAnimationEnd(Animator animation) {
        headerView.startAnimation();
        //TODO updateLoadText
        if (onRefreshListener != null) {
          onRefreshListener.onRefresh();
        }
      }
    });
    animator.setDuration(300);
    animator.start();
  }""",1
WrappingUtils.java,"""/** * Wraps the parent's child with a ScaleTypeDrawable. */""","""static ScaleTypeDrawable wrapChildWithScaleType(DrawableParent parent, ScaleType scaleType) {
        Drawable child = parent.setDrawable(sEmptyDrawable);
        child = maybeWrapWithScaleType(child, scaleType);
        parent.setDrawable(child);
        Preconditions.checkNotNull(child, ""Parent has no child drawable!"");
        return (ScaleTypeDrawable) child;
    }""",1
WBSType.java,"""/** * Gets the value of the summaryRemainingLaborUnits property. * * @return *     possible object is *     {@link Double } * */""","""public Double getSummaryRemainingLaborUnits()
   {
      return summaryRemainingLaborUnits;
   }""",1
WBSType.java,"""/** * Gets the value of the summaryRemainingDuration property. * * @return *     possible object is *     {@link Double } * */""","""public Double getSummaryRemainingDuration()
   {
      return summaryRemainingDuration;
   }""",1
WTranslationEntryEn.java,"""/** Returns true if this is one of templates: * {{t}}, {{t+}}, {{t-}}, {{trad}}, or {{trad-}}. */""","""private static boolean isValidTemplateT (String template_name)
    {
        if(null == template_name)
            return false;

        if( template_name.equalsIgnoreCase(""t"") ||
            template_name.equalsIgnoreCase(""t+"") ||
            template_name.equalsIgnoreCase(""t-"") ||
            template_name.equalsIgnoreCase(""trad"") ||
            template_name.equalsIgnoreCase(""trad-"")
          )
            return true;

        return false;
    }""",1
XsdLanguageRuntimeModule.java,"""/** * Bind some extra {@link IValueConverter}s on top of the {@link DefaultTerminalConverters}. */""","""public Class<? extends org.eclipse.xtext.conversion.IValueConverterService> bindIValueConverterService() {
		return CustomConversions.class;
	}""",1
WrapperPlayServerWorldParticles.java,"""/** * Set the offset added to the Y position after being multiplied by random.nextGaussian(). * @param value - new value. */""","""public void setOffsetY(float value) {
        handle.getFloat().write(4, value);
    }""",1
WBSType.java,"""/** * Gets the value of the anticipatedFinishDate property. * * @return *     possible object is *     {@link String } * */""","""public Date getAnticipatedFinishDate()
   {
      return anticipatedFinishDate;
   }""",1
XSLFSheet.java,"""/** * * @return the XMLSlideShow this sheet belongs to */""","""public XMLSlideShow getSlideShow() {
        POIXMLDocumentPart p = getParent();
        while(p != null) {
            if(p instanceof XMLSlideShow){
                return (XMLSlideShow)p;
            }
            p = p.getParent();
        }
        throw new IllegalStateException(""SlideShow was not found"");
    }""",1
WXTextDomObject.java,"""/** * Update {@link #spanned} according to the give charSequence and {@link #style} * @param text the give raw text. * @return an Spanned contains text and spans */""","""private
  @NonNull
  Spanned createSpanned(String text) {
    if (!TextUtils.isEmpty(text)) {
      SpannableString spannable = new SpannableString(text);
      List<SetSpanOperation> ops = createSetSpanOperation(spannable.length());
      if (mFontSize == UNSET) {
        ops.add(new SetSpanOperation(0, spannable.length(),
                                     new AbsoluteSizeSpan(WXText.sDEFAULT_SIZE)));
      }
      Collections.reverse(ops);
      for (SetSpanOperation op : ops) {
        op.execute(spannable);
      }
      return spannable;
    }
    return new SpannableString("""");
  }""",1
X509CertSelector.java,"""/** * Sets the subjectAlternativeNames criterion. The * <code>X509Certificate</code> must contain all or at least one of the * specified subjectAlternativeNames, depending on the value of * the matchAllNames flag (see {@link #setMatchAllSubjectAltNames * setMatchAllSubjectAltNames}). * <p> * This method allows the caller to specify, with a single method call, * the complete set of subject alternative names for the * subjectAlternativeNames criterion. The specified value replaces * the previous value for the subjectAlternativeNames criterion. * <p> * The <code>names</code> parameter (if not <code>null</code>) is a * <code>Collection</code> with one * entry for each name to be included in the subject alternative name * criterion. Each entry is a <code>List</code> whose first entry is an * <code>Integer</code> (the name type, 0-8) and whose second * entry is a <code>String</code> or a byte array (the name, in * string or ASN.1 DER encoded form, respectively). * There can be multiple names of the same type. If <code>null</code> * is supplied as the value for this argument, no * subjectAlternativeNames check will be performed. * <p> * Each subject alternative name in the <code>Collection</code> * may be specified either as a <code>String</code> or as an ASN.1 encoded * byte array. For more details about the formats used, see * {@link #addSubjectAlternativeName(int type, String name) * addSubjectAlternativeName(int type, String name)} and * {@link #addSubjectAlternativeName(int type, byte [] name) * addSubjectAlternativeName(int type, byte [] name)}. * <p> * <strong>Note:</strong> for distinguished names, specify the byte * array form instead of the String form. See the note in * {@link #addSubjectAlternativeName(int, String)} for more information. * <p> * Note that the <code>names</code> parameter can contain duplicate * names (same name and name type), but they may be removed from the * <code>Collection</code> of names returned by the * {@link #getSubjectAlternativeNames getSubjectAlternativeNames} method. * <p> * Note that a deep copy is performed on the <code>Collection</code> to * protect against subsequent modifications. * * @param names a <code>Collection</code> of names (or <code>null</code>) * @throws IOException if a parsing error occurs * @see #getSubjectAlternativeNames */""","""public void setSubjectAlternativeNames(Collection<List<?>> names)
            throws IOException {
        if (names == null) {
            subjectAlternativeNames = null;
            subjectAlternativeGeneralNames = null;
        } else {
            if (names.isEmpty()) {
                subjectAlternativeNames = null;
                subjectAlternativeGeneralNames = null;
                return;
            }
            Set<List<?>> tempNames = cloneAndCheckNames(names);
            // Ensure that we either set both of these or neither
            subjectAlternativeGeneralNames = parseNames(tempNames);
            subjectAlternativeNames = tempNames;
        }
    }""",1